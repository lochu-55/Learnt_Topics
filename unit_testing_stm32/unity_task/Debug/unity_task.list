
unity_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006754  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b10  08006b10  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b10  08006b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b14  08006b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006b18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c24  20000070  08006b84  00008070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004c94  08006b84  00008c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113b1  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9a  00000000  00000000  0001944d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  0001c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af0  00000000  00000000  0001cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006995  00000000  00000000  0001da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1d1  00000000  00000000  000243ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad4f0  00000000  00000000  000335be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  000e0af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e52f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068dc 	.word	0x080068dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080068dc 	.word	0x080068dc

080001e0 <setjmp>:
 80001e0:	46ec      	mov	ip, sp
 80001e2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e6:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001ea:	f04f 0000 	mov.w	r0, #0
 80001ee:	4770      	bx	lr

080001f0 <longjmp>:
 80001f0:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001f4:	46e5      	mov	sp, ip
 80001f6:	ec90 8b10 	vldmia	r0, {d8-d15}
 80001fa:	0008      	movs	r0, r1
 80001fc:	bf08      	it	eq
 80001fe:	2001      	moveq	r0, #1
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f001 b8f6 	b.w	80014b4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <selfrel_offset31>:
 800059c:	6803      	ldr	r3, [r0, #0]
 800059e:	005a      	lsls	r2, r3, #1
 80005a0:	bf4c      	ite	mi
 80005a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80005a6:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80005aa:	4418      	add	r0, r3
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <search_EIT_table>:
 80005b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005b4:	b349      	cbz	r1, 800060a <search_EIT_table+0x5a>
 80005b6:	1e4f      	subs	r7, r1, #1
 80005b8:	4604      	mov	r4, r0
 80005ba:	4615      	mov	r5, r2
 80005bc:	463e      	mov	r6, r7
 80005be:	f04f 0900 	mov.w	r9, #0
 80005c2:	eb09 0106 	add.w	r1, r9, r6
 80005c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80005ca:	1049      	asrs	r1, r1, #1
 80005cc:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 80005d0:	4640      	mov	r0, r8
 80005d2:	f7ff ffe3 	bl	800059c <selfrel_offset31>
 80005d6:	428f      	cmp	r7, r1
 80005d8:	4603      	mov	r3, r0
 80005da:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 80005de:	d00f      	beq.n	8000600 <search_EIT_table+0x50>
 80005e0:	3008      	adds	r0, #8
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	4420      	add	r0, r4
 80005e6:	d807      	bhi.n	80005f8 <search_EIT_table+0x48>
 80005e8:	f7ff ffd8 	bl	800059c <selfrel_offset31>
 80005ec:	3801      	subs	r0, #1
 80005ee:	42a8      	cmp	r0, r5
 80005f0:	d208      	bcs.n	8000604 <search_EIT_table+0x54>
 80005f2:	f101 0901 	add.w	r9, r1, #1
 80005f6:	e7e4      	b.n	80005c2 <search_EIT_table+0x12>
 80005f8:	4589      	cmp	r9, r1
 80005fa:	d006      	beq.n	800060a <search_EIT_table+0x5a>
 80005fc:	1e4e      	subs	r6, r1, #1
 80005fe:	e7e0      	b.n	80005c2 <search_EIT_table+0x12>
 8000600:	42ab      	cmp	r3, r5
 8000602:	d8f9      	bhi.n	80005f8 <search_EIT_table+0x48>
 8000604:	4640      	mov	r0, r8
 8000606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800060a:	f04f 0800 	mov.w	r8, #0
 800060e:	4640      	mov	r0, r8
 8000610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000614 <__gnu_unwind_get_pr_addr>:
 8000614:	2801      	cmp	r0, #1
 8000616:	d007      	beq.n	8000628 <__gnu_unwind_get_pr_addr+0x14>
 8000618:	2802      	cmp	r0, #2
 800061a:	d007      	beq.n	800062c <__gnu_unwind_get_pr_addr+0x18>
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <__gnu_unwind_get_pr_addr+0x1c>)
 800061e:	2800      	cmp	r0, #0
 8000620:	bf0c      	ite	eq
 8000622:	4618      	moveq	r0, r3
 8000624:	2000      	movne	r0, #0
 8000626:	4770      	bx	lr
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <__gnu_unwind_get_pr_addr+0x20>)
 800062a:	4770      	bx	lr
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <__gnu_unwind_get_pr_addr+0x24>)
 800062e:	4770      	bx	lr
 8000630:	08000cdd 	.word	0x08000cdd
 8000634:	08000ce1 	.word	0x08000ce1
 8000638:	08000ce5 	.word	0x08000ce5

0800063c <get_eit_entry>:
 800063c:	b530      	push	{r4, r5, lr}
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <get_eit_entry+0x88>)
 8000640:	b083      	sub	sp, #12
 8000642:	4604      	mov	r4, r0
 8000644:	1e8d      	subs	r5, r1, #2
 8000646:	b31b      	cbz	r3, 8000690 <get_eit_entry+0x54>
 8000648:	a901      	add	r1, sp, #4
 800064a:	4628      	mov	r0, r5
 800064c:	f3af 8000 	nop.w
 8000650:	b388      	cbz	r0, 80006b6 <get_eit_entry+0x7a>
 8000652:	9901      	ldr	r1, [sp, #4]
 8000654:	462a      	mov	r2, r5
 8000656:	f7ff ffab 	bl	80005b0 <search_EIT_table>
 800065a:	4601      	mov	r1, r0
 800065c:	b358      	cbz	r0, 80006b6 <get_eit_entry+0x7a>
 800065e:	f7ff ff9d 	bl	800059c <selfrel_offset31>
 8000662:	684b      	ldr	r3, [r1, #4]
 8000664:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000666:	2b01      	cmp	r3, #1
 8000668:	d028      	beq.n	80006bc <get_eit_entry+0x80>
 800066a:	2b00      	cmp	r3, #0
 800066c:	f101 0004 	add.w	r0, r1, #4
 8000670:	db1f      	blt.n	80006b2 <get_eit_entry+0x76>
 8000672:	f7ff ff93 	bl	800059c <selfrel_offset31>
 8000676:	2300      	movs	r3, #0
 8000678:	6523      	str	r3, [r4, #80]	@ 0x50
 800067a:	6803      	ldr	r3, [r0, #0]
 800067c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0d      	blt.n	800069e <get_eit_entry+0x62>
 8000682:	f7ff ff8b 	bl	800059c <selfrel_offset31>
 8000686:	4603      	mov	r3, r0
 8000688:	2000      	movs	r0, #0
 800068a:	6123      	str	r3, [r4, #16]
 800068c:	b003      	add	sp, #12
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <get_eit_entry+0x8c>)
 8000692:	490e      	ldr	r1, [pc, #56]	@ (80006cc <get_eit_entry+0x90>)
 8000694:	1ac9      	subs	r1, r1, r3
 8000696:	10c9      	asrs	r1, r1, #3
 8000698:	4618      	mov	r0, r3
 800069a:	9101      	str	r1, [sp, #4]
 800069c:	e7da      	b.n	8000654 <get_eit_entry+0x18>
 800069e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006a2:	f7ff ffb7 	bl	8000614 <__gnu_unwind_get_pr_addr>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b128      	cbz	r0, 80006b6 <get_eit_entry+0x7a>
 80006aa:	2000      	movs	r0, #0
 80006ac:	6123      	str	r3, [r4, #16]
 80006ae:	b003      	add	sp, #12
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	2301      	movs	r3, #1
 80006b4:	e7e0      	b.n	8000678 <get_eit_entry+0x3c>
 80006b6:	2300      	movs	r3, #0
 80006b8:	2009      	movs	r0, #9
 80006ba:	e7e6      	b.n	800068a <get_eit_entry+0x4e>
 80006bc:	2300      	movs	r3, #0
 80006be:	2005      	movs	r0, #5
 80006c0:	e7e3      	b.n	800068a <get_eit_entry+0x4e>
 80006c2:	bf00      	nop
 80006c4:	00000000 	.word	0x00000000
 80006c8:	08006a50 	.word	0x08006a50
 80006cc:	08006b10 	.word	0x08006b10

080006d0 <restore_non_core_regs>:
 80006d0:	6803      	ldr	r3, [r0, #0]
 80006d2:	07da      	lsls	r2, r3, #31
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4604      	mov	r4, r0
 80006d8:	d406      	bmi.n	80006e8 <restore_non_core_regs+0x18>
 80006da:	079b      	lsls	r3, r3, #30
 80006dc:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80006e0:	d509      	bpl.n	80006f6 <restore_non_core_regs+0x26>
 80006e2:	f000 fc69 	bl	8000fb8 <__gnu_Unwind_Restore_VFP_D>
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	0759      	lsls	r1, r3, #29
 80006ea:	d509      	bpl.n	8000700 <restore_non_core_regs+0x30>
 80006ec:	071a      	lsls	r2, r3, #28
 80006ee:	d50e      	bpl.n	800070e <restore_non_core_regs+0x3e>
 80006f0:	06db      	lsls	r3, r3, #27
 80006f2:	d513      	bpl.n	800071c <restore_non_core_regs+0x4c>
 80006f4:	bd10      	pop	{r4, pc}
 80006f6:	f000 fc57 	bl	8000fa8 <__gnu_Unwind_Restore_VFP>
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	0759      	lsls	r1, r3, #29
 80006fe:	d4f5      	bmi.n	80006ec <restore_non_core_regs+0x1c>
 8000700:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000704:	f000 fc60 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	071a      	lsls	r2, r3, #28
 800070c:	d4f0      	bmi.n	80006f0 <restore_non_core_regs+0x20>
 800070e:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8000712:	f000 fc61 	bl	8000fd8 <__gnu_Unwind_Restore_WMMXD>
 8000716:	6823      	ldr	r3, [r4, #0]
 8000718:	06db      	lsls	r3, r3, #27
 800071a:	d4eb      	bmi.n	80006f4 <restore_non_core_regs+0x24>
 800071c:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000724:	f000 bc9c 	b.w	8001060 <__gnu_Unwind_Restore_WMMXC>

08000728 <__gnu_unwind_24bit.constprop.0>:
 8000728:	2009      	movs	r0, #9
 800072a:	4770      	bx	lr

0800072c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800072c:	4603      	mov	r3, r0
 800072e:	6800      	ldr	r0, [r0, #0]
 8000730:	b100      	cbz	r0, 8000734 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000732:	4418      	add	r0, r3
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <_Unwind_DebugHook>:
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <unwind_phase2>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4604      	mov	r4, r0
 8000740:	460e      	mov	r6, r1
 8000742:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000744:	4620      	mov	r0, r4
 8000746:	f7ff ff79 	bl	800063c <get_eit_entry>
 800074a:	4605      	mov	r5, r0
 800074c:	b988      	cbnz	r0, 8000772 <unwind_phase2+0x36>
 800074e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000750:	6162      	str	r2, [r4, #20]
 8000752:	6923      	ldr	r3, [r4, #16]
 8000754:	4632      	mov	r2, r6
 8000756:	4621      	mov	r1, r4
 8000758:	2001      	movs	r0, #1
 800075a:	4798      	blx	r3
 800075c:	2808      	cmp	r0, #8
 800075e:	d0f0      	beq.n	8000742 <unwind_phase2+0x6>
 8000760:	2807      	cmp	r0, #7
 8000762:	d106      	bne.n	8000772 <unwind_phase2+0x36>
 8000764:	4628      	mov	r0, r5
 8000766:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000768:	f7ff ffe6 	bl	8000738 <_Unwind_DebugHook>
 800076c:	1d30      	adds	r0, r6, #4
 800076e:	f000 fc0f 	bl	8000f90 <__restore_core_regs>
 8000772:	f006 f867 	bl	8006844 <abort>
 8000776:	bf00      	nop

08000778 <unwind_phase2_forced>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	1d0d      	adds	r5, r1, #4
 800077e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000782:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8000786:	4607      	mov	r7, r0
 8000788:	4614      	mov	r4, r2
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8000790:	f10d 0c0c 	add.w	ip, sp, #12
 8000794:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800079e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007a8:	ae02      	add	r6, sp, #8
 80007aa:	f04f 0e00 	mov.w	lr, #0
 80007ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80007b2:	f8c6 e000 	str.w	lr, [r6]
 80007b6:	e020      	b.n	80007fa <unwind_phase2_forced+0x82>
 80007b8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007c0:	4631      	mov	r1, r6
 80007c2:	a87a      	add	r0, sp, #488	@ 0x1e8
 80007c4:	f005 faf3 	bl	8005dae <memcpy>
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80007cc:	4639      	mov	r1, r7
 80007ce:	4650      	mov	r0, sl
 80007d0:	4798      	blx	r3
 80007d2:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80007d4:	6473      	str	r3, [r6, #68]	@ 0x44
 80007d6:	4621      	mov	r1, r4
 80007d8:	e9cd 6900 	strd	r6, r9, [sp]
 80007dc:	4605      	mov	r5, r0
 80007de:	463b      	mov	r3, r7
 80007e0:	463a      	mov	r2, r7
 80007e2:	2001      	movs	r0, #1
 80007e4:	47c0      	blx	r8
 80007e6:	4604      	mov	r4, r0
 80007e8:	bb18      	cbnz	r0, 8000832 <unwind_phase2_forced+0xba>
 80007ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007ee:	a97a      	add	r1, sp, #488	@ 0x1e8
 80007f0:	4630      	mov	r0, r6
 80007f2:	f005 fadc 	bl	8005dae <memcpy>
 80007f6:	2d08      	cmp	r5, #8
 80007f8:	d119      	bne.n	800082e <unwind_phase2_forced+0xb6>
 80007fa:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80007fc:	4638      	mov	r0, r7
 80007fe:	f7ff ff1d 	bl	800063c <get_eit_entry>
 8000802:	3409      	adds	r4, #9
 8000804:	fa5f fa84 	uxtb.w	sl, r4
 8000808:	4605      	mov	r5, r0
 800080a:	2800      	cmp	r0, #0
 800080c:	d0d4      	beq.n	80007b8 <unwind_phase2_forced+0x40>
 800080e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000810:	6473      	str	r3, [r6, #68]	@ 0x44
 8000812:	463a      	mov	r2, r7
 8000814:	e9cd 6900 	strd	r6, r9, [sp]
 8000818:	463b      	mov	r3, r7
 800081a:	f04a 0110 	orr.w	r1, sl, #16
 800081e:	2001      	movs	r0, #1
 8000820:	47c0      	blx	r8
 8000822:	b930      	cbnz	r0, 8000832 <unwind_phase2_forced+0xba>
 8000824:	4628      	mov	r0, r5
 8000826:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	2d07      	cmp	r5, #7
 8000830:	d005      	beq.n	800083e <unwind_phase2_forced+0xc6>
 8000832:	2509      	movs	r5, #9
 8000834:	4628      	mov	r0, r5
 8000836:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	4620      	mov	r0, r4
 8000840:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000842:	f7ff ff79 	bl	8000738 <_Unwind_DebugHook>
 8000846:	a803      	add	r0, sp, #12
 8000848:	f000 fba2 	bl	8000f90 <__restore_core_regs>

0800084c <_Unwind_GetCFA>:
 800084c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800084e:	4770      	bx	lr

08000850 <__gnu_Unwind_RaiseException>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000854:	640b      	str	r3, [r1, #64]	@ 0x40
 8000856:	f101 0c04 	add.w	ip, r1, #4
 800085a:	460e      	mov	r6, r1
 800085c:	4605      	mov	r5, r0
 800085e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000862:	b0f9      	sub	sp, #484	@ 0x1e4
 8000864:	ac01      	add	r4, sp, #4
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800086c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000878:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800087c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000880:	9700      	str	r7, [sp, #0]
 8000882:	e006      	b.n	8000892 <__gnu_Unwind_RaiseException+0x42>
 8000884:	692b      	ldr	r3, [r5, #16]
 8000886:	466a      	mov	r2, sp
 8000888:	4629      	mov	r1, r5
 800088a:	4798      	blx	r3
 800088c:	2808      	cmp	r0, #8
 800088e:	4604      	mov	r4, r0
 8000890:	d108      	bne.n	80008a4 <__gnu_Unwind_RaiseException+0x54>
 8000892:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8000894:	4628      	mov	r0, r5
 8000896:	f7ff fed1 	bl	800063c <get_eit_entry>
 800089a:	2800      	cmp	r0, #0
 800089c:	d0f2      	beq.n	8000884 <__gnu_Unwind_RaiseException+0x34>
 800089e:	2009      	movs	r0, #9
 80008a0:	b079      	add	sp, #484	@ 0x1e4
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a4:	4668      	mov	r0, sp
 80008a6:	f7ff ff13 	bl	80006d0 <restore_non_core_regs>
 80008aa:	2c06      	cmp	r4, #6
 80008ac:	d1f7      	bne.n	800089e <__gnu_Unwind_RaiseException+0x4e>
 80008ae:	4631      	mov	r1, r6
 80008b0:	4628      	mov	r0, r5
 80008b2:	f7ff ff43 	bl	800073c <unwind_phase2>
 80008b6:	bf00      	nop

080008b8 <__gnu_Unwind_ForcedUnwind>:
 80008b8:	60c1      	str	r1, [r0, #12]
 80008ba:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80008bc:	6182      	str	r2, [r0, #24]
 80008be:	6419      	str	r1, [r3, #64]	@ 0x40
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	e758      	b.n	8000778 <unwind_phase2_forced>
 80008c6:	bf00      	nop

080008c8 <__gnu_Unwind_Resume>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	68c6      	ldr	r6, [r0, #12]
 80008cc:	6943      	ldr	r3, [r0, #20]
 80008ce:	640b      	str	r3, [r1, #64]	@ 0x40
 80008d0:	b9ae      	cbnz	r6, 80008fe <__gnu_Unwind_Resume+0x36>
 80008d2:	6903      	ldr	r3, [r0, #16]
 80008d4:	460a      	mov	r2, r1
 80008d6:	4604      	mov	r4, r0
 80008d8:	460d      	mov	r5, r1
 80008da:	4601      	mov	r1, r0
 80008dc:	2002      	movs	r0, #2
 80008de:	4798      	blx	r3
 80008e0:	2807      	cmp	r0, #7
 80008e2:	d005      	beq.n	80008f0 <__gnu_Unwind_Resume+0x28>
 80008e4:	2808      	cmp	r0, #8
 80008e6:	d10f      	bne.n	8000908 <__gnu_Unwind_Resume+0x40>
 80008e8:	4629      	mov	r1, r5
 80008ea:	4620      	mov	r0, r4
 80008ec:	f7ff ff26 	bl	800073c <unwind_phase2>
 80008f0:	4630      	mov	r0, r6
 80008f2:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80008f4:	f7ff ff20 	bl	8000738 <_Unwind_DebugHook>
 80008f8:	1d28      	adds	r0, r5, #4
 80008fa:	f000 fb49 	bl	8000f90 <__restore_core_regs>
 80008fe:	2201      	movs	r2, #1
 8000900:	f7ff ff3a 	bl	8000778 <unwind_phase2_forced>
 8000904:	f005 ff9e 	bl	8006844 <abort>
 8000908:	f005 ff9c 	bl	8006844 <abort>

0800090c <__gnu_Unwind_Resume_or_Rethrow>:
 800090c:	68c2      	ldr	r2, [r0, #12]
 800090e:	b11a      	cbz	r2, 8000918 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000910:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000912:	640a      	str	r2, [r1, #64]	@ 0x40
 8000914:	2200      	movs	r2, #0
 8000916:	e72f      	b.n	8000778 <unwind_phase2_forced>
 8000918:	e79a      	b.n	8000850 <__gnu_Unwind_RaiseException>
 800091a:	bf00      	nop

0800091c <_Unwind_Complete>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <_Unwind_DeleteException>:
 8000920:	6883      	ldr	r3, [r0, #8]
 8000922:	4601      	mov	r1, r0
 8000924:	b10b      	cbz	r3, 800092a <_Unwind_DeleteException+0xa>
 8000926:	2001      	movs	r0, #1
 8000928:	4718      	bx	r3
 800092a:	4770      	bx	lr

0800092c <_Unwind_VRS_Get>:
 800092c:	2901      	cmp	r1, #1
 800092e:	d010      	beq.n	8000952 <_Unwind_VRS_Get+0x26>
 8000930:	d809      	bhi.n	8000946 <_Unwind_VRS_Get+0x1a>
 8000932:	b983      	cbnz	r3, 8000956 <_Unwind_VRS_Get+0x2a>
 8000934:	2a0f      	cmp	r2, #15
 8000936:	d80e      	bhi.n	8000956 <_Unwind_VRS_Get+0x2a>
 8000938:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800093c:	4618      	mov	r0, r3
 800093e:	6853      	ldr	r3, [r2, #4]
 8000940:	9a00      	ldr	r2, [sp, #0]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4770      	bx	lr
 8000946:	3903      	subs	r1, #3
 8000948:	2901      	cmp	r1, #1
 800094a:	bf8c      	ite	hi
 800094c:	2002      	movhi	r0, #2
 800094e:	2001      	movls	r0, #1
 8000950:	4770      	bx	lr
 8000952:	4608      	mov	r0, r1
 8000954:	4770      	bx	lr
 8000956:	2002      	movs	r0, #2
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <_Unwind_GetGR>:
 800095c:	b500      	push	{lr}
 800095e:	b085      	sub	sp, #20
 8000960:	460a      	mov	r2, r1
 8000962:	2300      	movs	r3, #0
 8000964:	a903      	add	r1, sp, #12
 8000966:	9100      	str	r1, [sp, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f7ff ffdf 	bl	800092c <_Unwind_VRS_Get>
 800096e:	9803      	ldr	r0, [sp, #12]
 8000970:	b005      	add	sp, #20
 8000972:	f85d fb04 	ldr.w	pc, [sp], #4
 8000976:	bf00      	nop

08000978 <_Unwind_VRS_Set>:
 8000978:	2901      	cmp	r1, #1
 800097a:	d010      	beq.n	800099e <_Unwind_VRS_Set+0x26>
 800097c:	d809      	bhi.n	8000992 <_Unwind_VRS_Set+0x1a>
 800097e:	b983      	cbnz	r3, 80009a2 <_Unwind_VRS_Set+0x2a>
 8000980:	2a0f      	cmp	r2, #15
 8000982:	d80e      	bhi.n	80009a2 <_Unwind_VRS_Set+0x2a>
 8000984:	9900      	ldr	r1, [sp, #0]
 8000986:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800098a:	6809      	ldr	r1, [r1, #0]
 800098c:	6051      	str	r1, [r2, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	4770      	bx	lr
 8000992:	3903      	subs	r1, #3
 8000994:	2901      	cmp	r1, #1
 8000996:	bf8c      	ite	hi
 8000998:	2002      	movhi	r0, #2
 800099a:	2001      	movls	r0, #1
 800099c:	4770      	bx	lr
 800099e:	4608      	mov	r0, r1
 80009a0:	4770      	bx	lr
 80009a2:	2002      	movs	r0, #2
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <_Unwind_SetGR>:
 80009a8:	b510      	push	{r4, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	2300      	movs	r3, #0
 80009ae:	ac03      	add	r4, sp, #12
 80009b0:	9203      	str	r2, [sp, #12]
 80009b2:	9400      	str	r4, [sp, #0]
 80009b4:	460a      	mov	r2, r1
 80009b6:	4619      	mov	r1, r3
 80009b8:	f7ff ffde 	bl	8000978 <_Unwind_VRS_Set>
 80009bc:	b004      	add	sp, #16
 80009be:	bd10      	pop	{r4, pc}

080009c0 <__gnu_Unwind_Backtrace>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	f102 0c04 	add.w	ip, r2, #4
 80009ca:	4605      	mov	r5, r0
 80009cc:	460c      	mov	r4, r1
 80009ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009d2:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80009d6:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80009da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009ee:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80009f2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80009f6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80009fa:	9616      	str	r6, [sp, #88]	@ 0x58
 80009fc:	e010      	b.n	8000a20 <__gnu_Unwind_Backtrace+0x60>
 80009fe:	f7ff ffd3 	bl	80009a8 <_Unwind_SetGR>
 8000a02:	4621      	mov	r1, r4
 8000a04:	a816      	add	r0, sp, #88	@ 0x58
 8000a06:	47a8      	blx	r5
 8000a08:	4603      	mov	r3, r0
 8000a0a:	aa16      	add	r2, sp, #88	@ 0x58
 8000a0c:	4669      	mov	r1, sp
 8000a0e:	2008      	movs	r0, #8
 8000a10:	b983      	cbnz	r3, 8000a34 <__gnu_Unwind_Backtrace+0x74>
 8000a12:	9b04      	ldr	r3, [sp, #16]
 8000a14:	4798      	blx	r3
 8000a16:	2805      	cmp	r0, #5
 8000a18:	4606      	mov	r6, r0
 8000a1a:	d00c      	beq.n	8000a36 <__gnu_Unwind_Backtrace+0x76>
 8000a1c:	2809      	cmp	r0, #9
 8000a1e:	d009      	beq.n	8000a34 <__gnu_Unwind_Backtrace+0x74>
 8000a20:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000a22:	4668      	mov	r0, sp
 8000a24:	f7ff fe0a 	bl	800063c <get_eit_entry>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	466a      	mov	r2, sp
 8000a2c:	210c      	movs	r1, #12
 8000a2e:	a816      	add	r0, sp, #88	@ 0x58
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0e4      	beq.n	80009fe <__gnu_Unwind_Backtrace+0x3e>
 8000a34:	2609      	movs	r6, #9
 8000a36:	a816      	add	r0, sp, #88	@ 0x58
 8000a38:	f7ff fe4a 	bl	80006d0 <restore_non_core_regs>
 8000a3c:	4630      	mov	r0, r6
 8000a3e:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 8000a42:	bd70      	pop	{r4, r5, r6, pc}

08000a44 <__gnu_unwind_pr_common>:
 8000a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a48:	4693      	mov	fp, r2
 8000a4a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000a4c:	b089      	sub	sp, #36	@ 0x24
 8000a4e:	460d      	mov	r5, r1
 8000a50:	f852 1b04 	ldr.w	r1, [r2], #4
 8000a54:	9206      	str	r2, [sp, #24]
 8000a56:	f000 0c03 	and.w	ip, r0, #3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d079      	beq.n	8000b52 <__gnu_unwind_pr_common+0x10e>
 8000a5e:	0c0c      	lsrs	r4, r1, #16
 8000a60:	f88d 401d 	strb.w	r4, [sp, #29]
 8000a64:	0409      	lsls	r1, r1, #16
 8000a66:	b2e4      	uxtb	r4, r4
 8000a68:	9105      	str	r1, [sp, #20]
 8000a6a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000a6e:	2102      	movs	r1, #2
 8000a70:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8000a72:	f88d 101c 	strb.w	r1, [sp, #28]
 8000a76:	f1bc 0f02 	cmp.w	ip, #2
 8000a7a:	bf08      	it	eq
 8000a7c:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000a7e:	f017 0701 	ands.w	r7, r7, #1
 8000a82:	d00c      	beq.n	8000a9e <__gnu_unwind_pr_common+0x5a>
 8000a84:	a905      	add	r1, sp, #20
 8000a86:	4658      	mov	r0, fp
 8000a88:	f000 fb84 	bl	8001194 <__gnu_unwind_execute>
 8000a8c:	b918      	cbnz	r0, 8000a96 <__gnu_unwind_pr_common+0x52>
 8000a8e:	2008      	movs	r0, #8
 8000a90:	b009      	add	sp, #36	@ 0x24
 8000a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a96:	2009      	movs	r0, #9
 8000a98:	b009      	add	sp, #36	@ 0x24
 8000a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9e:	6816      	ldr	r6, [r2, #0]
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d0ef      	beq.n	8000a84 <__gnu_unwind_pr_common+0x40>
 8000aa4:	f000 0108 	and.w	r1, r0, #8
 8000aa8:	9101      	str	r1, [sp, #4]
 8000aaa:	46b2      	mov	sl, r6
 8000aac:	9702      	str	r7, [sp, #8]
 8000aae:	4664      	mov	r4, ip
 8000ab0:	4699      	mov	r9, r3
 8000ab2:	f1b9 0f02 	cmp.w	r9, #2
 8000ab6:	d048      	beq.n	8000b4a <__gnu_unwind_pr_common+0x106>
 8000ab8:	f8b2 a000 	ldrh.w	sl, [r2]
 8000abc:	8856      	ldrh	r6, [r2, #2]
 8000abe:	f102 0804 	add.w	r8, r2, #4
 8000ac2:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8000ac4:	f026 0301 	bic.w	r3, r6, #1
 8000ac8:	210f      	movs	r1, #15
 8000aca:	4658      	mov	r0, fp
 8000acc:	189f      	adds	r7, r3, r2
 8000ace:	f7ff ff45 	bl	800095c <_Unwind_GetGR>
 8000ad2:	4287      	cmp	r7, r0
 8000ad4:	d837      	bhi.n	8000b46 <__gnu_unwind_pr_common+0x102>
 8000ad6:	f02a 0201 	bic.w	r2, sl, #1
 8000ada:	443a      	add	r2, r7
 8000adc:	4282      	cmp	r2, r0
 8000ade:	bf94      	ite	ls
 8000ae0:	2200      	movls	r2, #0
 8000ae2:	2201      	movhi	r2, #1
 8000ae4:	0073      	lsls	r3, r6, #1
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	f00a 0a01 	and.w	sl, sl, #1
 8000aee:	ea43 030a 	orr.w	r3, r3, sl
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d047      	beq.n	8000b86 <__gnu_unwind_pr_common+0x142>
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d031      	beq.n	8000b5e <__gnu_unwind_pr_common+0x11a>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1cb      	bne.n	8000a96 <__gnu_unwind_pr_common+0x52>
 8000afe:	b114      	cbz	r4, 8000b06 <__gnu_unwind_pr_common+0xc2>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f040 80c9 	bne.w	8000c98 <__gnu_unwind_pr_common+0x254>
 8000b06:	f108 0204 	add.w	r2, r8, #4
 8000b0a:	f8d2 a000 	ldr.w	sl, [r2]
 8000b0e:	f1ba 0f00 	cmp.w	sl, #0
 8000b12:	d1ce      	bne.n	8000ab2 <__gnu_unwind_pr_common+0x6e>
 8000b14:	a905      	add	r1, sp, #20
 8000b16:	4658      	mov	r0, fp
 8000b18:	9f02      	ldr	r7, [sp, #8]
 8000b1a:	f000 fb3b 	bl	8001194 <__gnu_unwind_execute>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d1b9      	bne.n	8000a96 <__gnu_unwind_pr_common+0x52>
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d0b3      	beq.n	8000a8e <__gnu_unwind_pr_common+0x4a>
 8000b26:	210f      	movs	r1, #15
 8000b28:	4658      	mov	r0, fp
 8000b2a:	f7ff ff17 	bl	800095c <_Unwind_GetGR>
 8000b2e:	210e      	movs	r1, #14
 8000b30:	4602      	mov	r2, r0
 8000b32:	4658      	mov	r0, fp
 8000b34:	f7ff ff38 	bl	80009a8 <_Unwind_SetGR>
 8000b38:	4a67      	ldr	r2, [pc, #412]	@ (8000cd8 <__gnu_unwind_pr_common+0x294>)
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	4658      	mov	r0, fp
 8000b3e:	f7ff ff33 	bl	80009a8 <_Unwind_SetGR>
 8000b42:	2007      	movs	r0, #7
 8000b44:	e7a8      	b.n	8000a98 <__gnu_unwind_pr_common+0x54>
 8000b46:	2200      	movs	r2, #0
 8000b48:	e7cc      	b.n	8000ae4 <__gnu_unwind_pr_common+0xa0>
 8000b4a:	6856      	ldr	r6, [r2, #4]
 8000b4c:	f102 0808 	add.w	r8, r2, #8
 8000b50:	e7b7      	b.n	8000ac2 <__gnu_unwind_pr_common+0x7e>
 8000b52:	0209      	lsls	r1, r1, #8
 8000b54:	9105      	str	r1, [sp, #20]
 8000b56:	f88d 301d 	strb.w	r3, [sp, #29]
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	e788      	b.n	8000a70 <__gnu_unwind_pr_common+0x2c>
 8000b5e:	f8d8 6000 	ldr.w	r6, [r8]
 8000b62:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d144      	bne.n	8000bf4 <__gnu_unwind_pr_common+0x1b0>
 8000b6a:	b122      	cbz	r2, 8000b76 <__gnu_unwind_pr_common+0x132>
 8000b6c:	9a01      	ldr	r2, [sp, #4]
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d05a      	beq.n	8000c28 <__gnu_unwind_pr_common+0x1e4>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d058      	beq.n	8000c28 <__gnu_unwind_pr_common+0x1e4>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	da01      	bge.n	8000b7e <__gnu_unwind_pr_common+0x13a>
 8000b7a:	f108 0804 	add.w	r8, r8, #4
 8000b7e:	3301      	adds	r3, #1
 8000b80:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8000b84:	e7c1      	b.n	8000b0a <__gnu_unwind_pr_common+0xc6>
 8000b86:	b9ec      	cbnz	r4, 8000bc4 <__gnu_unwind_pr_common+0x180>
 8000b88:	b1ca      	cbz	r2, 8000bbe <__gnu_unwind_pr_common+0x17a>
 8000b8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000b8e:	f8d8 2000 	ldr.w	r2, [r8]
 8000b92:	1c99      	adds	r1, r3, #2
 8000b94:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b98:	f43f af7d 	beq.w	8000a96 <__gnu_unwind_pr_common+0x52>
 8000b9c:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	9104      	str	r1, [sp, #16]
 8000ba4:	f000 808b 	beq.w	8000cbe <__gnu_unwind_pr_common+0x27a>
 8000ba8:	f108 0004 	add.w	r0, r8, #4
 8000bac:	f7ff fdbe 	bl	800072c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000bb0:	ab04      	add	r3, sp, #16
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	f3af 8000 	nop.w
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d157      	bne.n	8000c6e <__gnu_unwind_pr_common+0x22a>
 8000bbe:	f108 0208 	add.w	r2, r8, #8
 8000bc2:	e7a2      	b.n	8000b0a <__gnu_unwind_pr_common+0xc6>
 8000bc4:	210d      	movs	r1, #13
 8000bc6:	4658      	mov	r0, fp
 8000bc8:	f7ff fec8 	bl	800095c <_Unwind_GetGR>
 8000bcc:	6a2b      	ldr	r3, [r5, #32]
 8000bce:	4283      	cmp	r3, r0
 8000bd0:	d1f5      	bne.n	8000bbe <__gnu_unwind_pr_common+0x17a>
 8000bd2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000bd4:	4598      	cmp	r8, r3
 8000bd6:	d1f2      	bne.n	8000bbe <__gnu_unwind_pr_common+0x17a>
 8000bd8:	4640      	mov	r0, r8
 8000bda:	f7ff fcdf 	bl	800059c <selfrel_offset31>
 8000bde:	210f      	movs	r1, #15
 8000be0:	4602      	mov	r2, r0
 8000be2:	4658      	mov	r0, fp
 8000be4:	f7ff fee0 	bl	80009a8 <_Unwind_SetGR>
 8000be8:	462a      	mov	r2, r5
 8000bea:	2100      	movs	r1, #0
 8000bec:	4658      	mov	r0, fp
 8000bee:	f7ff fedb 	bl	80009a8 <_Unwind_SetGR>
 8000bf2:	e7a6      	b.n	8000b42 <__gnu_unwind_pr_common+0xfe>
 8000bf4:	210d      	movs	r1, #13
 8000bf6:	4658      	mov	r0, fp
 8000bf8:	9303      	str	r3, [sp, #12]
 8000bfa:	f7ff feaf 	bl	800095c <_Unwind_GetGR>
 8000bfe:	6a2a      	ldr	r2, [r5, #32]
 8000c00:	9b03      	ldr	r3, [sp, #12]
 8000c02:	4282      	cmp	r2, r0
 8000c04:	d1b7      	bne.n	8000b76 <__gnu_unwind_pr_common+0x132>
 8000c06:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000c08:	4590      	cmp	r8, r2
 8000c0a:	d1b4      	bne.n	8000b76 <__gnu_unwind_pr_common+0x132>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	2204      	movs	r2, #4
 8000c10:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8000c14:	4442      	add	r2, r8
 8000c16:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000c18:	636a      	str	r2, [r5, #52]	@ 0x34
 8000c1a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c1e:	42ba      	cmp	r2, r7
 8000c20:	db55      	blt.n	8000cce <__gnu_unwind_pr_common+0x28a>
 8000c22:	2201      	movs	r2, #1
 8000c24:	9202      	str	r2, [sp, #8]
 8000c26:	e7aa      	b.n	8000b7e <__gnu_unwind_pr_common+0x13a>
 8000c28:	9403      	str	r4, [sp, #12]
 8000c2a:	f108 0a04 	add.w	sl, r8, #4
 8000c2e:	2600      	movs	r6, #0
 8000c30:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8000c34:	461c      	mov	r4, r3
 8000c36:	e00d      	b.n	8000c54 <__gnu_unwind_pr_common+0x210>
 8000c38:	4650      	mov	r0, sl
 8000c3a:	9704      	str	r7, [sp, #16]
 8000c3c:	f7ff fd76 	bl	800072c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c40:	2200      	movs	r2, #0
 8000c42:	4601      	mov	r1, r0
 8000c44:	ab04      	add	r3, sp, #16
 8000c46:	4628      	mov	r0, r5
 8000c48:	3601      	adds	r6, #1
 8000c4a:	f10a 0a04 	add.w	sl, sl, #4
 8000c4e:	f3af 8000 	nop.w
 8000c52:	b9e0      	cbnz	r0, 8000c8e <__gnu_unwind_pr_common+0x24a>
 8000c54:	42a6      	cmp	r6, r4
 8000c56:	d1ef      	bne.n	8000c38 <__gnu_unwind_pr_common+0x1f4>
 8000c58:	210d      	movs	r1, #13
 8000c5a:	4658      	mov	r0, fp
 8000c5c:	f7ff fe7e 	bl	800095c <_Unwind_GetGR>
 8000c60:	9b04      	ldr	r3, [sp, #16]
 8000c62:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8000c66:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	e714      	b.n	8000a98 <__gnu_unwind_pr_common+0x54>
 8000c6e:	4604      	mov	r4, r0
 8000c70:	210d      	movs	r1, #13
 8000c72:	4658      	mov	r0, fp
 8000c74:	f7ff fe72 	bl	800095c <_Unwind_GetGR>
 8000c78:	9e04      	ldr	r6, [sp, #16]
 8000c7a:	6228      	str	r0, [r5, #32]
 8000c7c:	2c02      	cmp	r4, #2
 8000c7e:	bf04      	itt	eq
 8000c80:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000c82:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000c86:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	e704      	b.n	8000a98 <__gnu_unwind_pr_common+0x54>
 8000c8e:	4623      	mov	r3, r4
 8000c90:	f8d8 6000 	ldr.w	r6, [r8]
 8000c94:	9c03      	ldr	r4, [sp, #12]
 8000c96:	e76e      	b.n	8000b76 <__gnu_unwind_pr_common+0x132>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	f7ff fc7f 	bl	800059c <selfrel_offset31>
 8000c9e:	f108 0204 	add.w	r2, r8, #4
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f3af 8000 	nop.w
 8000cac:	2800      	cmp	r0, #0
 8000cae:	f43f aef2 	beq.w	8000a96 <__gnu_unwind_pr_common+0x52>
 8000cb2:	4622      	mov	r2, r4
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	4658      	mov	r0, fp
 8000cb8:	f7ff fe76 	bl	80009a8 <_Unwind_SetGR>
 8000cbc:	e741      	b.n	8000b42 <__gnu_unwind_pr_common+0xfe>
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	4658      	mov	r0, fp
 8000cc2:	210d      	movs	r1, #13
 8000cc4:	f7ff fe4a 	bl	800095c <_Unwind_GetGR>
 8000cc8:	4626      	mov	r6, r4
 8000cca:	6228      	str	r0, [r5, #32]
 8000ccc:	e7db      	b.n	8000c86 <__gnu_unwind_pr_common+0x242>
 8000cce:	1c58      	adds	r0, r3, #1
 8000cd0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000cd4:	e781      	b.n	8000bda <__gnu_unwind_pr_common+0x196>
 8000cd6:	bf00      	nop
 8000cd8:	00000000 	.word	0x00000000

08000cdc <__aeabi_unwind_cpp_pr0>:
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e6b1      	b.n	8000a44 <__gnu_unwind_pr_common>

08000ce0 <__aeabi_unwind_cpp_pr1>:
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e6af      	b.n	8000a44 <__gnu_unwind_pr_common>

08000ce4 <__aeabi_unwind_cpp_pr2>:
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e6ad      	b.n	8000a44 <__gnu_unwind_pr_common>

08000ce8 <_Unwind_VRS_Pop>:
 8000ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cec:	4606      	mov	r6, r0
 8000cee:	b0c3      	sub	sp, #268	@ 0x10c
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	461c      	mov	r4, r3
 8000cf4:	2904      	cmp	r1, #4
 8000cf6:	f200 80d1 	bhi.w	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000cfa:	e8df f001 	tbb	[pc, r1]
 8000cfe:	51ac      	.short	0x51ac
 8000d00:	2acf      	.short	0x2acf
 8000d02:	03          	.byte	0x03
 8000d03:	00          	.byte	0x00
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	f040 80c9 	bne.w	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000d0a:	2a10      	cmp	r2, #16
 8000d0c:	f200 80c6 	bhi.w	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000d10:	6803      	ldr	r3, [r0, #0]
 8000d12:	06dc      	lsls	r4, r3, #27
 8000d14:	f100 80e7 	bmi.w	8000ee6 <_Unwind_VRS_Pop+0x1fe>
 8000d18:	af20      	add	r7, sp, #128	@ 0x80
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	f000 f9aa 	bl	8001074 <__gnu_Unwind_Save_WMMXC>
 8000d20:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 8000d22:	4639      	mov	r1, r7
 8000d24:	2300      	movs	r3, #0
 8000d26:	f04f 0c01 	mov.w	ip, #1
 8000d2a:	fa0c f203 	lsl.w	r2, ip, r3
 8000d2e:	422a      	tst	r2, r5
 8000d30:	4620      	mov	r0, r4
 8000d32:	f103 0301 	add.w	r3, r3, #1
 8000d36:	d003      	beq.n	8000d40 <_Unwind_VRS_Pop+0x58>
 8000d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d3c:	600a      	str	r2, [r1, #0]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	f101 0104 	add.w	r1, r1, #4
 8000d46:	d1f0      	bne.n	8000d2a <_Unwind_VRS_Pop+0x42>
 8000d48:	63b4      	str	r4, [r6, #56]	@ 0x38
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	f000 f988 	bl	8001060 <__gnu_Unwind_Restore_WMMXC>
 8000d50:	e099      	b.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000d52:	2c03      	cmp	r4, #3
 8000d54:	f040 80a2 	bne.w	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000d58:	b294      	uxth	r4, r2
 8000d5a:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000d5e:	2b10      	cmp	r3, #16
 8000d60:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d64:	f200 809a 	bhi.w	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000d68:	6803      	ldr	r3, [r0, #0]
 8000d6a:	071f      	lsls	r7, r3, #28
 8000d6c:	f100 80c3 	bmi.w	8000ef6 <_Unwind_VRS_Pop+0x20e>
 8000d70:	af20      	add	r7, sp, #128	@ 0x80
 8000d72:	4638      	mov	r0, r7
 8000d74:	f000 f952 	bl	800101c <__gnu_Unwind_Save_WMMXD>
 8000d78:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000d7a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d7e:	b154      	cbz	r4, 8000d96 <_Unwind_VRS_Pop+0xae>
 8000d80:	460b      	mov	r3, r1
 8000d82:	1ad0      	subs	r0, r2, r3
 8000d84:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000d88:	00e4      	lsls	r4, r4, #3
 8000d8a:	581d      	ldr	r5, [r3, r0]
 8000d8c:	f843 5b04 	str.w	r5, [r3], #4
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d1fa      	bne.n	8000d8a <_Unwind_VRS_Pop+0xa2>
 8000d94:	4422      	add	r2, r4
 8000d96:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000d98:	4638      	mov	r0, r7
 8000d9a:	f000 f91d 	bl	8000fd8 <__gnu_Unwind_Restore_WMMXD>
 8000d9e:	e072      	b.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000da0:	2c01      	cmp	r4, #1
 8000da2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000da6:	b295      	uxth	r5, r2
 8000da8:	d071      	beq.n	8000e8e <_Unwind_VRS_Pop+0x1a6>
 8000daa:	2c05      	cmp	r4, #5
 8000dac:	d176      	bne.n	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000dae:	eb08 0905 	add.w	r9, r8, r5
 8000db2:	f1b9 0f20 	cmp.w	r9, #32
 8000db6:	d871      	bhi.n	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000db8:	f1b8 0f0f 	cmp.w	r8, #15
 8000dbc:	d872      	bhi.n	8000ea4 <_Unwind_VRS_Pop+0x1bc>
 8000dbe:	f1b9 0f10 	cmp.w	r9, #16
 8000dc2:	6803      	ldr	r3, [r0, #0]
 8000dc4:	f200 809f 	bhi.w	8000f06 <_Unwind_VRS_Pop+0x21e>
 8000dc8:	07d9      	lsls	r1, r3, #31
 8000dca:	d508      	bpl.n	8000dde <_Unwind_VRS_Pop+0xf6>
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	f840 3b48 	str.w	r3, [r0], #72
 8000dda:	f000 f8f1 	bl	8000fc0 <__gnu_Unwind_Save_VFP_D>
 8000dde:	af20      	add	r7, sp, #128	@ 0x80
 8000de0:	4638      	mov	r0, r7
 8000de2:	f000 f8ed 	bl	8000fc0 <__gnu_Unwind_Save_VFP_D>
 8000de6:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	f000 80b9 	beq.w	8000f60 <_Unwind_VRS_Pop+0x278>
 8000dee:	006d      	lsls	r5, r5, #1
 8000df0:	1e6a      	subs	r2, r5, #1
 8000df2:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000df6:	2500      	movs	r5, #0
 8000df8:	3201      	adds	r2, #1
 8000dfa:	3904      	subs	r1, #4
 8000dfc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e00:	f853 0b04 	ldr.w	r0, [r3], #4
 8000e04:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d1f9      	bne.n	8000e00 <_Unwind_VRS_Pop+0x118>
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	f000 80a1 	beq.w	8000f54 <_Unwind_VRS_Pop+0x26c>
 8000e12:	4641      	mov	r1, r8
 8000e14:	2910      	cmp	r1, #16
 8000e16:	bf38      	it	cc
 8000e18:	2110      	movcc	r1, #16
 8000e1a:	006b      	lsls	r3, r5, #1
 8000e1c:	3910      	subs	r1, #16
 8000e1e:	466f      	mov	r7, sp
 8000e20:	3b01      	subs	r3, #1
 8000e22:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e26:	3301      	adds	r3, #1
 8000e28:	3904      	subs	r1, #4
 8000e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e2e:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e32:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d1f9      	bne.n	8000e2e <_Unwind_VRS_Pop+0x146>
 8000e3a:	2c01      	cmp	r4, #1
 8000e3c:	f000 8088 	beq.w	8000f50 <_Unwind_VRS_Pop+0x268>
 8000e40:	f1b8 0f0f 	cmp.w	r8, #15
 8000e44:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000e46:	d802      	bhi.n	8000e4e <_Unwind_VRS_Pop+0x166>
 8000e48:	a820      	add	r0, sp, #128	@ 0x80
 8000e4a:	f000 f8b5 	bl	8000fb8 <__gnu_Unwind_Restore_VFP_D>
 8000e4e:	4638      	mov	r0, r7
 8000e50:	f000 f8ba 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e54:	e017      	b.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000e56:	bb0c      	cbnz	r4, 8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000e58:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	fa1f fc82 	uxth.w	ip, r2
 8000e60:	2401      	movs	r4, #1
 8000e62:	1d37      	adds	r7, r6, #4
 8000e64:	fa04 f103 	lsl.w	r1, r4, r3
 8000e68:	ea11 0f0c 	tst.w	r1, ip
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	d004      	beq.n	8000e7a <_Unwind_VRS_Pop+0x192>
 8000e70:	f852 1b04 	ldr.w	r1, [r2], #4
 8000e74:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8000e78:	4610      	mov	r0, r2
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	2b10      	cmp	r3, #16
 8000e7e:	d1f1      	bne.n	8000e64 <_Unwind_VRS_Pop+0x17c>
 8000e80:	04ac      	lsls	r4, r5, #18
 8000e82:	d400      	bmi.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000e84:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000e86:	2000      	movs	r0, #0
 8000e88:	b043      	add	sp, #268	@ 0x10c
 8000e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8e:	eb08 0305 	add.w	r3, r8, r5
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d802      	bhi.n	8000e9c <_Unwind_VRS_Pop+0x1b4>
 8000e96:	f1b8 0f10 	cmp.w	r8, #16
 8000e9a:	d114      	bne.n	8000ec6 <_Unwind_VRS_Pop+0x1de>
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	b043      	add	sp, #268	@ 0x10c
 8000ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d0ee      	beq.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	075a      	lsls	r2, r3, #29
 8000eac:	d45c      	bmi.n	8000f68 <_Unwind_VRS_Pop+0x280>
 8000eae:	466f      	mov	r7, sp
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	f000 f88d 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000eb6:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000eb8:	006b      	lsls	r3, r5, #1
 8000eba:	f1a8 0110 	sub.w	r1, r8, #16
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ec4:	e7af      	b.n	8000e26 <_Unwind_VRS_Pop+0x13e>
 8000ec6:	6803      	ldr	r3, [r0, #0]
 8000ec8:	07da      	lsls	r2, r3, #31
 8000eca:	d459      	bmi.n	8000f80 <_Unwind_VRS_Pop+0x298>
 8000ecc:	af20      	add	r7, sp, #128	@ 0x80
 8000ece:	4638      	mov	r0, r7
 8000ed0:	f000 f86e 	bl	8000fb0 <__gnu_Unwind_Save_VFP>
 8000ed4:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d189      	bne.n	8000dee <_Unwind_VRS_Pop+0x106>
 8000eda:	3304      	adds	r3, #4
 8000edc:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f000 f862 	bl	8000fa8 <__gnu_Unwind_Restore_VFP>
 8000ee4:	e7cf      	b.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000ee6:	f023 0310 	bic.w	r3, r3, #16
 8000eea:	6003      	str	r3, [r0, #0]
 8000eec:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8000ef0:	f000 f8c0 	bl	8001074 <__gnu_Unwind_Save_WMMXC>
 8000ef4:	e710      	b.n	8000d18 <_Unwind_VRS_Pop+0x30>
 8000ef6:	f023 0308 	bic.w	r3, r3, #8
 8000efa:	6003      	str	r3, [r0, #0]
 8000efc:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8000f00:	f000 f88c 	bl	800101c <__gnu_Unwind_Save_WMMXD>
 8000f04:	e734      	b.n	8000d70 <_Unwind_VRS_Pop+0x88>
 8000f06:	07d9      	lsls	r1, r3, #31
 8000f08:	d508      	bpl.n	8000f1c <_Unwind_VRS_Pop+0x234>
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f840 3b48 	str.w	r3, [r0], #72
 8000f16:	f000 f853 	bl	8000fc0 <__gnu_Unwind_Save_VFP_D>
 8000f1a:	6833      	ldr	r3, [r6, #0]
 8000f1c:	0758      	lsls	r0, r3, #29
 8000f1e:	d506      	bpl.n	8000f2e <_Unwind_VRS_Pop+0x246>
 8000f20:	4630      	mov	r0, r6
 8000f22:	f023 0304 	bic.w	r3, r3, #4
 8000f26:	f840 3bd0 	str.w	r3, [r0], #208
 8000f2a:	f000 f851 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f2e:	af20      	add	r7, sp, #128	@ 0x80
 8000f30:	4638      	mov	r0, r7
 8000f32:	f000 f845 	bl	8000fc0 <__gnu_Unwind_Save_VFP_D>
 8000f36:	4668      	mov	r0, sp
 8000f38:	f000 f84a 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f3c:	f1c8 0210 	rsb	r2, r8, #16
 8000f40:	0052      	lsls	r2, r2, #1
 8000f42:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000f44:	f1a9 0510 	sub.w	r5, r9, #16
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000f4e:	e753      	b.n	8000df8 <_Unwind_VRS_Pop+0x110>
 8000f50:	af20      	add	r7, sp, #128	@ 0x80
 8000f52:	e7c2      	b.n	8000eda <_Unwind_VRS_Pop+0x1f2>
 8000f54:	2c01      	cmp	r4, #1
 8000f56:	d0c0      	beq.n	8000eda <_Unwind_VRS_Pop+0x1f2>
 8000f58:	f1b8 0f0f 	cmp.w	r8, #15
 8000f5c:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000f5e:	d892      	bhi.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000f60:	4638      	mov	r0, r7
 8000f62:	f000 f829 	bl	8000fb8 <__gnu_Unwind_Restore_VFP_D>
 8000f66:	e78e      	b.n	8000e86 <_Unwind_VRS_Pop+0x19e>
 8000f68:	f023 0304 	bic.w	r3, r3, #4
 8000f6c:	f840 3bd0 	str.w	r3, [r0], #208
 8000f70:	466f      	mov	r7, sp
 8000f72:	f000 f82d 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f76:	4638      	mov	r0, r7
 8000f78:	f000 f82a 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f7c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000f7e:	e79b      	b.n	8000eb8 <_Unwind_VRS_Pop+0x1d0>
 8000f80:	4630      	mov	r0, r6
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	f840 3b48 	str.w	r3, [r0], #72
 8000f8a:	f000 f811 	bl	8000fb0 <__gnu_Unwind_Save_VFP>
 8000f8e:	e79d      	b.n	8000ecc <_Unwind_VRS_Pop+0x1e4>

08000f90 <__restore_core_regs>:
 8000f90:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000f94:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f98:	469c      	mov	ip, r3
 8000f9a:	46a6      	mov	lr, r4
 8000f9c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fa0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fa4:	46e5      	mov	sp, ip
 8000fa6:	bd00      	pop	{pc}

08000fa8 <__gnu_Unwind_Restore_VFP>:
 8000fa8:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <__gnu_Unwind_Save_VFP>:
 8000fb0:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__gnu_Unwind_Restore_VFP_D>:
 8000fb8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__gnu_Unwind_Save_VFP_D>:
 8000fc0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000fc8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000fd0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Restore_WMMXD>:
 8000fd8:	ecf0 0102 	ldfe	f0, [r0], #8
 8000fdc:	ecf0 1102 	ldfe	f1, [r0], #8
 8000fe0:	ecf0 2102 	ldfe	f2, [r0], #8
 8000fe4:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fe8:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fec:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ff0:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ff4:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ff8:	ecf0 8102 	ldfp	f0, [r0], #8
 8000ffc:	ecf0 9102 	ldfp	f1, [r0], #8
 8001000:	ecf0 a102 	ldfp	f2, [r0], #8
 8001004:	ecf0 b102 	ldfp	f3, [r0], #8
 8001008:	ecf0 c102 	ldfp	f4, [r0], #8
 800100c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001010:	ecf0 e102 	ldfp	f6, [r0], #8
 8001014:	ecf0 f102 	ldfp	f7, [r0], #8
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <__gnu_Unwind_Save_WMMXD>:
 800101c:	ece0 0102 	stfe	f0, [r0], #8
 8001020:	ece0 1102 	stfe	f1, [r0], #8
 8001024:	ece0 2102 	stfe	f2, [r0], #8
 8001028:	ece0 3102 	stfe	f3, [r0], #8
 800102c:	ece0 4102 	stfe	f4, [r0], #8
 8001030:	ece0 5102 	stfe	f5, [r0], #8
 8001034:	ece0 6102 	stfe	f6, [r0], #8
 8001038:	ece0 7102 	stfe	f7, [r0], #8
 800103c:	ece0 8102 	stfp	f0, [r0], #8
 8001040:	ece0 9102 	stfp	f1, [r0], #8
 8001044:	ece0 a102 	stfp	f2, [r0], #8
 8001048:	ece0 b102 	stfp	f3, [r0], #8
 800104c:	ece0 c102 	stfp	f4, [r0], #8
 8001050:	ece0 d102 	stfp	f5, [r0], #8
 8001054:	ece0 e102 	stfp	f6, [r0], #8
 8001058:	ece0 f102 	stfp	f7, [r0], #8
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <__gnu_Unwind_Restore_WMMXC>:
 8001060:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001064:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001068:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800106c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__gnu_Unwind_Save_WMMXC>:
 8001074:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001078:	fca0 9101 	stc2	1, cr9, [r0], #4
 800107c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001080:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_RaiseException>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	a901      	add	r1, sp, #4
 800109e:	f7ff fbd7 	bl	8000850 <__gnu_Unwind_RaiseException>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010a6:	b012      	add	sp, #72	@ 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Unwind_Resume>:
 80010ac:	46ec      	mov	ip, sp
 80010ae:	b500      	push	{lr}
 80010b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c0:	a901      	add	r1, sp, #4
 80010c2:	f7ff fc01 	bl	80008c8 <__gnu_Unwind_Resume>
 80010c6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010ca:	b012      	add	sp, #72	@ 0x48
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <_Unwind_Resume_or_Rethrow>:
 80010d0:	46ec      	mov	ip, sp
 80010d2:	b500      	push	{lr}
 80010d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e4:	a901      	add	r1, sp, #4
 80010e6:	f7ff fc11 	bl	800090c <__gnu_Unwind_Resume_or_Rethrow>
 80010ea:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010ee:	b012      	add	sp, #72	@ 0x48
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <_Unwind_ForcedUnwind>:
 80010f4:	46ec      	mov	ip, sp
 80010f6:	b500      	push	{lr}
 80010f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001108:	ab01      	add	r3, sp, #4
 800110a:	f7ff fbd5 	bl	80008b8 <__gnu_Unwind_ForcedUnwind>
 800110e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001112:	b012      	add	sp, #72	@ 0x48
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <_Unwind_Backtrace>:
 8001118:	46ec      	mov	ip, sp
 800111a:	b500      	push	{lr}
 800111c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001120:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e92d 000c 	stmdb	sp!, {r2, r3}
 800112c:	aa01      	add	r2, sp, #4
 800112e:	f7ff fc47 	bl	80009c0 <__gnu_Unwind_Backtrace>
 8001132:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001136:	b012      	add	sp, #72	@ 0x48
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <next_unwind_byte>:
 800113c:	7a02      	ldrb	r2, [r0, #8]
 800113e:	4603      	mov	r3, r0
 8001140:	b97a      	cbnz	r2, 8001162 <next_unwind_byte+0x26>
 8001142:	7a42      	ldrb	r2, [r0, #9]
 8001144:	b1a2      	cbz	r2, 8001170 <next_unwind_byte+0x34>
 8001146:	6841      	ldr	r1, [r0, #4]
 8001148:	3a01      	subs	r2, #1
 800114a:	b410      	push	{r4}
 800114c:	7242      	strb	r2, [r0, #9]
 800114e:	6808      	ldr	r0, [r1, #0]
 8001150:	2203      	movs	r2, #3
 8001152:	1d0c      	adds	r4, r1, #4
 8001154:	721a      	strb	r2, [r3, #8]
 8001156:	0202      	lsls	r2, r0, #8
 8001158:	605c      	str	r4, [r3, #4]
 800115a:	0e00      	lsrs	r0, r0, #24
 800115c:	bc10      	pop	{r4}
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	4770      	bx	lr
 8001162:	6800      	ldr	r0, [r0, #0]
 8001164:	3a01      	subs	r2, #1
 8001166:	721a      	strb	r2, [r3, #8]
 8001168:	0202      	lsls	r2, r0, #8
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	0e00      	lsrs	r0, r0, #24
 800116e:	4770      	bx	lr
 8001170:	20b0      	movs	r0, #176	@ 0xb0
 8001172:	4770      	bx	lr

08001174 <_Unwind_GetGR.constprop.0>:
 8001174:	b500      	push	{lr}
 8001176:	b085      	sub	sp, #20
 8001178:	2300      	movs	r3, #0
 800117a:	aa03      	add	r2, sp, #12
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	220c      	movs	r2, #12
 8001182:	f7ff fbd3 	bl	800092c <_Unwind_VRS_Get>
 8001186:	9803      	ldr	r0, [sp, #12]
 8001188:	b005      	add	sp, #20
 800118a:	f85d fb04 	ldr.w	pc, [sp], #4
 800118e:	bf00      	nop

08001190 <unwind_UCB_from_context>:
 8001190:	e7f0      	b.n	8001174 <_Unwind_GetGR.constprop.0>
 8001192:	bf00      	nop

08001194 <__gnu_unwind_execute>:
 8001194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001198:	4606      	mov	r6, r0
 800119a:	b085      	sub	sp, #20
 800119c:	460d      	mov	r5, r1
 800119e:	f04f 0800 	mov.w	r8, #0
 80011a2:	4628      	mov	r0, r5
 80011a4:	f7ff ffca 	bl	800113c <next_unwind_byte>
 80011a8:	28b0      	cmp	r0, #176	@ 0xb0
 80011aa:	4604      	mov	r4, r0
 80011ac:	f000 80da 	beq.w	8001364 <__gnu_unwind_execute+0x1d0>
 80011b0:	0607      	lsls	r7, r0, #24
 80011b2:	d546      	bpl.n	8001242 <__gnu_unwind_execute+0xae>
 80011b4:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80011b8:	2b80      	cmp	r3, #128	@ 0x80
 80011ba:	d05e      	beq.n	800127a <__gnu_unwind_execute+0xe6>
 80011bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80011be:	d073      	beq.n	80012a8 <__gnu_unwind_execute+0x114>
 80011c0:	d81b      	bhi.n	80011fa <__gnu_unwind_execute+0x66>
 80011c2:	2b90      	cmp	r3, #144	@ 0x90
 80011c4:	f000 809b 	beq.w	80012fe <__gnu_unwind_execute+0x16a>
 80011c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80011ca:	d112      	bne.n	80011f2 <__gnu_unwind_execute+0x5e>
 80011cc:	43c3      	mvns	r3, r0
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80011d6:	411a      	asrs	r2, r3
 80011d8:	0701      	lsls	r1, r0, #28
 80011da:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80011de:	d501      	bpl.n	80011e4 <__gnu_unwind_execute+0x50>
 80011e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011e4:	2300      	movs	r3, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4630      	mov	r0, r6
 80011ea:	f7ff fd7d 	bl	8000ce8 <_Unwind_VRS_Pop>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0d7      	beq.n	80011a2 <__gnu_unwind_execute+0xe>
 80011f2:	2009      	movs	r0, #9
 80011f4:	b005      	add	sp, #20
 80011f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80011fc:	d16d      	bne.n	80012da <__gnu_unwind_execute+0x146>
 80011fe:	28c6      	cmp	r0, #198	@ 0xc6
 8001200:	f000 8093 	beq.w	800132a <__gnu_unwind_execute+0x196>
 8001204:	28c7      	cmp	r0, #199	@ 0xc7
 8001206:	f000 80b2 	beq.w	800136e <__gnu_unwind_execute+0x1da>
 800120a:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 800120e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001210:	f000 80d2 	beq.w	80013b8 <__gnu_unwind_execute+0x224>
 8001214:	28c8      	cmp	r0, #200	@ 0xc8
 8001216:	f000 80dd 	beq.w	80013d4 <__gnu_unwind_execute+0x240>
 800121a:	28c9      	cmp	r0, #201	@ 0xc9
 800121c:	d1e9      	bne.n	80011f2 <__gnu_unwind_execute+0x5e>
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff ff8c 	bl	800113c <next_unwind_byte>
 8001224:	0302      	lsls	r2, r0, #12
 8001226:	f000 000f 	and.w	r0, r0, #15
 800122a:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800122e:	3001      	adds	r0, #1
 8001230:	4302      	orrs	r2, r0
 8001232:	2101      	movs	r1, #1
 8001234:	2305      	movs	r3, #5
 8001236:	4630      	mov	r0, r6
 8001238:	f7ff fd56 	bl	8000ce8 <_Unwind_VRS_Pop>
 800123c:	2800      	cmp	r0, #0
 800123e:	d0b0      	beq.n	80011a2 <__gnu_unwind_execute+0xe>
 8001240:	e7d7      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 8001242:	0083      	lsls	r3, r0, #2
 8001244:	b2db      	uxtb	r3, r3
 8001246:	1d1f      	adds	r7, r3, #4
 8001248:	f10d 090c 	add.w	r9, sp, #12
 800124c:	2300      	movs	r3, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f8cd 9000 	str.w	r9, [sp]
 8001254:	220d      	movs	r2, #13
 8001256:	4630      	mov	r0, r6
 8001258:	f7ff fb68 	bl	800092c <_Unwind_VRS_Get>
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	f8cd 9000 	str.w	r9, [sp]
 8001262:	0660      	lsls	r0, r4, #25
 8001264:	bf4c      	ite	mi
 8001266:	1bdf      	submi	r7, r3, r7
 8001268:	18ff      	addpl	r7, r7, r3
 800126a:	2300      	movs	r3, #0
 800126c:	220d      	movs	r2, #13
 800126e:	4619      	mov	r1, r3
 8001270:	4630      	mov	r0, r6
 8001272:	9703      	str	r7, [sp, #12]
 8001274:	f7ff fb80 	bl	8000978 <_Unwind_VRS_Set>
 8001278:	e793      	b.n	80011a2 <__gnu_unwind_execute+0xe>
 800127a:	4628      	mov	r0, r5
 800127c:	f7ff ff5e 	bl	800113c <next_unwind_byte>
 8001280:	0224      	lsls	r4, r4, #8
 8001282:	4320      	orrs	r0, r4
 8001284:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001288:	d0b3      	beq.n	80011f2 <__gnu_unwind_execute+0x5e>
 800128a:	0104      	lsls	r4, r0, #4
 800128c:	2300      	movs	r3, #0
 800128e:	b2a2      	uxth	r2, r4
 8001290:	4619      	mov	r1, r3
 8001292:	4630      	mov	r0, r6
 8001294:	f7ff fd28 	bl	8000ce8 <_Unwind_VRS_Pop>
 8001298:	2800      	cmp	r0, #0
 800129a:	d1aa      	bne.n	80011f2 <__gnu_unwind_execute+0x5e>
 800129c:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80012a0:	bf18      	it	ne
 80012a2:	f04f 0801 	movne.w	r8, #1
 80012a6:	e77c      	b.n	80011a2 <__gnu_unwind_execute+0xe>
 80012a8:	28b1      	cmp	r0, #177	@ 0xb1
 80012aa:	d051      	beq.n	8001350 <__gnu_unwind_execute+0x1bc>
 80012ac:	28b2      	cmp	r0, #178	@ 0xb2
 80012ae:	f000 80ad 	beq.w	800140c <__gnu_unwind_execute+0x278>
 80012b2:	28b3      	cmp	r0, #179	@ 0xb3
 80012b4:	d06d      	beq.n	8001392 <__gnu_unwind_execute+0x1fe>
 80012b6:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 80012ba:	2bb4      	cmp	r3, #180	@ 0xb4
 80012bc:	d099      	beq.n	80011f2 <__gnu_unwind_execute+0x5e>
 80012be:	f000 0207 	and.w	r2, r0, #7
 80012c2:	3201      	adds	r2, #1
 80012c4:	2301      	movs	r3, #1
 80012c6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012ca:	4619      	mov	r1, r3
 80012cc:	4630      	mov	r0, r6
 80012ce:	f7ff fd0b 	bl	8000ce8 <_Unwind_VRS_Pop>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	f43f af65 	beq.w	80011a2 <__gnu_unwind_execute+0xe>
 80012d8:	e78b      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 80012da:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80012de:	2bd0      	cmp	r3, #208	@ 0xd0
 80012e0:	d187      	bne.n	80011f2 <__gnu_unwind_execute+0x5e>
 80012e2:	f000 0207 	and.w	r2, r0, #7
 80012e6:	3201      	adds	r2, #1
 80012e8:	2305      	movs	r3, #5
 80012ea:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012ee:	2101      	movs	r1, #1
 80012f0:	4630      	mov	r0, r6
 80012f2:	f7ff fcf9 	bl	8000ce8 <_Unwind_VRS_Pop>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	f43f af53 	beq.w	80011a2 <__gnu_unwind_execute+0xe>
 80012fc:	e779      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 80012fe:	f000 030d 	and.w	r3, r0, #13
 8001302:	2b0d      	cmp	r3, #13
 8001304:	f43f af75 	beq.w	80011f2 <__gnu_unwind_execute+0x5e>
 8001308:	af03      	add	r7, sp, #12
 800130a:	2300      	movs	r3, #0
 800130c:	f000 020f 	and.w	r2, r0, #15
 8001310:	4619      	mov	r1, r3
 8001312:	9700      	str	r7, [sp, #0]
 8001314:	4630      	mov	r0, r6
 8001316:	f7ff fb09 	bl	800092c <_Unwind_VRS_Get>
 800131a:	2300      	movs	r3, #0
 800131c:	9700      	str	r7, [sp, #0]
 800131e:	220d      	movs	r2, #13
 8001320:	4619      	mov	r1, r3
 8001322:	4630      	mov	r0, r6
 8001324:	f7ff fb28 	bl	8000978 <_Unwind_VRS_Set>
 8001328:	e73b      	b.n	80011a2 <__gnu_unwind_execute+0xe>
 800132a:	4628      	mov	r0, r5
 800132c:	f7ff ff06 	bl	800113c <next_unwind_byte>
 8001330:	0302      	lsls	r2, r0, #12
 8001332:	f000 000f 	and.w	r0, r0, #15
 8001336:	3001      	adds	r0, #1
 8001338:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800133c:	2303      	movs	r3, #3
 800133e:	4302      	orrs	r2, r0
 8001340:	4619      	mov	r1, r3
 8001342:	4630      	mov	r0, r6
 8001344:	f7ff fcd0 	bl	8000ce8 <_Unwind_VRS_Pop>
 8001348:	2800      	cmp	r0, #0
 800134a:	f43f af2a 	beq.w	80011a2 <__gnu_unwind_execute+0xe>
 800134e:	e750      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff fef3 	bl	800113c <next_unwind_byte>
 8001356:	1e43      	subs	r3, r0, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b0e      	cmp	r3, #14
 800135c:	4602      	mov	r2, r0
 800135e:	f67f af41 	bls.w	80011e4 <__gnu_unwind_execute+0x50>
 8001362:	e746      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 8001364:	f1b8 0f00 	cmp.w	r8, #0
 8001368:	d040      	beq.n	80013ec <__gnu_unwind_execute+0x258>
 800136a:	2000      	movs	r0, #0
 800136c:	e742      	b.n	80011f4 <__gnu_unwind_execute+0x60>
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fee4 	bl	800113c <next_unwind_byte>
 8001374:	1e43      	subs	r3, r0, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b0e      	cmp	r3, #14
 800137a:	4602      	mov	r2, r0
 800137c:	f63f af39 	bhi.w	80011f2 <__gnu_unwind_execute+0x5e>
 8001380:	2300      	movs	r3, #0
 8001382:	2104      	movs	r1, #4
 8001384:	4630      	mov	r0, r6
 8001386:	f7ff fcaf 	bl	8000ce8 <_Unwind_VRS_Pop>
 800138a:	2800      	cmp	r0, #0
 800138c:	f43f af09 	beq.w	80011a2 <__gnu_unwind_execute+0xe>
 8001390:	e72f      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 8001392:	4628      	mov	r0, r5
 8001394:	f7ff fed2 	bl	800113c <next_unwind_byte>
 8001398:	0302      	lsls	r2, r0, #12
 800139a:	f000 000f 	and.w	r0, r0, #15
 800139e:	3001      	adds	r0, #1
 80013a0:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80013a4:	2301      	movs	r3, #1
 80013a6:	4302      	orrs	r2, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4630      	mov	r0, r6
 80013ac:	f7ff fc9c 	bl	8000ce8 <_Unwind_VRS_Pop>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	f43f aef6 	beq.w	80011a2 <__gnu_unwind_execute+0xe>
 80013b6:	e71c      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 80013b8:	f000 020f 	and.w	r2, r0, #15
 80013bc:	3201      	adds	r2, #1
 80013be:	2303      	movs	r3, #3
 80013c0:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 80013c4:	4619      	mov	r1, r3
 80013c6:	4630      	mov	r0, r6
 80013c8:	f7ff fc8e 	bl	8000ce8 <_Unwind_VRS_Pop>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	f43f aee8 	beq.w	80011a2 <__gnu_unwind_execute+0xe>
 80013d2:	e70e      	b.n	80011f2 <__gnu_unwind_execute+0x5e>
 80013d4:	4628      	mov	r0, r5
 80013d6:	f7ff feb1 	bl	800113c <next_unwind_byte>
 80013da:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 80013de:	f000 030f 	and.w	r3, r0, #15
 80013e2:	3210      	adds	r2, #16
 80013e4:	3301      	adds	r3, #1
 80013e6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013ea:	e722      	b.n	8001232 <__gnu_unwind_execute+0x9e>
 80013ec:	ac03      	add	r4, sp, #12
 80013ee:	4643      	mov	r3, r8
 80013f0:	4641      	mov	r1, r8
 80013f2:	220e      	movs	r2, #14
 80013f4:	9400      	str	r4, [sp, #0]
 80013f6:	4630      	mov	r0, r6
 80013f8:	f7ff fa98 	bl	800092c <_Unwind_VRS_Get>
 80013fc:	9400      	str	r4, [sp, #0]
 80013fe:	4643      	mov	r3, r8
 8001400:	220f      	movs	r2, #15
 8001402:	4641      	mov	r1, r8
 8001404:	4630      	mov	r0, r6
 8001406:	f7ff fab7 	bl	8000978 <_Unwind_VRS_Set>
 800140a:	e7ae      	b.n	800136a <__gnu_unwind_execute+0x1d6>
 800140c:	2300      	movs	r3, #0
 800140e:	f10d 090c 	add.w	r9, sp, #12
 8001412:	220d      	movs	r2, #13
 8001414:	4619      	mov	r1, r3
 8001416:	f8cd 9000 	str.w	r9, [sp]
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff fa86 	bl	800092c <_Unwind_VRS_Get>
 8001420:	4628      	mov	r0, r5
 8001422:	f7ff fe8b 	bl	800113c <next_unwind_byte>
 8001426:	0602      	lsls	r2, r0, #24
 8001428:	9c03      	ldr	r4, [sp, #12]
 800142a:	f04f 0702 	mov.w	r7, #2
 800142e:	d50b      	bpl.n	8001448 <__gnu_unwind_execute+0x2b4>
 8001430:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001434:	40b8      	lsls	r0, r7
 8001436:	4404      	add	r4, r0
 8001438:	4628      	mov	r0, r5
 800143a:	9403      	str	r4, [sp, #12]
 800143c:	f7ff fe7e 	bl	800113c <next_unwind_byte>
 8001440:	0603      	lsls	r3, r0, #24
 8001442:	f107 0707 	add.w	r7, r7, #7
 8001446:	d4f3      	bmi.n	8001430 <__gnu_unwind_execute+0x29c>
 8001448:	fa00 f207 	lsl.w	r2, r0, r7
 800144c:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001450:	4422      	add	r2, r4
 8001452:	2300      	movs	r3, #0
 8001454:	9203      	str	r2, [sp, #12]
 8001456:	f8cd 9000 	str.w	r9, [sp]
 800145a:	220d      	movs	r2, #13
 800145c:	4619      	mov	r1, r3
 800145e:	4630      	mov	r0, r6
 8001460:	f7ff fa8a 	bl	8000978 <_Unwind_VRS_Set>
 8001464:	e69d      	b.n	80011a2 <__gnu_unwind_execute+0xe>
 8001466:	bf00      	nop

08001468 <__gnu_unwind_frame>:
 8001468:	b510      	push	{r4, lr}
 800146a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800146c:	6853      	ldr	r3, [r2, #4]
 800146e:	b084      	sub	sp, #16
 8001470:	f04f 0c03 	mov.w	ip, #3
 8001474:	3208      	adds	r2, #8
 8001476:	021c      	lsls	r4, r3, #8
 8001478:	4608      	mov	r0, r1
 800147a:	0e1b      	lsrs	r3, r3, #24
 800147c:	a901      	add	r1, sp, #4
 800147e:	9401      	str	r4, [sp, #4]
 8001480:	9202      	str	r2, [sp, #8]
 8001482:	f88d c00c 	strb.w	ip, [sp, #12]
 8001486:	f88d 300d 	strb.w	r3, [sp, #13]
 800148a:	f7ff fe83 	bl	8001194 <__gnu_unwind_execute>
 800148e:	b004      	add	sp, #16
 8001490:	bd10      	pop	{r4, pc}
 8001492:	bf00      	nop

08001494 <_Unwind_GetRegionStart>:
 8001494:	b508      	push	{r3, lr}
 8001496:	f7ff fe7b 	bl	8001190 <unwind_UCB_from_context>
 800149a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800149c:	bd08      	pop	{r3, pc}
 800149e:	bf00      	nop

080014a0 <_Unwind_GetLanguageSpecificData>:
 80014a0:	b508      	push	{r3, lr}
 80014a2:	f7ff fe75 	bl	8001190 <unwind_UCB_from_context>
 80014a6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80014a8:	79c3      	ldrb	r3, [r0, #7]
 80014aa:	3302      	adds	r3, #2
 80014ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014b0:	bd08      	pop	{r3, pc}
 80014b2:	bf00      	nop

080014b4 <__aeabi_idiv0>:
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80014c6:	d809      	bhi.n	80014dc <UnityPrintChar+0x24>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b1f      	cmp	r3, #31
 80014ce:	d905      	bls.n	80014dc <UnityPrintChar+0x24>
    {
        UNITY_OUTPUT_CHAR(*pch);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fa5b 	bl	8005990 <putchar>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 80014da:	e021      	b.n	8001520 <UnityPrintChar+0x68>
    else if (*pch == 13)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0d      	cmp	r3, #13
 80014e2:	d106      	bne.n	80014f2 <UnityPrintChar+0x3a>
        UNITY_OUTPUT_CHAR('\\');
 80014e4:	205c      	movs	r0, #92	@ 0x5c
 80014e6:	f004 fa53 	bl	8005990 <putchar>
        UNITY_OUTPUT_CHAR('r');
 80014ea:	2072      	movs	r0, #114	@ 0x72
 80014ec:	f004 fa50 	bl	8005990 <putchar>
}
 80014f0:	e016      	b.n	8001520 <UnityPrintChar+0x68>
    else if (*pch == 10)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d106      	bne.n	8001508 <UnityPrintChar+0x50>
        UNITY_OUTPUT_CHAR('\\');
 80014fa:	205c      	movs	r0, #92	@ 0x5c
 80014fc:	f004 fa48 	bl	8005990 <putchar>
        UNITY_OUTPUT_CHAR('n');
 8001500:	206e      	movs	r0, #110	@ 0x6e
 8001502:	f004 fa45 	bl	8005990 <putchar>
}
 8001506:	e00b      	b.n	8001520 <UnityPrintChar+0x68>
        UNITY_OUTPUT_CHAR('\\');
 8001508:	205c      	movs	r0, #92	@ 0x5c
 800150a:	f004 fa41 	bl	8005990 <putchar>
        UNITY_OUTPUT_CHAR('x');
 800150e:	2078      	movs	r0, #120	@ 0x78
 8001510:	f004 fa3e 	bl	8005990 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2102      	movs	r1, #2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f8ca 	bl	80016b4 <UnityPrintNumberHex>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <UnityPrint+0x28>
    {
        while (*pch)
 800153a:	e005      	b.n	8001548 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ffbb 	bl	80014b8 <UnityPrintChar>
            pch++;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f5      	bne.n	800153c <UnityPrint+0x14>
        }
    }
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <UnityPrintNumberByStyle>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <UnityPrintNumberByStyle+0x84>
    {
        if (style == UNITY_DISPLAY_STYLE_CHAR)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b91      	cmp	r3, #145	@ 0x91
 8001572:	d12f      	bne.n	80015d4 <UnityPrintNumberByStyle+0x7c>
        {
            /* printable characters plus CR & LF are printed */
            UNITY_OUTPUT_CHAR('\'');
 8001574:	2027      	movs	r0, #39	@ 0x27
 8001576:	f004 fa0b 	bl	8005990 <putchar>
            if ((number <= 126) && (number >= 32))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b7e      	cmp	r3, #126	@ 0x7e
 800157e:	dc06      	bgt.n	800158e <UnityPrintNumberByStyle+0x36>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b1f      	cmp	r3, #31
 8001584:	dd03      	ble.n	800158e <UnityPrintNumberByStyle+0x36>
            {
                UNITY_OUTPUT_CHAR((int)number);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f004 fa02 	bl	8005990 <putchar>
 800158c:	e01e      	b.n	80015cc <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped carriage returns */
            else if (number == 13)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0d      	cmp	r3, #13
 8001592:	d106      	bne.n	80015a2 <UnityPrintNumberByStyle+0x4a>
            {
                UNITY_OUTPUT_CHAR('\\');
 8001594:	205c      	movs	r0, #92	@ 0x5c
 8001596:	f004 f9fb 	bl	8005990 <putchar>
                UNITY_OUTPUT_CHAR('r');
 800159a:	2072      	movs	r0, #114	@ 0x72
 800159c:	f004 f9f8 	bl	8005990 <putchar>
 80015a0:	e014      	b.n	80015cc <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped line feeds */
            else if (number == 10)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	d106      	bne.n	80015b6 <UnityPrintNumberByStyle+0x5e>
            {
                UNITY_OUTPUT_CHAR('\\');
 80015a8:	205c      	movs	r0, #92	@ 0x5c
 80015aa:	f004 f9f1 	bl	8005990 <putchar>
                UNITY_OUTPUT_CHAR('n');
 80015ae:	206e      	movs	r0, #110	@ 0x6e
 80015b0:	f004 f9ee 	bl	8005990 <putchar>
 80015b4:	e00a      	b.n	80015cc <UnityPrintNumberByStyle+0x74>
            }
            /* unprintable characters are shown as codes */
            else
            {
                UNITY_OUTPUT_CHAR('\\');
 80015b6:	205c      	movs	r0, #92	@ 0x5c
 80015b8:	f004 f9ea 	bl	8005990 <putchar>
                UNITY_OUTPUT_CHAR('x');
 80015bc:	2078      	movs	r0, #120	@ 0x78
 80015be:	f004 f9e7 	bl	8005990 <putchar>
                UnityPrintNumberHex((UNITY_UINT)number, 2);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f874 	bl	80016b4 <UnityPrintNumberHex>
            }
            UNITY_OUTPUT_CHAR('\'');
 80015cc:	2027      	movs	r0, #39	@ 0x27
 80015ce:	f004 f9df 	bl	8005990 <putchar>
    {
        UNITY_OUTPUT_CHAR('0');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    }
}
 80015d2:	e01e      	b.n	8001612 <UnityPrintNumberByStyle+0xba>
            UnityPrintNumber(number);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f820 	bl	800161a <UnityPrintNumber>
}
 80015da:	e01a      	b.n	8001612 <UnityPrintNumberByStyle+0xba>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <UnityPrintNumberByStyle+0x98>
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f82d 	bl	8001648 <UnityPrintNumberUnsigned>
}
 80015ee:	e010      	b.n	8001612 <UnityPrintNumberByStyle+0xba>
        UNITY_OUTPUT_CHAR('0');
 80015f0:	2030      	movs	r0, #48	@ 0x30
 80015f2:	f004 f9cd 	bl	8005990 <putchar>
        UNITY_OUTPUT_CHAR('x');
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	f004 f9ca 	bl	8005990 <putchar>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	b2db      	uxtb	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f000 f851 	bl	80016b4 <UnityPrintNumberHex>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da05      	bge.n	8001638 <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 800162c:	202d      	movs	r0, #45	@ 0x2d
 800162e:	f004 f9af 	bl	8005990 <putchar>
        number = (~number) + 1;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	425b      	negs	r3, r3
 8001636:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f805 	bl	8001648 <UnityPrintNumberUnsigned>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 8001650:	2301      	movs	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 8001654:	e005      	b.n	8001662 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	2b09      	cmp	r3, #9
 800166c:	d8f3      	bhi.n	8001656 <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	fbb2 f1f3 	udiv	r1, r2, r3
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <UnityPrintNumberUnsigned+0x68>)
 8001678:	fba3 2301 	umull	r2, r3, r3, r1
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	1aca      	subs	r2, r1, r3
 8001688:	b2d3      	uxtb	r3, r2
 800168a:	3330      	adds	r3, #48	@ 0x30
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f004 f97e 	bl	8005990 <putchar>
        divisor /= 10;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <UnityPrintNumberUnsigned+0x68>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e3      	bne.n	800166e <UnityPrintNumberUnsigned+0x26>
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d91f      	bls.n	800170a <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 80016ca:	2308      	movs	r3, #8
 80016cc:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 80016ce:	e01c      	b.n	800170a <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b09      	cmp	r3, #9
 80016ea:	dc07      	bgt.n	80016fc <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3330      	adds	r3, #48	@ 0x30
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 f94b 	bl	8005990 <putchar>
 80016fa:	e006      	b.n	800170a <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3337      	adds	r3, #55	@ 0x37
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f004 f943 	bl	8005990 <putchar>
    while (nibbles > 0)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1df      	bne.n	80016d0 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fefe 	bl	8001528 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 800172c:	203a      	movs	r0, #58	@ 0x3a
 800172e:	f004 f92f 	bl	8005990 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff70 	bl	800161a <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 800173a:	203a      	movs	r0, #58	@ 0x3a
 800173c:	f004 f928 	bl	8005990 <putchar>
    UnityPrint(Unity.CurrentTestName);
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <UnityTestResultsBegin+0x3c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff feef 	bl	8001528 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 800174a:	203a      	movs	r0, #58	@ 0x3a
 800174c:	f004 f920 	bl	8005990 <putchar>
#endif
#endif
#endif
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000090 	.word	0x20000090

0800175c <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <UnityTestResultsFailBegin+0x28>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffd6 	bl	800171c <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 8001770:	4805      	ldr	r0, [pc, #20]	@ (8001788 <UnityTestResultsFailBegin+0x2c>)
 8001772:	f7ff fed9 	bl	8001528 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8001776:	203a      	movs	r0, #58	@ 0x3a
 8001778:	f004 f90a 	bl	8005990 <putchar>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000090 	.word	0x20000090
 8001788:	08006984 	.word	0x08006984

0800178c <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <UnityConcludeTest+0x58>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <UnityConcludeTest+0x58>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	e014      	b.n	80017ce <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10b      	bne.n	80017c4 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017b2:	6912      	ldr	r2, [r2, #16]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffb0 	bl	800171c <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 80017bc:	480a      	ldr	r0, [pc, #40]	@ (80017e8 <UnityConcludeTest+0x5c>)
 80017be:	f7ff feb3 	bl	8001528 <UnityPrint>
 80017c2:	e004      	b.n	80017ce <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017cc:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <UnityConcludeTest+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 80017da:	200a      	movs	r0, #10
 80017dc:	f004 f8d8 	bl	8005990 <putchar>
    UNITY_FLUSH_CALL();
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000090 	.word	0x20000090
 80017e8:	0800697c 	.word	0x0800697c

080017ec <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
#ifdef UNITY_PRINT_TEST_CONTEXT
    UnityPrint(UnityStrSpacer);
    UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
    if (Unity.CurrentDetail1)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <UnityAddMsgIfSpecified+0x58>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d016      	beq.n	800182a <UnityAddMsgIfSpecified+0x3e>
    {
        UnityPrint(UnityStrSpacer);
 80017fc:	4812      	ldr	r0, [pc, #72]	@ (8001848 <UnityAddMsgIfSpecified+0x5c>)
 80017fe:	f7ff fe93 	bl	8001528 <UnityPrint>
        UnityPrint(UnityStrDetail1Name);
 8001802:	4812      	ldr	r0, [pc, #72]	@ (800184c <UnityAddMsgIfSpecified+0x60>)
 8001804:	f7ff fe90 	bl	8001528 <UnityPrint>
        UnityPrint(Unity.CurrentDetail1);
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <UnityAddMsgIfSpecified+0x58>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe8b 	bl	8001528 <UnityPrint>
        if (Unity.CurrentDetail2)
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <UnityAddMsgIfSpecified+0x58>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <UnityAddMsgIfSpecified+0x3e>
        {
            UnityPrint(UnityStrDetail2Name);
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <UnityAddMsgIfSpecified+0x64>)
 800181c:	f7ff fe84 	bl	8001528 <UnityPrint>
            UnityPrint(Unity.CurrentDetail2);
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <UnityAddMsgIfSpecified+0x58>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe7f 	bl	8001528 <UnityPrint>
        }
    }
#endif
    if (msg)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 8001830:	4805      	ldr	r0, [pc, #20]	@ (8001848 <UnityAddMsgIfSpecified+0x5c>)
 8001832:	f7ff fe79 	bl	8001528 <UnityPrint>
        UnityPrint(msg);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fe76 	bl	8001528 <UnityPrint>
    }
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000090 	.word	0x20000090
 8001848:	0800698c 	.word	0x0800698c
 800184c:	080069dc 	.word	0x080069dc
 8001850:	080069e8 	.word	0x080069e8

08001854 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <UnityAssertEqualNumber+0x70>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <UnityAssertEqualNumber+0x1e>
 800186a:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <UnityAssertEqualNumber+0x70>)
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <UnityAssertEqualNumber+0x26>
 8001872:	2101      	movs	r1, #1
 8001874:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <UnityAssertEqualNumber+0x74>)
 8001876:	f7fe fcbb 	bl	80001f0 <longjmp>

    if (expected != actual)
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	429a      	cmp	r2, r3
 8001880:	d01c      	beq.n	80018bc <UnityAssertEqualNumber+0x68>
    {
        UnityTestResultsFailBegin(lineNumber);
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	f7ff ff6a 	bl	800175c <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 8001888:	4810      	ldr	r0, [pc, #64]	@ (80018cc <UnityAssertEqualNumber+0x78>)
 800188a:	f7ff fe4d 	bl	8001528 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 800188e:	7e3b      	ldrb	r3, [r7, #24]
 8001890:	4619      	mov	r1, r3
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff fe60 	bl	8001558 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 8001898:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <UnityAssertEqualNumber+0x7c>)
 800189a:	f7ff fe45 	bl	8001528 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 800189e:	7e3b      	ldrb	r3, [r7, #24]
 80018a0:	4619      	mov	r1, r3
 80018a2:	68b8      	ldr	r0, [r7, #8]
 80018a4:	f7ff fe58 	bl	8001558 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff9f 	bl	80017ec <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <UnityAssertEqualNumber+0x70>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	621a      	str	r2, [r3, #32]
 80018b4:	2101      	movs	r1, #1
 80018b6:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <UnityAssertEqualNumber+0x74>)
 80018b8:	f7fe fc9a 	bl	80001f0 <longjmp>
    }
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000090 	.word	0x20000090
 80018c8:	200000b8 	.word	0x200000b8
 80018cc:	08006990 	.word	0x08006990
 80018d0:	0800699c 	.word	0x0800699c

080018d4 <UnityDefaultTestRun>:

/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <UnityDefaultTestRun+0x60>)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <UnityDefaultTestRun+0x60>)
 80018ea:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <UnityDefaultTestRun+0x60>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a10      	ldr	r2, [pc, #64]	@ (8001934 <UnityDefaultTestRun+0x60>)
 80018f4:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <UnityDefaultTestRun+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <UnityDefaultTestRun+0x60>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 8001902:	480d      	ldr	r0, [pc, #52]	@ (8001938 <UnityDefaultTestRun+0x64>)
 8001904:	f7fe fc6c 	bl	80001e0 <setjmp>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <UnityDefaultTestRun+0x42>
    {
        setUp();
 800190e:	f000 f9bc 	bl	8001c8a <setUp>
        Func();
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 8001916:	4808      	ldr	r0, [pc, #32]	@ (8001938 <UnityDefaultTestRun+0x64>)
 8001918:	f7fe fc62 	bl	80001e0 <setjmp>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <UnityDefaultTestRun+0x52>
    {
        tearDown();
 8001922:	f000 f9b9 	bl	8001c98 <tearDown>
    }
    UNITY_EXEC_TIME_STOP();
    UnityConcludeTest();
 8001926:	f7ff ff31 	bl	800178c <UnityConcludeTest>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000090 	.word	0x20000090
 8001938:	200000b8 	.word	0x200000b8

0800193c <UnityBegin>:
    Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8001944:	4a11      	ldr	r2, [pc, #68]	@ (800198c <UnityBegin+0x50>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <UnityBegin+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8001950:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <UnityBegin+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <UnityBegin+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <UnityBegin+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <UnityBegin+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <UnityBegin+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <UnityBegin+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

    UNITY_CLR_DETAILS();
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <UnityBegin+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <UnityBegin+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20000090 	.word	0x20000090

08001990 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 8001994:	200a      	movs	r0, #10
 8001996:	f003 fffb 	bl	8005990 <putchar>
    UnityPrint(UnityStrBreaker);
 800199a:	4819      	ldr	r0, [pc, #100]	@ (8001a00 <UnityEnd+0x70>)
 800199c:	f7ff fdc4 	bl	8001528 <UnityPrint>
    UNITY_PRINT_EOL();
 80019a0:	200a      	movs	r0, #10
 80019a2:	f003 fff5 	bl	8005990 <putchar>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 80019a6:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <UnityEnd+0x74>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe35 	bl	800161a <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 80019b0:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <UnityEnd+0x78>)
 80019b2:	f7ff fdb9 	bl	8001528 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <UnityEnd+0x74>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe2d 	bl	800161a <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 80019c0:	4812      	ldr	r0, [pc, #72]	@ (8001a0c <UnityEnd+0x7c>)
 80019c2:	f7ff fdb1 	bl	8001528 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <UnityEnd+0x74>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe25 	bl	800161a <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <UnityEnd+0x80>)
 80019d2:	f7ff fda9 	bl	8001528 <UnityPrint>
    UNITY_PRINT_EOL();
 80019d6:	200a      	movs	r0, #10
 80019d8:	f003 ffda 	bl	8005990 <putchar>
    if (Unity.TestFailures == 0U)
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <UnityEnd+0x74>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d103      	bne.n	80019ec <UnityEnd+0x5c>
    {
        UnityPrint(UnityStrOk);
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <UnityEnd+0x84>)
 80019e6:	f7ff fd9f 	bl	8001528 <UnityPrint>
 80019ea:	e002      	b.n	80019f2 <UnityEnd+0x62>
    }
    else
    {
        UnityPrint(UnityStrFail);
 80019ec:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <UnityEnd+0x88>)
 80019ee:	f7ff fd9b 	bl	8001528 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 80019f2:	200a      	movs	r0, #10
 80019f4:	f003 ffcc 	bl	8005990 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 80019f8:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <UnityEnd+0x74>)
 80019fa:	699b      	ldr	r3, [r3, #24]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	080069a4 	.word	0x080069a4
 8001a04:	20000090 	.word	0x20000090
 8001a08:	080069bc 	.word	0x080069bc
 8001a0c:	080069c4 	.word	0x080069c4
 8001a10:	080069d0 	.word	0x080069d0
 8001a14:	08006978 	.word	0x08006978
 8001a18:	08006984 	.word	0x08006984

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_MspInit+0x54>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <HAL_MspInit+0x54>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_MspInit+0x54>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_MspInit+0x54>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_MspInit+0x54>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_MspInit+0x54>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	f06f 0001 	mvn.w	r0, #1
 8001a62:	f000 fbde 	bl	8002222 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 fadb 	bl	8002068 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ab2:	f002 fe1b 	bl	80046ec <xTaskGetSchedulerState>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d001      	beq.n	8001ac0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001abc:	f003 fc14 	bl	80052e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f004 f939 	bl	8005d54 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	bf00      	nop
 8001b08:	e7fd      	b.n	8001b06 <_exit+0x12>

08001b0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e00a      	b.n	8001b32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1c:	f3af 8000 	nop.w
 8001b20:	4601      	mov	r1, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	60ba      	str	r2, [r7, #8]
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf0      	blt.n	8001b1c <_read+0x12>
  }

  return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_isatty>:

int _isatty(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f004 f8ba 	bl	8005d54 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20018000 	.word	0x20018000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	20000158 	.word	0x20000158
 8001c14:	20004c98 	.word	0x20004c98

08001c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c44:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c48:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c58:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001c5c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c64:	e000      	b.n	8001c68 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c66:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f9      	beq.n	8001c66 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c72:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <setUp>:
void test_GPIO_LED_Toggle(void);




void setUp(void) {
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
    // Setup code before each test, like resetting hardware or variables
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <tearDown>:

void tearDown(void) {
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
    // Cleanup code after each test
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <create_task>:



BaseType_t create_task(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af02      	add	r7, sp, #8
    return xTaskCreate(Task1_Handler, "Task1", 128, NULL, 1, &Task1Handle);
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <create_task+0x24>)
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2280      	movs	r2, #128	@ 0x80
 8001cba:	4905      	ldr	r1, [pc, #20]	@ (8001cd0 <create_task+0x28>)
 8001cbc:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <create_task+0x2c>)
 8001cbe:	f001 ff1d 	bl	8003afc <xTaskCreate>
 8001cc2:	4603      	mov	r3, r0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000015c 	.word	0x2000015c
 8001cd0:	080068f4 	.word	0x080068f4
 8001cd4:	08001d41 	.word	0x08001d41

08001cd8 <test_task_creation>:

void test_task_creation(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af02      	add	r7, sp, #8
    BaseType_t result = create_task();
 8001cde:	f7ff ffe3 	bl	8001ca8 <create_task>
 8001ce2:	6078      	str	r0, [r7, #4]
    TEST_ASSERT_EQUAL(pdPASS, result); // Check if task creation was successful
 8001ce4:	2314      	movs	r3, #20
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2323      	movs	r3, #35	@ 0x23
 8001cea:	2200      	movs	r2, #0
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff fdb0 	bl	8001854 <UnityAssertEqualNumber>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <main>:


int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0


  HAL_Init();
 8001d00:	f000 f960 	bl	8001fc4 <HAL_Init>
  SystemClock_Config();
 8001d04:	f000 f838 	bl	8001d78 <SystemClock_Config>
  MX_GPIO_Init();
 8001d08:	f000 f8a2 	bl	8001e50 <MX_GPIO_Init>

  UNITY_BEGIN();
 8001d0c:	4808      	ldr	r0, [pc, #32]	@ (8001d30 <main+0x34>)
 8001d0e:	f7ff fe15 	bl	800193c <UnityBegin>
  RUN_TEST(test_task_creation); // Test task creation
 8001d12:	2230      	movs	r2, #48	@ 0x30
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <main+0x38>)
 8001d16:	4808      	ldr	r0, [pc, #32]	@ (8001d38 <main+0x3c>)
 8001d18:	f7ff fddc 	bl	80018d4 <UnityDefaultTestRun>
  UNITY_END();
 8001d1c:	f7ff fe38 	bl	8001990 <UnityEnd>


  printf("Starting project\n");
 8001d20:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <main+0x40>)
 8001d22:	f003 fe93 	bl	8005a4c <puts>
  vTaskStartScheduler();
 8001d26:	f002 f87d 	bl	8003e24 <vTaskStartScheduler>


  while (1)
 8001d2a:	bf00      	nop
 8001d2c:	e7fd      	b.n	8001d2a <main+0x2e>
 8001d2e:	bf00      	nop
 8001d30:	080068fc 	.word	0x080068fc
 8001d34:	08006924 	.word	0x08006924
 8001d38:	08001cd9 	.word	0x08001cd9
 8001d3c:	08006938 	.word	0x08006938

08001d40 <Task1_Handler>:
  }

}

void Task1_Handler(void *pvParameters)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    int count =0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
        while(count < 10){
 8001d4c:	e00a      	b.n	8001d64 <Task1_Handler+0x24>
            printf("hello,world : %d\n",count++);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	60fa      	str	r2, [r7, #12]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	@ (8001d74 <Task1_Handler+0x34>)
 8001d58:	f003 fe08 	bl	800596c <iprintf>
            vTaskDelay(500);
 8001d5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d60:	f002 f82a 	bl	8003db8 <vTaskDelay>
        while(count < 10){
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b09      	cmp	r3, #9
 8001d68:	ddf1      	ble.n	8001d4e <Task1_Handler+0xe>
        }
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	0800694c 	.word	0x0800694c

08001d78 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	@ 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	2230      	movs	r2, #48	@ 0x30
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 ff40 	bl	8005c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]


  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <SystemClock_Config+0xd0>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <SystemClock_Config+0xd0>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dac:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <SystemClock_Config+0xd0>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <SystemClock_Config+0xd4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dc4:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <SystemClock_Config+0xd4>)
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <SystemClock_Config+0xd4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de0:	2310      	movs	r3, #16
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de4:	2302      	movs	r3, #2
 8001de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001dec:	2310      	movs	r3, #16
 8001dee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001df0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001df4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001df6:	2304      	movs	r3, #4
 8001df8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fbd4 	bl	80025b0 <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e0e:	f000 f8a9 	bl	8001f64 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fe36 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e3a:	f000 f893 	bl	8001f64 <Error_Handler>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3750      	adds	r7, #80	@ 0x50
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a25      	ldr	r2, [pc, #148]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <MX_GPIO_Init+0xd0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2120      	movs	r1, #32
 8001eda:	4812      	ldr	r0, [pc, #72]	@ (8001f24 <MX_GPIO_Init+0xd4>)
 8001edc:	f000 fb4e 	bl	800257c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 8001ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ee6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <MX_GPIO_Init+0xd8>)
 8001ef8:	f000 f9bc 	bl	8002274 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 8001efc:	2320      	movs	r3, #32
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <MX_GPIO_Init+0xd4>)
 8001f14:	f000 f9ae 	bl	8002274 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	@ 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020800 	.word	0x40020800

08001f2c <_write>:

int _write(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e009      	b.n	8001f52 <_write+0x26>
  {
      ITM_SendChar(*ptr++);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fe78 	bl	8001c3c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	dbf1      	blt.n	8001f3e <_write+0x12>
  }
  return len;
 8001f5a:	687b      	ldr	r3, [r7, #4]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <Error_Handler>:

void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <Error_Handler+0x8>

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f74:	f7ff fe50 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	@ (8001fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	@ (8001fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f003 fedf 	bl	8005d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7ff feab 	bl	8001cfc <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fb4:	08006b18 	.word	0x08006b18
  ldr r2, =_sbss
 8001fb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fbc:	20004c94 	.word	0x20004c94

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_Init+0x40>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_Init+0x40>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_Init+0x40>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 f90d 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff2:	200f      	movs	r0, #15
 8001ff4:	f000 f808 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff fd10 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_InitTick+0x54>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_InitTick+0x58>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f917 	bl	800225a <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002044:	f000 f8ed 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <HAL_InitTick+0x5c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000000 	.word	0x20000000
 8002060:	20000008 	.word	0x20000008
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	@ (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008
 800208c:	20000160 	.word	0x20000160

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000160 	.word	0x20000160

080020a8 <__NVIC_SetPriorityGrouping>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_SetPriority>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff47 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff5c 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffb0 	bl	80021c8 <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e159      	b.n	8002544 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 8148 	bne.w	800253e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a2 	beq.w	800253e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b57      	ldr	r3, [pc, #348]	@ (800255c <HAL_GPIO_Init+0x2e8>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a56      	ldr	r2, [pc, #344]	@ (800255c <HAL_GPIO_Init+0x2e8>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b54      	ldr	r3, [pc, #336]	@ (800255c <HAL_GPIO_Init+0x2e8>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a52      	ldr	r2, [pc, #328]	@ (8002560 <HAL_GPIO_Init+0x2ec>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a49      	ldr	r2, [pc, #292]	@ (8002564 <HAL_GPIO_Init+0x2f0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x202>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a48      	ldr	r2, [pc, #288]	@ (8002568 <HAL_GPIO_Init+0x2f4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x1fe>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a47      	ldr	r2, [pc, #284]	@ (800256c <HAL_GPIO_Init+0x2f8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x1fa>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a46      	ldr	r2, [pc, #280]	@ (8002570 <HAL_GPIO_Init+0x2fc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x1f6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a45      	ldr	r2, [pc, #276]	@ (8002574 <HAL_GPIO_Init+0x300>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x1f2>
 8002462:	2304      	movs	r3, #4
 8002464:	e008      	b.n	8002478 <HAL_GPIO_Init+0x204>
 8002466:	2307      	movs	r3, #7
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x204>
 800246a:	2303      	movs	r3, #3
 800246c:	e004      	b.n	8002478 <HAL_GPIO_Init+0x204>
 800246e:	2302      	movs	r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x204>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x204>
 8002476:	2300      	movs	r3, #0
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4093      	lsls	r3, r2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002488:	4935      	ldr	r1, [pc, #212]	@ (8002560 <HAL_GPIO_Init+0x2ec>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002496:	4b38      	ldr	r3, [pc, #224]	@ (8002578 <HAL_GPIO_Init+0x304>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002578 <HAL_GPIO_Init+0x304>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <HAL_GPIO_Init+0x304>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e4:	4a24      	ldr	r2, [pc, #144]	@ (8002578 <HAL_GPIO_Init+0x304>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ea:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <HAL_GPIO_Init+0x304>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250e:	4a1a      	ldr	r2, [pc, #104]	@ (8002578 <HAL_GPIO_Init+0x304>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002514:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <HAL_GPIO_Init+0x304>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002538:	4a0f      	ldr	r2, [pc, #60]	@ (8002578 <HAL_GPIO_Init+0x304>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	f67f aea2 	bls.w	8002290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40013800 	.word	0x40013800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e267      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d075      	beq.n	80026ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ce:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d00c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b85      	ldr	r3, [pc, #532]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d112      	bne.n	800260c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e6:	4b82      	ldr	r3, [pc, #520]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f2:	d10b      	bne.n	800260c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	4b7e      	ldr	r3, [pc, #504]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05b      	beq.n	80026b8 <HAL_RCC_OscConfig+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d157      	bne.n	80026b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e242      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x74>
 8002616:	4b76      	ldr	r3, [pc, #472]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a75      	ldr	r2, [pc, #468]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e01d      	b.n	8002660 <HAL_RCC_OscConfig+0xb0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x98>
 800262e:	4b70      	ldr	r3, [pc, #448]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6f      	ldr	r2, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6d      	ldr	r3, [pc, #436]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6c      	ldr	r2, [pc, #432]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0xb0>
 8002648:	4b69      	ldr	r3, [pc, #420]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a68      	ldr	r2, [pc, #416]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b66      	ldr	r3, [pc, #408]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a65      	ldr	r2, [pc, #404]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fd12 	bl	8002090 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fd0e 	bl	8002090 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e207      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b5b      	ldr	r3, [pc, #364]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0xc0>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fcfe 	bl	8002090 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff fcfa 	bl	8002090 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1f3      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	4b51      	ldr	r3, [pc, #324]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0xe8>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d063      	beq.n	800278e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026c6:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b44      	ldr	r3, [pc, #272]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x152>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1c7      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4937      	ldr	r1, [pc, #220]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	e03a      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7ff fcb3 	bl	8002090 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7ff fcaf 	bl	8002090 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1a8      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4925      	ldr	r1, [pc, #148]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x244>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff fc92 	bl	8002090 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7ff fc8e 	bl	8002090 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e187      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d036      	beq.n	8002808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_RCC_OscConfig+0x248>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff fc72 	bl	8002090 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7ff fc6e 	bl	8002090 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e167      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x200>
 80027ce:	e01b      	b.n	8002808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_OscConfig+0x248>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7ff fc5b 	bl	8002090 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	e00e      	b.n	80027fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027de:	f7ff fc57 	bl	8002090 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d907      	bls.n	80027fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e150      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470000 	.word	0x42470000
 80027f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b88      	ldr	r3, [pc, #544]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ea      	bne.n	80027de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8097 	beq.w	8002944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b81      	ldr	r3, [pc, #516]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b7a      	ldr	r3, [pc, #488]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b77      	ldr	r3, [pc, #476]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d118      	bne.n	8002884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002852:	4b74      	ldr	r3, [pc, #464]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a73      	ldr	r2, [pc, #460]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7ff fc17 	bl	8002090 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7ff fc13 	bl	8002090 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e10c      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	4b6a      	ldr	r3, [pc, #424]	@ (8002a24 <HAL_RCC_OscConfig+0x474>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x2ea>
 800288c:	4b64      	ldr	r3, [pc, #400]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a63      	ldr	r2, [pc, #396]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
 8002898:	e01c      	b.n	80028d4 <HAL_RCC_OscConfig+0x324>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x30c>
 80028a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0x324>
 80028bc:	4b58      	ldr	r3, [pc, #352]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c8:	4b55      	ldr	r3, [pc, #340]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a54      	ldr	r2, [pc, #336]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7ff fbd8 	bl	8002090 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7ff fbd4 	bl	8002090 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0cb      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	4b49      	ldr	r3, [pc, #292]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ee      	beq.n	80028e4 <HAL_RCC_OscConfig+0x334>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7ff fbc2 	bl	8002090 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7ff fbbe 	bl	8002090 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0b5      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	4b3e      	ldr	r3, [pc, #248]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ee      	bne.n	8002910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	4a38      	ldr	r2, [pc, #224]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a1 	beq.w	8002a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294e:	4b34      	ldr	r3, [pc, #208]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d05c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d141      	bne.n	80029e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_RCC_OscConfig+0x478>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7ff fb92 	bl	8002090 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff fb8e 	bl	8002090 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e087      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b27      	ldr	r3, [pc, #156]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	491b      	ldr	r1, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_RCC_OscConfig+0x478>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7ff fb67 	bl	8002090 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7ff fb63 	bl	8002090 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e05c      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x416>
 80029e4:	e054      	b.n	8002a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_RCC_OscConfig+0x478>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff fb50 	bl	8002090 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff fb4c 	bl	8002090 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e045      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_OscConfig+0x470>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x444>
 8002a12:	e03d      	b.n	8002a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e038      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_RCC_OscConfig+0x4ec>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d028      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d121      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	3b01      	subs	r3, #1
 8002a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cc      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b68      	ldr	r3, [pc, #416]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d90c      	bls.n	8002adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b65      	ldr	r3, [pc, #404]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a58      	ldr	r2, [pc, #352]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a52      	ldr	r2, [pc, #328]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d044      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e067      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4934      	ldr	r1, [pc, #208]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7ff fa7e 	bl	8002090 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7ff fa7a 	bl	8002090 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d20c      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b22      	ldr	r3, [pc, #136]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 f821 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490a      	ldr	r1, [pc, #40]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f9de 	bl	8002008 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	080069f4 	.word	0x080069f4
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c70:	b094      	sub	sp, #80	@ 0x50
 8002c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c84:	4b79      	ldr	r3, [pc, #484]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d00d      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x40>
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	f200 80e1 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9e:	e0db      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b73      	ldr	r3, [pc, #460]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca4:	e0db      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca6:	4b73      	ldr	r3, [pc, #460]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002caa:	e0d8      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cac:	4b6f      	ldr	r3, [pc, #444]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	2200      	movs	r2, #0
 8002cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cde:	4622      	mov	r2, r4
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	0159      	lsls	r1, r3, #5
 8002cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf0:	0150      	lsls	r0, r2, #5
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	1a51      	subs	r1, r2, r1
 8002cfa:	6139      	str	r1, [r7, #16]
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d10:	4659      	mov	r1, fp
 8002d12:	018b      	lsls	r3, r1, #6
 8002d14:	4651      	mov	r1, sl
 8002d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	018a      	lsls	r2, r1, #6
 8002d1e:	4651      	mov	r1, sl
 8002d20:	ebb2 0801 	subs.w	r8, r2, r1
 8002d24:	4659      	mov	r1, fp
 8002d26:	eb63 0901 	sbc.w	r9, r3, r1
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	eb18 0303 	adds.w	r3, r8, r3
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	462b      	mov	r3, r5
 8002d4c:	eb49 0303 	adc.w	r3, r9, r3
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	024b      	lsls	r3, r1, #9
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d68:	4621      	mov	r1, r4
 8002d6a:	024a      	lsls	r2, r1, #9
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d72:	2200      	movs	r2, #0
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d7c:	f7fd fa98 	bl	80002b0 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d88:	e058      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b38      	ldr	r3, [pc, #224]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	4611      	mov	r1, r2
 8002d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	f04f 0000 	mov.w	r0, #0
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	0159      	lsls	r1, r3, #5
 8002db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db6:	0150      	lsls	r0, r2, #5
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8002de0:	eb63 050b 	sbc.w	r5, r3, fp
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	00eb      	lsls	r3, r5, #3
 8002dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df2:	00e2      	lsls	r2, r4, #3
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	18e3      	adds	r3, r4, r3
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	464b      	mov	r3, r9
 8002e00:	eb45 0303 	adc.w	r3, r5, r3
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e26:	2200      	movs	r2, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	61fa      	str	r2, [r7, #28]
 8002e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e30:	f7fd fa3e 	bl	80002b0 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3750      	adds	r7, #80	@ 0x50
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ea8 <vApplicationGetIdleTaskMemory+0x30>)
 8002e8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000164 	.word	0x20000164
 8002ea8:	2000020c 	.word	0x2000020c

08002eac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a07      	ldr	r2, [pc, #28]	@ (8002ed8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ebc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <vApplicationGetTimerTaskMemory+0x30>)
 8002ec2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	2000040c 	.word	0x2000040c
 8002edc:	200004b4 	.word	0x200004b4

08002ee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 0208 	add.w	r2, r3, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ef8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f103 0208 	add.w	r2, r3, #8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f103 0208 	add.w	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f98:	d103      	bne.n	8002fa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e00c      	b.n	8002fbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e002      	b.n	8002fb0 <vListInsert+0x2e>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d2f6      	bcs.n	8002faa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	601a      	str	r2, [r3, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6852      	ldr	r2, [r2, #4]
 8003014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d103      	bne.n	8003028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1e5a      	subs	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003074:	f002 f8a8 	bl	80051c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	441a      	add	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	3b01      	subs	r3, #1
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	22ff      	movs	r2, #255	@ 0xff
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	22ff      	movs	r2, #255	@ 0xff
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d114      	bne.n	80030f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01a      	beq.n	8003108 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3310      	adds	r3, #16
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f942 	bl	8004360 <xTaskRemoveFromEventList>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <xQueueGenericReset+0xd0>)
 80030e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	e009      	b.n	8003108 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3310      	adds	r3, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fef1 	bl	8002ee0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3324      	adds	r3, #36	@ 0x24
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff feec 	bl	8002ee0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003108:	f002 f890 	bl	800522c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	@ 0x38
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	e7fd      	b.n	8003144 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	e7fd      	b.n	8003162 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <xQueueGenericCreateStatic+0x56>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <xQueueGenericCreateStatic+0x5a>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <xQueueGenericCreateStatic+0x5c>
 8003176:	2300      	movs	r3, #0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	623b      	str	r3, [r7, #32]
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <xQueueGenericCreateStatic+0x84>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <xQueueGenericCreateStatic+0x88>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <xQueueGenericCreateStatic+0x8a>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	61fb      	str	r3, [r7, #28]
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	e7fd      	b.n	80031be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031c2:	2350      	movs	r3, #80	@ 0x50
 80031c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b50      	cmp	r3, #80	@ 0x50
 80031ca:	d00b      	beq.n	80031e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	61bb      	str	r3, [r7, #24]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80031ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f805 	bl	8003216 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800320e:	4618      	mov	r0, r3
 8003210:	3730      	adds	r7, #48	@ 0x30
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e002      	b.n	8003238 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003244:	2101      	movs	r1, #1
 8003246:	69b8      	ldr	r0, [r7, #24]
 8003248:	f7ff fefe 	bl	8003048 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	@ 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <xQueueGenericSend+0x34>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <xQueueGenericSend+0x42>
 8003296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <xQueueGenericSend+0x46>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <xQueueGenericSend+0x48>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <xQueueGenericSend+0x64>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d103      	bne.n	80032ce <xQueueGenericSend+0x72>
 80032c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <xQueueGenericSend+0x76>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueGenericSend+0x78>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <xQueueGenericSend+0x94>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	623b      	str	r3, [r7, #32]
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032f0:	f001 f9fc 	bl	80046ec <xTaskGetSchedulerState>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <xQueueGenericSend+0xa4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <xQueueGenericSend+0xa8>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <xQueueGenericSend+0xaa>
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <xQueueGenericSend+0xc6>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	61fb      	str	r3, [r7, #28]
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	e7fd      	b.n	800331e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003322:	f001 ff51 	bl	80051c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <xQueueGenericSend+0xdc>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d129      	bne.n	800338c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800333e:	f000 fa0f 	bl	8003760 <prvCopyDataToQueue>
 8003342:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	3324      	adds	r3, #36	@ 0x24
 8003350:	4618      	mov	r0, r3
 8003352:	f001 f805 	bl	8004360 <xTaskRemoveFromEventList>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800335c:	4b3f      	ldr	r3, [pc, #252]	@ (800345c <xQueueGenericSend+0x200>)
 800335e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	e00a      	b.n	8003384 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003374:	4b39      	ldr	r3, [pc, #228]	@ (800345c <xQueueGenericSend+0x200>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003384:	f001 ff52 	bl	800522c <vPortExitCritical>
				return pdPASS;
 8003388:	2301      	movs	r3, #1
 800338a:	e063      	b.n	8003454 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003392:	f001 ff4b 	bl	800522c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003396:	2300      	movs	r3, #0
 8003398:	e05c      	b.n	8003454 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d106      	bne.n	80033ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 f83f 	bl	8004428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033aa:	2301      	movs	r3, #1
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ae:	f001 ff3d 	bl	800522c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033b2:	f000 fda7 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033b6:	f001 ff07 	bl	80051c8 <vPortEnterCritical>
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c6:	d103      	bne.n	80033d0 <xQueueGenericSend+0x174>
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033dc:	d103      	bne.n	80033e6 <xQueueGenericSend+0x18a>
 80033de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033e6:	f001 ff21 	bl	800522c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ea:	1d3a      	adds	r2, r7, #4
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 f82e 	bl	8004454 <xTaskCheckForTimeOut>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d124      	bne.n	8003448 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003400:	f000 faa6 	bl	8003950 <prvIsQueueFull>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d018      	beq.n	800343c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	3310      	adds	r3, #16
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ff52 	bl	80042bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800341a:	f000 fa31 	bl	8003880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800341e:	f000 fd7f 	bl	8003f20 <xTaskResumeAll>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f af7c 	bne.w	8003322 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <xQueueGenericSend+0x200>)
 800342c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	e772      	b.n	8003322 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800343c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800343e:	f000 fa1f 	bl	8003880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003442:	f000 fd6d 	bl	8003f20 <xTaskResumeAll>
 8003446:	e76c      	b.n	8003322 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800344a:	f000 fa19 	bl	8003880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800344e:	f000 fd67 	bl	8003f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003454:	4618      	mov	r0, r3
 8003456:	3738      	adds	r7, #56	@ 0x38
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b090      	sub	sp, #64	@ 0x40
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <xQueueGenericSendFromISR+0x3e>
 8003496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <xQueueGenericSendFromISR+0x42>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <xQueueGenericSendFromISR+0x44>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d103      	bne.n	80034ce <xQueueGenericSendFromISR+0x6e>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <xQueueGenericSendFromISR+0x72>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueGenericSendFromISR+0x74>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	623b      	str	r3, [r7, #32]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034f0:	f001 ff4a 	bl	8005388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034f4:	f3ef 8211 	mrs	r2, BASEPRI
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61fa      	str	r2, [r7, #28]
 800350a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800350c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <xQueueGenericSendFromISR+0xc2>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d12f      	bne.n	8003582 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003528:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003538:	f000 f912 	bl	8003760 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800353c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003544:	d112      	bne.n	800356c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d016      	beq.n	800357c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	3324      	adds	r3, #36	@ 0x24
 8003552:	4618      	mov	r0, r3
 8003554:	f000 ff04 	bl	8004360 <xTaskRemoveFromEventList>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e007      	b.n	800357c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800356c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003570:	3301      	adds	r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	b25a      	sxtb	r2, r3
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800357c:	2301      	movs	r3, #1
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003580:	e001      	b.n	8003586 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003582:	2300      	movs	r3, #0
 8003584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003588:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003594:	4618      	mov	r0, r3
 8003596:	3740      	adds	r7, #64	@ 0x40
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	@ 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <xQueueReceive+0x32>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	623b      	str	r3, [r7, #32]
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <xQueueReceive+0x40>
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <xQueueReceive+0x44>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <xQueueReceive+0x46>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <xQueueReceive+0x62>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	61fb      	str	r3, [r7, #28]
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035fe:	f001 f875 	bl	80046ec <xTaskGetSchedulerState>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <xQueueReceive+0x72>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <xQueueReceive+0x76>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueReceive+0x78>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <xQueueReceive+0x94>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	61bb      	str	r3, [r7, #24]
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003630:	f001 fdca 	bl	80051c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01f      	beq.n	8003680 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003644:	f000 f8f6 	bl	8003834 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	1e5a      	subs	r2, r3, #1
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00f      	beq.n	8003678 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	3310      	adds	r3, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fe7f 	bl	8004360 <xTaskRemoveFromEventList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003668:	4b3c      	ldr	r3, [pc, #240]	@ (800375c <xQueueReceive+0x1c0>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003678:	f001 fdd8 	bl	800522c <vPortExitCritical>
				return pdPASS;
 800367c:	2301      	movs	r3, #1
 800367e:	e069      	b.n	8003754 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003686:	f001 fdd1 	bl	800522c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800368a:	2300      	movs	r3, #0
 800368c:	e062      	b.n	8003754 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fec5 	bl	8004428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800369e:	2301      	movs	r3, #1
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a2:	f001 fdc3 	bl	800522c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036a6:	f000 fc2d 	bl	8003f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036aa:	f001 fd8d 	bl	80051c8 <vPortEnterCritical>
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ba:	d103      	bne.n	80036c4 <xQueueReceive+0x128>
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036d0:	d103      	bne.n	80036da <xQueueReceive+0x13e>
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036da:	f001 fda7 	bl	800522c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036de:	1d3a      	adds	r2, r7, #4
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 feb4 	bl	8004454 <xTaskCheckForTimeOut>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d123      	bne.n	800373a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f4:	f000 f916 	bl	8003924 <prvIsQueueEmpty>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	3324      	adds	r3, #36	@ 0x24
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fdd8 	bl	80042bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800370c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800370e:	f000 f8b7 	bl	8003880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003712:	f000 fc05 	bl	8003f20 <xTaskResumeAll>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d189      	bne.n	8003630 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800371c:	4b0f      	ldr	r3, [pc, #60]	@ (800375c <xQueueReceive+0x1c0>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	e780      	b.n	8003630 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800372e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003730:	f000 f8a6 	bl	8003880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003734:	f000 fbf4 	bl	8003f20 <xTaskResumeAll>
 8003738:	e77a      	b.n	8003630 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800373a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800373c:	f000 f8a0 	bl	8003880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003740:	f000 fbee 	bl	8003f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003746:	f000 f8ed 	bl	8003924 <prvIsQueueEmpty>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	f43f af6f 	beq.w	8003630 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003754:	4618      	mov	r0, r3
 8003756:	3730      	adds	r7, #48	@ 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d14d      	bne.n	8003822 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 ffcc 	bl	8004728 <xTaskPriorityDisinherit>
 8003790:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e043      	b.n	8003822 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d119      	bne.n	80037d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6858      	ldr	r0, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	461a      	mov	r2, r3
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	f002 faff 	bl	8005dae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	441a      	add	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d32b      	bcc.n	8003822 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	e026      	b.n	8003822 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68d8      	ldr	r0, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	461a      	mov	r2, r3
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	f002 fae5 	bl	8005dae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	425b      	negs	r3, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d207      	bcs.n	8003810 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	425b      	negs	r3, r3
 800380a:	441a      	add	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d105      	bne.n	8003822 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3b01      	subs	r3, #1
 8003820:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800382a:	697b      	ldr	r3, [r7, #20]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	441a      	add	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d303      	bcc.n	8003868 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68d9      	ldr	r1, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	461a      	mov	r2, r3
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f002 fa9b 	bl	8005dae <memcpy>
	}
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003888:	f001 fc9e 	bl	80051c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003894:	e011      	b.n	80038ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d012      	beq.n	80038c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3324      	adds	r3, #36	@ 0x24
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd5c 	bl	8004360 <xTaskRemoveFromEventList>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038ae:	f000 fe35 	bl	800451c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	dce9      	bgt.n	8003896 <prvUnlockQueue+0x16>
 80038c2:	e000      	b.n	80038c6 <prvUnlockQueue+0x46>
					break;
 80038c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	22ff      	movs	r2, #255	@ 0xff
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80038ce:	f001 fcad 	bl	800522c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038d2:	f001 fc79 	bl	80051c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038de:	e011      	b.n	8003904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3310      	adds	r3, #16
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fd37 	bl	8004360 <xTaskRemoveFromEventList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038f8:	f000 fe10 	bl	800451c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003908:	2b00      	cmp	r3, #0
 800390a:	dce9      	bgt.n	80038e0 <prvUnlockQueue+0x60>
 800390c:	e000      	b.n	8003910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800390e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	22ff      	movs	r2, #255	@ 0xff
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003918:	f001 fc88 	bl	800522c <vPortExitCritical>
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800392c:	f001 fc4c 	bl	80051c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e001      	b.n	8003942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003942:	f001 fc73 	bl	800522c <vPortExitCritical>

	return xReturn;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003958:	f001 fc36 	bl	80051c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	429a      	cmp	r2, r3
 8003966:	d102      	bne.n	800396e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e001      	b.n	8003972 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003972:	f001 fc5b 	bl	800522c <vPortExitCritical>

	return xReturn;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e014      	b.n	80039ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003990:	4a0f      	ldr	r2, [pc, #60]	@ (80039d0 <vQueueAddToRegistry+0x50>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800399c:	490c      	ldr	r1, [pc, #48]	@ (80039d0 <vQueueAddToRegistry+0x50>)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <vQueueAddToRegistry+0x50>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039b2:	e006      	b.n	80039c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b07      	cmp	r3, #7
 80039be:	d9e7      	bls.n	8003990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	200008b4 	.word	0x200008b4

080039d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039e4:	f001 fbf0 	bl	80051c8 <vPortEnterCritical>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039f4:	d103      	bne.n	80039fe <vQueueWaitForMessageRestricted+0x2a>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a04:	b25b      	sxtb	r3, r3
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a0a:	d103      	bne.n	8003a14 <vQueueWaitForMessageRestricted+0x40>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a14:	f001 fc0a 	bl	800522c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	3324      	adds	r3, #36	@ 0x24
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fc6d 	bl	8004308 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a2e:	6978      	ldr	r0, [r7, #20]
 8003a30:	f7ff ff26 	bl	8003880 <prvUnlockQueue>
	}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	@ 0x38
 8003a40:	af04      	add	r7, sp, #16
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	623b      	str	r3, [r7, #32]
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fb      	str	r3, [r7, #28]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a86:	23a8      	movs	r3, #168	@ 0xa8
 8003a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a8e:	d00b      	beq.n	8003aa8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	61bb      	str	r3, [r7, #24]
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003aa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01e      	beq.n	8003aee <xTaskCreateStatic+0xb2>
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01b      	beq.n	8003aee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9303      	str	r3, [sp, #12]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	9302      	str	r3, [sp, #8]
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f851 	bl	8003b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ae8:	f000 f8f6 	bl	8003cd8 <prvAddNewTaskToReadyList>
 8003aec:	e001      	b.n	8003af2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003af2:	697b      	ldr	r3, [r7, #20]
	}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	@ 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	@ 0x30
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fc7b 	bl	800540c <pvPortMalloc>
 8003b16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1e:	20a8      	movs	r0, #168	@ 0xa8
 8003b20:	f001 fc74 	bl	800540c <pvPortMalloc>
 8003b24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b32:	e005      	b.n	8003b40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f001 fd37 	bl	80055a8 <vPortFree>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9303      	str	r3, [sp, #12]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	9302      	str	r3, [sp, #8]
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f80f 	bl	8003b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b6a:	69f8      	ldr	r0, [r7, #28]
 8003b6c:	f000 f8b4 	bl	8003cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e002      	b.n	8003b7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	21a5      	movs	r1, #165	@ 0xa5
 8003ba2:	f002 f833 	bl	8005c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f023 0307 	bic.w	r3, r3, #7
 8003bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	617b      	str	r3, [r7, #20]
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	e7fd      	b.n	8003bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e012      	b.n	8003c14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	7819      	ldrb	r1, [r3, #0]
 8003bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3334      	adds	r3, #52	@ 0x34
 8003bfe:	460a      	mov	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d9e9      	bls.n	8003bee <prvInitialiseNewTask+0x66>
 8003c1a:	e000      	b.n	8003c1e <prvInitialiseNewTask+0x96>
			{
				break;
 8003c1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c26:	e003      	b.n	8003c30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	2b37      	cmp	r3, #55	@ 0x37
 8003c34:	d901      	bls.n	8003c3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c36:	2337      	movs	r3, #55	@ 0x37
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c48:	2200      	movs	r2, #0
 8003c4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff f965 	bl	8002f20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	3318      	adds	r3, #24
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff f960 	bl	8002f20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	3354      	adds	r3, #84	@ 0x54
 8003c8a:	224c      	movs	r2, #76	@ 0x4c
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 ffbc 	bl	8005c0c <memset>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <prvInitialiseNewTask+0x144>)
 8003c98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd0 <prvInitialiseNewTask+0x148>)
 8003c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <prvInitialiseNewTask+0x14c>)
 8003ca4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f001 f95a 	bl	8004f64 <pxPortInitialiseStack>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cc2:	bf00      	nop
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20004b48 	.word	0x20004b48
 8003cd0:	20004bb0 	.word	0x20004bb0
 8003cd4:	20004c18 	.word	0x20004c18

08003cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ce0:	f001 fa72 	bl	80051c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a2c      	ldr	r2, [pc, #176]	@ (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cee:	4b2c      	ldr	r3, [pc, #176]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <prvAddNewTaskToReadyList+0xc4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d110      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d04:	f000 fc2e 	bl	8004564 <prvInitialiseTaskLists>
 8003d08:	e00d      	b.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d0a:	4b26      	ldr	r3, [pc, #152]	@ (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d12:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d802      	bhi.n	8003d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d20:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d26:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <prvAddNewTaskToReadyList+0xd0>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <prvAddNewTaskToReadyList+0xd4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d903      	bls.n	8003d4c <prvAddNewTaskToReadyList+0x74>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <prvAddNewTaskToReadyList+0xd4>)
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4a15      	ldr	r2, [pc, #84]	@ (8003db0 <prvAddNewTaskToReadyList+0xd8>)
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7ff f8e9 	bl	8002f3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d68:	f001 fa60 	bl	800522c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <prvAddNewTaskToReadyList+0xcc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d74:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <prvAddNewTaskToReadyList+0xc8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d207      	bcs.n	8003d92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d82:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <prvAddNewTaskToReadyList+0xdc>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000dc8 	.word	0x20000dc8
 8003da0:	200008f4 	.word	0x200008f4
 8003da4:	20000dd4 	.word	0x20000dd4
 8003da8:	20000de4 	.word	0x20000de4
 8003dac:	20000dd0 	.word	0x20000dd0
 8003db0:	200008f8 	.word	0x200008f8
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dca:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <vTaskDelay+0x64>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <vTaskDelay+0x32>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60bb      	str	r3, [r7, #8]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dea:	f000 f88b 	bl	8003f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dee:	2100      	movs	r1, #0
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fd09 	bl	8004808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003df6:	f000 f893 	bl	8003f20 <xTaskResumeAll>
 8003dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <vTaskDelay+0x68>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000df0 	.word	0x20000df0
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	@ 0x28
 8003e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e32:	463a      	mov	r2, r7
 8003e34:	1d39      	adds	r1, r7, #4
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f81c 	bl	8002e78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e40:	6839      	ldr	r1, [r7, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	460a      	mov	r2, r1
 8003e52:	4924      	ldr	r1, [pc, #144]	@ (8003ee4 <vTaskStartScheduler+0xc0>)
 8003e54:	4824      	ldr	r0, [pc, #144]	@ (8003ee8 <vTaskStartScheduler+0xc4>)
 8003e56:	f7ff fdf1 	bl	8003a3c <xTaskCreateStatic>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <vTaskStartScheduler+0xc8>)
 8003e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e60:	4b22      	ldr	r3, [pc, #136]	@ (8003eec <vTaskStartScheduler+0xc8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e001      	b.n	8003e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d102      	bne.n	8003e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e78:	f000 fd1a 	bl	80048b0 <xTimerCreateTimerTask>
 8003e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d11b      	bne.n	8003ebc <vTaskStartScheduler+0x98>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	613b      	str	r3, [r7, #16]
}
 8003e96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <vTaskStartScheduler+0xcc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3354      	adds	r3, #84	@ 0x54
 8003e9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <vTaskStartScheduler+0xd0>)
 8003ea0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <vTaskStartScheduler+0xd4>)
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003eaa:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <vTaskStartScheduler+0xd8>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <vTaskStartScheduler+0xdc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003eb6:	f001 f8e3 	bl	8005080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003eba:	e00f      	b.n	8003edc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ec2:	d10b      	bne.n	8003edc <vTaskStartScheduler+0xb8>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <vTaskStartScheduler+0xb4>
}
 8003edc:	bf00      	nop
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08006960 	.word	0x08006960
 8003ee8:	08004535 	.word	0x08004535
 8003eec:	20000dec 	.word	0x20000dec
 8003ef0:	200008f4 	.word	0x200008f4
 8003ef4:	2000001c 	.word	0x2000001c
 8003ef8:	20000de8 	.word	0x20000de8
 8003efc:	20000dd4 	.word	0x20000dd4
 8003f00:	20000dcc 	.word	0x20000dcc

08003f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <vTaskSuspendAll+0x18>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a03      	ldr	r2, [pc, #12]	@ (8003f1c <vTaskSuspendAll+0x18>)
 8003f10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	20000df0 	.word	0x20000df0

08003f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f2e:	4b42      	ldr	r3, [pc, #264]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <xTaskResumeAll+0x2e>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	603b      	str	r3, [r7, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	e7fd      	b.n	8003f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f4e:	f001 f93b 	bl	80051c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	4a37      	ldr	r2, [pc, #220]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5c:	4b36      	ldr	r3, [pc, #216]	@ (8004038 <xTaskResumeAll+0x118>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d162      	bne.n	800402a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f64:	4b35      	ldr	r3, [pc, #212]	@ (800403c <xTaskResumeAll+0x11c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05e      	beq.n	800402a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6c:	e02f      	b.n	8003fce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6e:	4b34      	ldr	r3, [pc, #208]	@ (8004040 <xTaskResumeAll+0x120>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3318      	adds	r3, #24
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f83a 	bl	8002ff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff f835 	bl	8002ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004044 <xTaskResumeAll+0x124>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d903      	bls.n	8003f9e <xTaskResumeAll+0x7e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <xTaskResumeAll+0x124>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a27      	ldr	r2, [pc, #156]	@ (8004048 <xTaskResumeAll+0x128>)
 8003fac:	441a      	add	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe ffc0 	bl	8002f3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbe:	4b23      	ldr	r3, [pc, #140]	@ (800404c <xTaskResumeAll+0x12c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003fc8:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <xTaskResumeAll+0x130>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fce:	4b1c      	ldr	r3, [pc, #112]	@ (8004040 <xTaskResumeAll+0x120>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1cb      	bne.n	8003f6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fdc:	f000 fb66 	bl	80046ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <xTaskResumeAll+0x134>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fec:	f000 f846 	bl	800407c <xTaskIncrementTick>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <xTaskResumeAll+0x130>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f1      	bne.n	8003fec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004008:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <xTaskResumeAll+0x134>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800400e:	4b10      	ldr	r3, [pc, #64]	@ (8004050 <xTaskResumeAll+0x130>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800401a:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <xTaskResumeAll+0x138>)
 800401c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800402a:	f001 f8ff 	bl	800522c <vPortExitCritical>

	return xAlreadyYielded;
 800402e:	68bb      	ldr	r3, [r7, #8]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000df0 	.word	0x20000df0
 800403c:	20000dc8 	.word	0x20000dc8
 8004040:	20000d88 	.word	0x20000d88
 8004044:	20000dd0 	.word	0x20000dd0
 8004048:	200008f8 	.word	0x200008f8
 800404c:	200008f4 	.word	0x200008f4
 8004050:	20000ddc 	.word	0x20000ddc
 8004054:	20000dd8 	.word	0x20000dd8
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004062:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <xTaskGetTickCount+0x1c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004068:	687b      	ldr	r3, [r7, #4]
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000dcc 	.word	0x20000dcc

0800407c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <xTaskIncrementTick+0x148>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 8090 	bne.w	80041b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004090:	4b4d      	ldr	r3, [pc, #308]	@ (80041c8 <xTaskIncrementTick+0x14c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004098:	4a4b      	ldr	r2, [pc, #300]	@ (80041c8 <xTaskIncrementTick+0x14c>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d121      	bne.n	80040e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040a4:	4b49      	ldr	r3, [pc, #292]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <xTaskIncrementTick+0x46>
 80040c6:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <xTaskIncrementTick+0x154>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3e      	ldr	r2, [pc, #248]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4a3e      	ldr	r2, [pc, #248]	@ (80041d0 <xTaskIncrementTick+0x154>)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b3e      	ldr	r3, [pc, #248]	@ (80041d4 <xTaskIncrementTick+0x158>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a3c      	ldr	r2, [pc, #240]	@ (80041d4 <xTaskIncrementTick+0x158>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	f000 fae2 	bl	80046ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d349      	bcc.n	8004186 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <xTaskIncrementTick+0x150>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004102:	601a      	str	r2, [r3, #0]
					break;
 8004104:	e03f      	b.n	8004186 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004106:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <xTaskIncrementTick+0x150>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d203      	bcs.n	8004126 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800411e:	4a2e      	ldr	r2, [pc, #184]	@ (80041d8 <xTaskIncrementTick+0x15c>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004124:	e02f      	b.n	8004186 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe ff62 	bl	8002ff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe ff59 	bl	8002ff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004146:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <xTaskIncrementTick+0x160>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d903      	bls.n	8004156 <xTaskIncrementTick+0xda>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a22      	ldr	r2, [pc, #136]	@ (80041dc <xTaskIncrementTick+0x160>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <xTaskIncrementTick+0x164>)
 8004164:	441a      	add	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f7fe fee4 	bl	8002f3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <xTaskIncrementTick+0x168>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	429a      	cmp	r2, r3
 800417e:	d3b8      	bcc.n	80040f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004184:	e7b5      	b.n	80040f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004186:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <xTaskIncrementTick+0x168>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	4914      	ldr	r1, [pc, #80]	@ (80041e0 <xTaskIncrementTick+0x164>)
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d901      	bls.n	80041a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <xTaskIncrementTick+0x16c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e004      	b.n	80041ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041b0:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <xTaskIncrementTick+0x170>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <xTaskIncrementTick+0x170>)
 80041b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041ba:	697b      	ldr	r3, [r7, #20]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000df0 	.word	0x20000df0
 80041c8:	20000dcc 	.word	0x20000dcc
 80041cc:	20000d80 	.word	0x20000d80
 80041d0:	20000d84 	.word	0x20000d84
 80041d4:	20000de0 	.word	0x20000de0
 80041d8:	20000de8 	.word	0x20000de8
 80041dc:	20000dd0 	.word	0x20000dd0
 80041e0:	200008f8 	.word	0x200008f8
 80041e4:	200008f4 	.word	0x200008f4
 80041e8:	20000ddc 	.word	0x20000ddc
 80041ec:	20000dd8 	.word	0x20000dd8

080041f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f6:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <vTaskSwitchContext+0xb4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041fe:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <vTaskSwitchContext+0xb8>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004204:	e047      	b.n	8004296 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004206:	4b28      	ldr	r3, [pc, #160]	@ (80042a8 <vTaskSwitchContext+0xb8>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <vTaskSwitchContext+0xbc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e011      	b.n	8004238 <vTaskSwitchContext+0x48>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <vTaskSwitchContext+0x42>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	607b      	str	r3, [r7, #4]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <vTaskSwitchContext+0x3e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b01      	subs	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	491d      	ldr	r1, [pc, #116]	@ (80042b0 <vTaskSwitchContext+0xc0>)
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0e3      	beq.n	8004214 <vTaskSwitchContext+0x24>
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4a16      	ldr	r2, [pc, #88]	@ (80042b0 <vTaskSwitchContext+0xc0>)
 8004258:	4413      	add	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3308      	adds	r3, #8
 800426e:	429a      	cmp	r2, r3
 8004270:	d104      	bne.n	800427c <vTaskSwitchContext+0x8c>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <vTaskSwitchContext+0xc4>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <vTaskSwitchContext+0xbc>)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800428c:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <vTaskSwitchContext+0xc4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3354      	adds	r3, #84	@ 0x54
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <vTaskSwitchContext+0xc8>)
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000df0 	.word	0x20000df0
 80042a8:	20000ddc 	.word	0x20000ddc
 80042ac:	20000dd0 	.word	0x20000dd0
 80042b0:	200008f8 	.word	0x200008f8
 80042b4:	200008f4 	.word	0x200008f4
 80042b8:	2000001c 	.word	0x2000001c

080042bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60fb      	str	r3, [r7, #12]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e4:	4b07      	ldr	r3, [pc, #28]	@ (8004304 <vTaskPlaceOnEventList+0x48>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3318      	adds	r3, #24
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fe fe48 	bl	8002f82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042f2:	2101      	movs	r1, #1
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f000 fa87 	bl	8004808 <prvAddCurrentTaskToDelayedList>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200008f4 	.word	0x200008f4

08004308 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	617b      	str	r3, [r7, #20]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <vTaskPlaceOnEventListRestricted+0x54>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3318      	adds	r3, #24
 8004338:	4619      	mov	r1, r3
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7fe fdfd 	bl	8002f3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800434a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68b8      	ldr	r0, [r7, #8]
 8004350:	f000 fa5a 	bl	8004808 <prvAddCurrentTaskToDelayedList>
	}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200008f4 	.word	0x200008f4

08004360 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60fb      	str	r3, [r7, #12]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3318      	adds	r3, #24
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe fe2e 	bl	8002ff4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004398:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <xTaskRemoveFromEventList+0xb0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11d      	bne.n	80043dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fe25 	bl	8002ff4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <xTaskRemoveFromEventList+0xb4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d903      	bls.n	80043be <xTaskRemoveFromEventList+0x5e>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <xTaskRemoveFromEventList+0xb4>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a13      	ldr	r2, [pc, #76]	@ (8004418 <xTaskRemoveFromEventList+0xb8>)
 80043cc:	441a      	add	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fe fdb0 	bl	8002f3a <vListInsertEnd>
 80043da:	e005      	b.n	80043e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3318      	adds	r3, #24
 80043e0:	4619      	mov	r1, r3
 80043e2:	480e      	ldr	r0, [pc, #56]	@ (800441c <xTaskRemoveFromEventList+0xbc>)
 80043e4:	f7fe fda9 	bl	8002f3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <xTaskRemoveFromEventList+0xc0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d905      	bls.n	8004402 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <xTaskRemoveFromEventList+0xc4>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e001      	b.n	8004406 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004406:	697b      	ldr	r3, [r7, #20]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000df0 	.word	0x20000df0
 8004414:	20000dd0 	.word	0x20000dd0
 8004418:	200008f8 	.word	0x200008f8
 800441c:	20000d88 	.word	0x20000d88
 8004420:	200008f4 	.word	0x200008f4
 8004424:	20000ddc 	.word	0x20000ddc

08004428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <vTaskInternalSetTimeOutState+0x24>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <vTaskInternalSetTimeOutState+0x28>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	605a      	str	r2, [r3, #4]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000de0 	.word	0x20000de0
 8004450:	20000dcc 	.word	0x20000dcc

08004454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	613b      	str	r3, [r7, #16]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60fb      	str	r3, [r7, #12]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800449a:	f000 fe95 	bl	80051c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <xTaskCheckForTimeOut+0xc0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044b6:	d102      	bne.n	80044be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e023      	b.n	8004506 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <xTaskCheckForTimeOut+0xc4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d007      	beq.n	80044da <xTaskCheckForTimeOut+0x86>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e015      	b.n	8004506 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d20b      	bcs.n	80044fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad2      	subs	r2, r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff99 	bl	8004428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e004      	b.n	8004506 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004506:	f000 fe91 	bl	800522c <vPortExitCritical>

	return xReturn;
 800450a:	69fb      	ldr	r3, [r7, #28]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000dcc 	.word	0x20000dcc
 8004518:	20000de0 	.word	0x20000de0

0800451c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004520:	4b03      	ldr	r3, [pc, #12]	@ (8004530 <vTaskMissedYield+0x14>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000ddc 	.word	0x20000ddc

08004534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800453c:	f000 f852 	bl	80045e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <prvIdleTask+0x28>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d9f9      	bls.n	800453c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <prvIdleTask+0x2c>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004558:	e7f0      	b.n	800453c <prvIdleTask+0x8>
 800455a:	bf00      	nop
 800455c:	200008f8 	.word	0x200008f8
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	e00c      	b.n	800458a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <prvInitialiseTaskLists+0x60>)
 800457c:	4413      	add	r3, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fcae 	bl	8002ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3301      	adds	r3, #1
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b37      	cmp	r3, #55	@ 0x37
 800458e:	d9ef      	bls.n	8004570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004590:	480d      	ldr	r0, [pc, #52]	@ (80045c8 <prvInitialiseTaskLists+0x64>)
 8004592:	f7fe fca5 	bl	8002ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <prvInitialiseTaskLists+0x68>)
 8004598:	f7fe fca2 	bl	8002ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800459c:	480c      	ldr	r0, [pc, #48]	@ (80045d0 <prvInitialiseTaskLists+0x6c>)
 800459e:	f7fe fc9f 	bl	8002ee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045a2:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <prvInitialiseTaskLists+0x70>)
 80045a4:	f7fe fc9c 	bl	8002ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045a8:	480b      	ldr	r0, [pc, #44]	@ (80045d8 <prvInitialiseTaskLists+0x74>)
 80045aa:	f7fe fc99 	bl	8002ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <prvInitialiseTaskLists+0x78>)
 80045b0:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <prvInitialiseTaskLists+0x64>)
 80045b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <prvInitialiseTaskLists+0x7c>)
 80045b6:	4a05      	ldr	r2, [pc, #20]	@ (80045cc <prvInitialiseTaskLists+0x68>)
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200008f8 	.word	0x200008f8
 80045c8:	20000d58 	.word	0x20000d58
 80045cc:	20000d6c 	.word	0x20000d6c
 80045d0:	20000d88 	.word	0x20000d88
 80045d4:	20000d9c 	.word	0x20000d9c
 80045d8:	20000db4 	.word	0x20000db4
 80045dc:	20000d80 	.word	0x20000d80
 80045e0:	20000d84 	.word	0x20000d84

080045e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ea:	e019      	b.n	8004620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045ec:	f000 fdec 	bl	80051c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <prvCheckTasksWaitingTermination+0x50>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fcf9 	bl	8002ff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <prvCheckTasksWaitingTermination+0x54>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <prvCheckTasksWaitingTermination+0x54>)
 800460a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3b01      	subs	r3, #1
 8004612:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 8004614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004616:	f000 fe09 	bl	800522c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f810 	bl	8004640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e1      	bne.n	80045ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000d9c 	.word	0x20000d9c
 8004638:	20000dc8 	.word	0x20000dc8
 800463c:	20000db0 	.word	0x20000db0

08004640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3354      	adds	r3, #84	@ 0x54
 800464c:	4618      	mov	r0, r3
 800464e:	f001 faf5 	bl	8005c3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004658:	2b00      	cmp	r3, #0
 800465a:	d108      	bne.n	800466e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	4618      	mov	r0, r3
 8004662:	f000 ffa1 	bl	80055a8 <vPortFree>
				vPortFree( pxTCB );
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 ff9e 	bl	80055a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800466c:	e019      	b.n	80046a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004674:	2b01      	cmp	r3, #1
 8004676:	d103      	bne.n	8004680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 ff95 	bl	80055a8 <vPortFree>
	}
 800467e:	e010      	b.n	80046a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004686:	2b02      	cmp	r3, #2
 8004688:	d00b      	beq.n	80046a2 <prvDeleteTCB+0x62>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60fb      	str	r3, [r7, #12]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <prvDeleteTCB+0x5e>
	}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b2:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <prvResetNextTaskUnblockTime+0x38>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <prvResetNextTaskUnblockTime+0x3c>)
 80046be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046c4:	e008      	b.n	80046d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c6:	4b07      	ldr	r3, [pc, #28]	@ (80046e4 <prvResetNextTaskUnblockTime+0x38>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <prvResetNextTaskUnblockTime+0x3c>)
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	20000d80 	.word	0x20000d80
 80046e8:	20000de8 	.word	0x20000de8

080046ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <xTaskGetSchedulerState+0x34>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046fa:	2301      	movs	r3, #1
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	e008      	b.n	8004712 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004700:	4b08      	ldr	r3, [pc, #32]	@ (8004724 <xTaskGetSchedulerState+0x38>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004708:	2302      	movs	r3, #2
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	e001      	b.n	8004712 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004712:	687b      	ldr	r3, [r7, #4]
	}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	20000dd4 	.word	0x20000dd4
 8004724:	20000df0 	.word	0x20000df0

08004728 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d058      	beq.n	80047f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800473e:	4b2f      	ldr	r3, [pc, #188]	@ (80047fc <xTaskPriorityDisinherit+0xd4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	429a      	cmp	r2, r3
 8004746:	d00b      	beq.n	8004760 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	60fb      	str	r3, [r7, #12]
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60bb      	str	r3, [r7, #8]
}
 800477a:	bf00      	nop
 800477c:	bf00      	nop
 800477e:	e7fd      	b.n	800477c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004792:	429a      	cmp	r2, r3
 8004794:	d02c      	beq.n	80047f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479a:	2b00      	cmp	r3, #0
 800479c:	d128      	bne.n	80047f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fc26 	bl	8002ff4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004800 <xTaskPriorityDisinherit+0xd8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d903      	bls.n	80047d0 <xTaskPriorityDisinherit+0xa8>
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <xTaskPriorityDisinherit+0xd8>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <xTaskPriorityDisinherit+0xdc>)
 80047de:	441a      	add	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe fba7 	bl	8002f3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047f0:	697b      	ldr	r3, [r7, #20]
	}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200008f4 	.word	0x200008f4
 8004800:	20000dd0 	.word	0x20000dd0
 8004804:	200008f8 	.word	0x200008f8

08004808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004812:	4b21      	ldr	r3, [pc, #132]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x90>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004818:	4b20      	ldr	r3, [pc, #128]	@ (800489c <prvAddCurrentTaskToDelayedList+0x94>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3304      	adds	r3, #4
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fbe8 	bl	8002ff4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800482a:	d10a      	bne.n	8004842 <prvAddCurrentTaskToDelayedList+0x3a>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004832:	4b1a      	ldr	r3, [pc, #104]	@ (800489c <prvAddCurrentTaskToDelayedList+0x94>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4819      	ldr	r0, [pc, #100]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800483c:	f7fe fb7d 	bl	8002f3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004840:	e026      	b.n	8004890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800484a:	4b14      	ldr	r3, [pc, #80]	@ (800489c <prvAddCurrentTaskToDelayedList+0x94>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	429a      	cmp	r2, r3
 8004858:	d209      	bcs.n	800486e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800485a:	4b12      	ldr	r3, [pc, #72]	@ (80048a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b0f      	ldr	r3, [pc, #60]	@ (800489c <prvAddCurrentTaskToDelayedList+0x94>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f7fe fb8b 	bl	8002f82 <vListInsert>
}
 800486c:	e010      	b.n	8004890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486e:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <prvAddCurrentTaskToDelayedList+0x94>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f7fe fb81 	bl	8002f82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	d202      	bcs.n	8004890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800488a:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6013      	str	r3, [r2, #0]
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000dcc 	.word	0x20000dcc
 800489c:	200008f4 	.word	0x200008f4
 80048a0:	20000db4 	.word	0x20000db4
 80048a4:	20000d84 	.word	0x20000d84
 80048a8:	20000d80 	.word	0x20000d80
 80048ac:	20000de8 	.word	0x20000de8

080048b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048ba:	f000 fb13 	bl	8004ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048be:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <xTimerCreateTimerTask+0x84>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d021      	beq.n	800490a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048ce:	1d3a      	adds	r2, r7, #4
 80048d0:	f107 0108 	add.w	r1, r7, #8
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fae7 	bl	8002eac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	9202      	str	r2, [sp, #8]
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	2302      	movs	r3, #2
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	460a      	mov	r2, r1
 80048f0:	4911      	ldr	r1, [pc, #68]	@ (8004938 <xTimerCreateTimerTask+0x88>)
 80048f2:	4812      	ldr	r0, [pc, #72]	@ (800493c <xTimerCreateTimerTask+0x8c>)
 80048f4:	f7ff f8a2 	bl	8003a3c <xTaskCreateStatic>
 80048f8:	4603      	mov	r3, r0
 80048fa:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <xTimerCreateTimerTask+0x90>)
 80048fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <xTimerCreateTimerTask+0x90>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	613b      	str	r3, [r7, #16]
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000e24 	.word	0x20000e24
 8004938:	08006968 	.word	0x08006968
 800493c:	08004a7d 	.word	0x08004a7d
 8004940:	20000e28 	.word	0x20000e28

08004944 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <xTimerGenericCommand+0x30>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	623b      	str	r3, [r7, #32]
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004974:	4b19      	ldr	r3, [pc, #100]	@ (80049dc <xTimerGenericCommand+0x98>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02a      	beq.n	80049d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	dc18      	bgt.n	80049c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800498e:	f7ff fead 	bl	80046ec <xTaskGetSchedulerState>
 8004992:	4603      	mov	r3, r0
 8004994:	2b02      	cmp	r3, #2
 8004996:	d109      	bne.n	80049ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <xTimerGenericCommand+0x98>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	f107 0110 	add.w	r1, r7, #16
 80049a0:	2300      	movs	r3, #0
 80049a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a4:	f7fe fc5a 	bl	800325c <xQueueGenericSend>
 80049a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80049aa:	e012      	b.n	80049d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <xTimerGenericCommand+0x98>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	f107 0110 	add.w	r1, r7, #16
 80049b4:	2300      	movs	r3, #0
 80049b6:	2200      	movs	r2, #0
 80049b8:	f7fe fc50 	bl	800325c <xQueueGenericSend>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80049be:	e008      	b.n	80049d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <xTimerGenericCommand+0x98>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	f107 0110 	add.w	r1, r7, #16
 80049c8:	2300      	movs	r3, #0
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	f7fe fd48 	bl	8003460 <xQueueGenericSendFromISR>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	@ 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000e24 	.word	0x20000e24

080049e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ea:	4b23      	ldr	r3, [pc, #140]	@ (8004a78 <prvProcessExpiredTimer+0x98>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fafb 	bl	8002ff4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d023      	beq.n	8004a54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	18d1      	adds	r1, r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f000 f8d5 	bl	8004bc8 <prvInsertTimerInActiveList>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a24:	2300      	movs	r3, #0
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6978      	ldr	r0, [r7, #20]
 8004a30:	f7ff ff88 	bl	8004944 <xTimerGenericCommand>
 8004a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d114      	bne.n	8004a66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60fb      	str	r3, [r7, #12]
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	4798      	blx	r3
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000e1c 	.word	0x20000e1c

08004a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f859 	bl	8004b40 <prvGetNextExpireTime>
 8004a8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4619      	mov	r1, r3
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f805 	bl	8004aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a9a:	f000 f8d7 	bl	8004c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a9e:	bf00      	nop
 8004aa0:	e7f0      	b.n	8004a84 <prvTimerTask+0x8>
	...

08004aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004aae:	f7ff fa29 	bl	8003f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f866 	bl	8004b88 <prvSampleTimeNow>
 8004abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d130      	bne.n	8004b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <prvProcessTimerOrBlockTask+0x3c>
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d806      	bhi.n	8004ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ad2:	f7ff fa25 	bl	8003f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff81 	bl	80049e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ade:	e024      	b.n	8004b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ae6:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <prvProcessTimerOrBlockTask+0x90>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <prvProcessTimerOrBlockTask+0x50>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <prvProcessTimerOrBlockTask+0x52>
 8004af4:	2300      	movs	r3, #0
 8004af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004af8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <prvProcessTimerOrBlockTask+0x94>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	f7fe ff65 	bl	80039d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b0a:	f7ff fa09 	bl	8003f20 <xTaskResumeAll>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b14:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <prvProcessTimerOrBlockTask+0x98>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	f3bf 8f6f 	isb	sy
}
 8004b24:	e001      	b.n	8004b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b26:	f7ff f9fb 	bl	8003f20 <xTaskResumeAll>
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000e20 	.word	0x20000e20
 8004b38:	20000e24 	.word	0x20000e24
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b48:	4b0e      	ldr	r3, [pc, #56]	@ (8004b84 <prvGetNextExpireTime+0x44>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <prvGetNextExpireTime+0x16>
 8004b52:	2201      	movs	r2, #1
 8004b54:	e000      	b.n	8004b58 <prvGetNextExpireTime+0x18>
 8004b56:	2200      	movs	r2, #0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <prvGetNextExpireTime+0x44>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e001      	b.n	8004b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000e1c 	.word	0x20000e1c

08004b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b90:	f7ff fa64 	bl	800405c <xTaskGetTickCount>
 8004b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <prvSampleTimeNow+0x3c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d205      	bcs.n	8004bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ba0:	f000 f93a 	bl	8004e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bb2:	4a04      	ldr	r2, [pc, #16]	@ (8004bc4 <prvSampleTimeNow+0x3c>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000e2c 	.word	0x20000e2c

08004bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d812      	bhi.n	8004c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e01b      	b.n	8004c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c02:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <prvInsertTimerInActiveList+0x7c>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f7fe f9b8 	bl	8002f82 <vListInsert>
 8004c12:	e012      	b.n	8004c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d206      	bcs.n	8004c2a <prvInsertTimerInActiveList+0x62>
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d302      	bcc.n	8004c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e007      	b.n	8004c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c2a:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <prvInsertTimerInActiveList+0x80>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fe f9a4 	bl	8002f82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c3a:	697b      	ldr	r3, [r7, #20]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000e20 	.word	0x20000e20
 8004c48:	20000e1c 	.word	0x20000e1c

08004c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08e      	sub	sp, #56	@ 0x38
 8004c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c52:	e0ce      	b.n	8004df2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da19      	bge.n	8004c8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c5a:	1d3b      	adds	r3, r7, #4
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61fb      	str	r3, [r7, #28]
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c84:	6850      	ldr	r0, [r2, #4]
 8004c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c88:	6892      	ldr	r2, [r2, #8]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f2c0 80ae 	blt.w	8004df2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe f9a4 	bl	8002ff4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cac:	463b      	mov	r3, r7
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ff6a 	bl	8004b88 <prvSampleTimeNow>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	f200 8097 	bhi.w	8004dec <prvProcessReceivedCommands+0x1a0>
 8004cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <prvProcessReceivedCommands+0x78>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004ced 	.word	0x08004ced
 8004cd0:	08004d63 	.word	0x08004d63
 8004cd4:	08004d77 	.word	0x08004d77
 8004cd8:	08004dc3 	.word	0x08004dc3
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004ced 	.word	0x08004ced
 8004ce4:	08004d63 	.word	0x08004d63
 8004ce8:	08004d77 	.word	0x08004d77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	18d1      	adds	r1, r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d0c:	f7ff ff5c 	bl	8004bc8 <prvInsertTimerInActiveList>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d06c      	beq.n	8004df0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d061      	beq.n	8004df0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	441a      	add	r2, r3
 8004d34:	2300      	movs	r3, #0
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d3e:	f7ff fe01 	bl	8004944 <xTimerGenericCommand>
 8004d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d152      	bne.n	8004df0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	61bb      	str	r3, [r7, #24]
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d74:	e03d      	b.n	8004df2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	617b      	str	r3, [r7, #20]
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	18d1      	adds	r1, r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dbc:	f7ff ff04 	bl	8004bc8 <prvInsertTimerInActiveList>
					break;
 8004dc0:	e017      	b.n	8004df2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dd2:	f000 fbe9 	bl	80055a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dd6:	e00c      	b.n	8004df2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004dea:	e002      	b.n	8004df2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004dec:	bf00      	nop
 8004dee:	e000      	b.n	8004df2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004df0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df2:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <prvProcessReceivedCommands+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	1d39      	adds	r1, r7, #4
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fbce 	bl	800359c <xQueueReceive>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f47f af26 	bne.w	8004c54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	3730      	adds	r7, #48	@ 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000e24 	.word	0x20000e24

08004e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e1e:	e049      	b.n	8004eb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e20:	4b2e      	ldr	r3, [pc, #184]	@ (8004edc <prvSwitchTimerLists+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <prvSwitchTimerLists+0xc4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe f8db 	bl	8002ff4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02f      	beq.n	8004eb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d90e      	bls.n	8004e84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e72:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <prvSwitchTimerLists+0xc4>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fe f880 	bl	8002f82 <vListInsert>
 8004e82:	e017      	b.n	8004eb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e84:	2300      	movs	r3, #0
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff fd58 	bl	8004944 <xTimerGenericCommand>
 8004e94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	603b      	str	r3, [r7, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	e7fd      	b.n	8004eb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <prvSwitchTimerLists+0xc4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1b0      	bne.n	8004e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ebe:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <prvSwitchTimerLists+0xc4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <prvSwitchTimerLists+0xc8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a04      	ldr	r2, [pc, #16]	@ (8004edc <prvSwitchTimerLists+0xc4>)
 8004eca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ecc:	4a04      	ldr	r2, [pc, #16]	@ (8004ee0 <prvSwitchTimerLists+0xc8>)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6013      	str	r3, [r2, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000e1c 	.word	0x20000e1c
 8004ee0:	20000e20 	.word	0x20000e20

08004ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eea:	f000 f96d 	bl	80051c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eee:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <prvCheckForValidListAndQueue+0x60>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d120      	bne.n	8004f38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ef6:	4814      	ldr	r0, [pc, #80]	@ (8004f48 <prvCheckForValidListAndQueue+0x64>)
 8004ef8:	f7fd fff2 	bl	8002ee0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004efc:	4813      	ldr	r0, [pc, #76]	@ (8004f4c <prvCheckForValidListAndQueue+0x68>)
 8004efe:	f7fd ffef 	bl	8002ee0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f02:	4b13      	ldr	r3, [pc, #76]	@ (8004f50 <prvCheckForValidListAndQueue+0x6c>)
 8004f04:	4a10      	ldr	r2, [pc, #64]	@ (8004f48 <prvCheckForValidListAndQueue+0x64>)
 8004f06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f08:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <prvCheckForValidListAndQueue+0x70>)
 8004f0a:	4a10      	ldr	r2, [pc, #64]	@ (8004f4c <prvCheckForValidListAndQueue+0x68>)
 8004f0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	4b11      	ldr	r3, [pc, #68]	@ (8004f58 <prvCheckForValidListAndQueue+0x74>)
 8004f14:	4a11      	ldr	r2, [pc, #68]	@ (8004f5c <prvCheckForValidListAndQueue+0x78>)
 8004f16:	2110      	movs	r1, #16
 8004f18:	200a      	movs	r0, #10
 8004f1a:	f7fe f8ff 	bl	800311c <xQueueGenericCreateStatic>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4a08      	ldr	r2, [pc, #32]	@ (8004f44 <prvCheckForValidListAndQueue+0x60>)
 8004f22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f24:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <prvCheckForValidListAndQueue+0x60>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <prvCheckForValidListAndQueue+0x60>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	490b      	ldr	r1, [pc, #44]	@ (8004f60 <prvCheckForValidListAndQueue+0x7c>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fd24 	bl	8003980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f38:	f000 f978 	bl	800522c <vPortExitCritical>
}
 8004f3c:	bf00      	nop
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000e24 	.word	0x20000e24
 8004f48:	20000df4 	.word	0x20000df4
 8004f4c:	20000e08 	.word	0x20000e08
 8004f50:	20000e1c 	.word	0x20000e1c
 8004f54:	20000e20 	.word	0x20000e20
 8004f58:	20000ed0 	.word	0x20000ed0
 8004f5c:	20000e30 	.word	0x20000e30
 8004f60:	08006970 	.word	0x08006970

08004f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b04      	subs	r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b04      	subs	r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f94:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc8 <pxPortInitialiseStack+0x64>)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b14      	subs	r3, #20
 8004f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f06f 0202 	mvn.w	r2, #2
 8004fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b20      	subs	r3, #32
 8004fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	08004fcd 	.word	0x08004fcd

08004fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <prvTaskExitError+0x58>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fde:	d00b      	beq.n	8004ff8 <prvTaskExitError+0x2c>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	60fb      	str	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <prvTaskExitError+0x28>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	60bb      	str	r3, [r7, #8]
}
 800500a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800500c:	bf00      	nop
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0fc      	beq.n	800500e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	2000000c 	.word	0x2000000c
	...

08005030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005030:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <pxCurrentTCBConst2>)
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6808      	ldr	r0, [r1, #0]
 8005036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	f380 8809 	msr	PSP, r0
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8811 	msr	BASEPRI, r0
 800504a:	4770      	bx	lr
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst2>:
 8005050:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005058:	4808      	ldr	r0, [pc, #32]	@ (800507c <prvPortStartFirstTask+0x24>)
 800505a:	6800      	ldr	r0, [r0, #0]
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f380 8808 	msr	MSP, r0
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8814 	msr	CONTROL, r0
 800506a:	b662      	cpsie	i
 800506c:	b661      	cpsie	f
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	df00      	svc	0
 8005078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800507a:	bf00      	nop
 800507c:	e000ed08 	.word	0xe000ed08

08005080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005086:	4b47      	ldr	r3, [pc, #284]	@ (80051a4 <xPortStartScheduler+0x124>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a47      	ldr	r2, [pc, #284]	@ (80051a8 <xPortStartScheduler+0x128>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10b      	bne.n	80050a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	613b      	str	r3, [r7, #16]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050a8:	4b3e      	ldr	r3, [pc, #248]	@ (80051a4 <xPortStartScheduler+0x124>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3f      	ldr	r2, [pc, #252]	@ (80051ac <xPortStartScheduler+0x12c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10b      	bne.n	80050ca <xPortStartScheduler+0x4a>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60fb      	str	r3, [r7, #12]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ca:	4b39      	ldr	r3, [pc, #228]	@ (80051b0 <xPortStartScheduler+0x130>)
 80050cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	22ff      	movs	r2, #255	@ 0xff
 80050da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4b31      	ldr	r3, [pc, #196]	@ (80051b4 <xPortStartScheduler+0x134>)
 80050f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <xPortStartScheduler+0x138>)
 80050f4:	2207      	movs	r2, #7
 80050f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050f8:	e009      	b.n	800510e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050fa:	4b2f      	ldr	r3, [pc, #188]	@ (80051b8 <xPortStartScheduler+0x138>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a2d      	ldr	r2, [pc, #180]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005116:	2b80      	cmp	r3, #128	@ 0x80
 8005118:	d0ef      	beq.n	80050fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800511a:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <xPortStartScheduler+0x138>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1c3 0307 	rsb	r3, r3, #7
 8005122:	2b04      	cmp	r3, #4
 8005124:	d00b      	beq.n	800513e <xPortStartScheduler+0xbe>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60bb      	str	r3, [r7, #8]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800513e:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005148:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <xPortStartScheduler+0x138>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005150:	4a19      	ldr	r2, [pc, #100]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800515c:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <xPortStartScheduler+0x13c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <xPortStartScheduler+0x13c>)
 8005162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005168:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <xPortStartScheduler+0x13c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <xPortStartScheduler+0x13c>)
 800516e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005174:	f000 f8da 	bl	800532c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <xPortStartScheduler+0x140>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800517e:	f000 f8f9 	bl	8005374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <xPortStartScheduler+0x144>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a0f      	ldr	r2, [pc, #60]	@ (80051c4 <xPortStartScheduler+0x144>)
 8005188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800518c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800518e:	f7ff ff63 	bl	8005058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005192:	f7ff f82d 	bl	80041f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005196:	f7ff ff19 	bl	8004fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	e000ed00 	.word	0xe000ed00
 80051a8:	410fc271 	.word	0x410fc271
 80051ac:	410fc270 	.word	0x410fc270
 80051b0:	e000e400 	.word	0xe000e400
 80051b4:	20000f20 	.word	0x20000f20
 80051b8:	20000f24 	.word	0x20000f24
 80051bc:	e000ed20 	.word	0xe000ed20
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	e000ef34 	.word	0xe000ef34

080051c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	607b      	str	r3, [r7, #4]
}
 80051e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <vPortEnterCritical+0x5c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005224 <vPortEnterCritical+0x5c>)
 80051ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <vPortEnterCritical+0x5c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d110      	bne.n	8005216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <vPortEnterCritical+0x60>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <vPortEnterCritical+0x4e>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	603b      	str	r3, [r7, #0]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <vPortEnterCritical+0x4a>
	}
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	2000000c 	.word	0x2000000c
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <vPortExitCritical+0x50>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <vPortExitCritical+0x26>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	607b      	str	r3, [r7, #4]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <vPortExitCritical+0x50>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3b01      	subs	r3, #1
 8005258:	4a08      	ldr	r2, [pc, #32]	@ (800527c <vPortExitCritical+0x50>)
 800525a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <vPortExitCritical+0x50>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <vPortExitCritical+0x44>
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	2000000c 	.word	0x2000000c

08005280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005280:	f3ef 8009 	mrs	r0, PSP
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4b15      	ldr	r3, [pc, #84]	@ (80052e0 <pxCurrentTCBConst>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f01e 0f10 	tst.w	lr, #16
 8005290:	bf08      	it	eq
 8005292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052a4:	f380 8811 	msr	BASEPRI, r0
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f7fe ff9e 	bl	80041f0 <vTaskSwitchContext>
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f380 8811 	msr	BASEPRI, r0
 80052bc:	bc09      	pop	{r0, r3}
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	6808      	ldr	r0, [r1, #0]
 80052c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c6:	f01e 0f10 	tst.w	lr, #16
 80052ca:	bf08      	it	eq
 80052cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052d0:	f380 8809 	msr	PSP, r0
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst>:
 80052e0:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005302:	f7fe febb 	bl	800407c <xTaskIncrementTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <xPortSysTickHandler+0x40>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <vPortSetupTimerInterrupt+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <vPortSetupTimerInterrupt+0x3c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0a      	ldr	r2, [pc, #40]	@ (800536c <vPortSetupTimerInterrupt+0x40>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <vPortSetupTimerInterrupt+0x44>)
 800534a:	3b01      	subs	r3, #1
 800534c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800534e:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	e000e010 	.word	0xe000e010
 8005364:	e000e018 	.word	0xe000e018
 8005368:	20000000 	.word	0x20000000
 800536c:	10624dd3 	.word	0x10624dd3
 8005370:	e000e014 	.word	0xe000e014

08005374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005384 <vPortEnableVFP+0x10>
 8005378:	6801      	ldr	r1, [r0, #0]
 800537a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800537e:	6001      	str	r1, [r0, #0]
 8005380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005382:	bf00      	nop
 8005384:	e000ed88 	.word	0xe000ed88

08005388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d915      	bls.n	80053c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800539a:	4a18      	ldr	r2, [pc, #96]	@ (80053fc <vPortValidateInterruptPriority+0x74>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053a4:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <vPortValidateInterruptPriority+0x78>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	7afa      	ldrb	r2, [r7, #11]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d20b      	bcs.n	80053c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005404 <vPortValidateInterruptPriority+0x7c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005408 <vPortValidateInterruptPriority+0x80>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d90b      	bls.n	80053ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	603b      	str	r3, [r7, #0]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <vPortValidateInterruptPriority+0x62>
	}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000e3f0 	.word	0xe000e3f0
 8005400:	20000f20 	.word	0x20000f20
 8005404:	e000ed0c 	.word	0xe000ed0c
 8005408:	20000f24 	.word	0x20000f24

0800540c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	@ 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005418:	f7fe fd74 	bl	8003f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800541c:	4b5c      	ldr	r3, [pc, #368]	@ (8005590 <pvPortMalloc+0x184>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005424:	f000 f924 	bl	8005670 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005428:	4b5a      	ldr	r3, [pc, #360]	@ (8005594 <pvPortMalloc+0x188>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 8095 	bne.w	8005560 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01e      	beq.n	800547a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800543c:	2208      	movs	r2, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <pvPortMalloc+0x6e>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d06f      	beq.n	8005560 <pvPortMalloc+0x154>
 8005480:	4b45      	ldr	r3, [pc, #276]	@ (8005598 <pvPortMalloc+0x18c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d86a      	bhi.n	8005560 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800548a:	4b44      	ldr	r3, [pc, #272]	@ (800559c <pvPortMalloc+0x190>)
 800548c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800548e:	4b43      	ldr	r3, [pc, #268]	@ (800559c <pvPortMalloc+0x190>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005494:	e004      	b.n	80054a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d903      	bls.n	80054b2 <pvPortMalloc+0xa6>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f1      	bne.n	8005496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054b2:	4b37      	ldr	r3, [pc, #220]	@ (8005590 <pvPortMalloc+0x184>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d051      	beq.n	8005560 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	4413      	add	r3, r2
 80054c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	1ad2      	subs	r2, r2, r3
 80054d6:	2308      	movs	r3, #8
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	429a      	cmp	r2, r3
 80054dc:	d920      	bls.n	8005520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <pvPortMalloc+0xfc>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800551a:	69b8      	ldr	r0, [r7, #24]
 800551c:	f000 f90a 	bl	8005734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005520:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <pvPortMalloc+0x18c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <pvPortMalloc+0x18c>)
 800552c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <pvPortMalloc+0x18c>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <pvPortMalloc+0x194>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d203      	bcs.n	8005542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800553a:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <pvPortMalloc+0x18c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <pvPortMalloc+0x194>)
 8005540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <pvPortMalloc+0x188>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	431a      	orrs	r2, r3
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005556:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <pvPortMalloc+0x198>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	4a11      	ldr	r2, [pc, #68]	@ (80055a4 <pvPortMalloc+0x198>)
 800555e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005560:	f7fe fcde 	bl	8003f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <pvPortMalloc+0x17a>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60fb      	str	r3, [r7, #12]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <pvPortMalloc+0x176>
	return pvReturn;
 8005586:	69fb      	ldr	r3, [r7, #28]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20004b30 	.word	0x20004b30
 8005594:	20004b44 	.word	0x20004b44
 8005598:	20004b34 	.word	0x20004b34
 800559c:	20004b28 	.word	0x20004b28
 80055a0:	20004b38 	.word	0x20004b38
 80055a4:	20004b3c 	.word	0x20004b3c

080055a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04f      	beq.n	800565a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ba:	2308      	movs	r3, #8
 80055bc:	425b      	negs	r3, r3
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <vPortFree+0xbc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <vPortFree+0x46>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60fb      	str	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <vPortFree+0x66>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60bb      	str	r3, [r7, #8]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4b14      	ldr	r3, [pc, #80]	@ (8005664 <vPortFree+0xbc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01e      	beq.n	800565a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11a      	bne.n	800565a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <vPortFree+0xbc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005634:	f7fe fc66 	bl	8003f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <vPortFree+0xc0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4413      	add	r3, r2
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <vPortFree+0xc0>)
 8005644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005646:	6938      	ldr	r0, [r7, #16]
 8005648:	f000 f874 	bl	8005734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800564c:	4b07      	ldr	r3, [pc, #28]	@ (800566c <vPortFree+0xc4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a06      	ldr	r2, [pc, #24]	@ (800566c <vPortFree+0xc4>)
 8005654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005656:	f7fe fc63 	bl	8003f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20004b44 	.word	0x20004b44
 8005668:	20004b34 	.word	0x20004b34
 800566c:	20004b40 	.word	0x20004b40

08005670 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005676:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800567a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <prvHeapInit+0xac>)
 800567e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3307      	adds	r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <prvHeapInit+0xac>)
 80056a0:	4413      	add	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <prvHeapInit+0xb0>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <prvHeapInit+0xb0>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4413      	add	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056bc:	2208      	movs	r2, #8
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a15      	ldr	r2, [pc, #84]	@ (8005724 <prvHeapInit+0xb4>)
 80056d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056d2:	4b14      	ldr	r3, [pc, #80]	@ (8005724 <prvHeapInit+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <prvHeapInit+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <prvHeapInit+0xb4>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <prvHeapInit+0xb8>)
 80056fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4a09      	ldr	r2, [pc, #36]	@ (800572c <prvHeapInit+0xbc>)
 8005706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005708:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <prvHeapInit+0xc0>)
 800570a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	20000f28 	.word	0x20000f28
 8005720:	20004b28 	.word	0x20004b28
 8005724:	20004b30 	.word	0x20004b30
 8005728:	20004b38 	.word	0x20004b38
 800572c:	20004b34 	.word	0x20004b34
 8005730:	20004b44 	.word	0x20004b44

08005734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800573c:	4b28      	ldr	r3, [pc, #160]	@ (80057e0 <prvInsertBlockIntoFreeList+0xac>)
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e002      	b.n	8005748 <prvInsertBlockIntoFreeList+0x14>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d8f7      	bhi.n	8005742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d108      	bne.n	8005776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	441a      	add	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	441a      	add	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d118      	bne.n	80057bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b15      	ldr	r3, [pc, #84]	@ (80057e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d00d      	beq.n	80057b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e008      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057b2:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <prvInsertBlockIntoFreeList+0xb0>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e003      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d002      	beq.n	80057d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20004b28 	.word	0x20004b28
 80057e4:	20004b30 	.word	0x20004b30

080057e8 <std>:
 80057e8:	2300      	movs	r3, #0
 80057ea:	b510      	push	{r4, lr}
 80057ec:	4604      	mov	r4, r0
 80057ee:	e9c0 3300 	strd	r3, r3, [r0]
 80057f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057f6:	6083      	str	r3, [r0, #8]
 80057f8:	8181      	strh	r1, [r0, #12]
 80057fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80057fc:	81c2      	strh	r2, [r0, #14]
 80057fe:	6183      	str	r3, [r0, #24]
 8005800:	4619      	mov	r1, r3
 8005802:	2208      	movs	r2, #8
 8005804:	305c      	adds	r0, #92	@ 0x5c
 8005806:	f000 fa01 	bl	8005c0c <memset>
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <std+0x58>)
 800580c:	6263      	str	r3, [r4, #36]	@ 0x24
 800580e:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <std+0x5c>)
 8005810:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <std+0x60>)
 8005814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <std+0x64>)
 8005818:	6323      	str	r3, [r4, #48]	@ 0x30
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <std+0x68>)
 800581c:	6224      	str	r4, [r4, #32]
 800581e:	429c      	cmp	r4, r3
 8005820:	d006      	beq.n	8005830 <std+0x48>
 8005822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005826:	4294      	cmp	r4, r2
 8005828:	d002      	beq.n	8005830 <std+0x48>
 800582a:	33d0      	adds	r3, #208	@ 0xd0
 800582c:	429c      	cmp	r4, r3
 800582e:	d105      	bne.n	800583c <std+0x54>
 8005830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005838:	f000 bab6 	b.w	8005da8 <__retarget_lock_init_recursive>
 800583c:	bd10      	pop	{r4, pc}
 800583e:	bf00      	nop
 8005840:	08005a5d 	.word	0x08005a5d
 8005844:	08005a7f 	.word	0x08005a7f
 8005848:	08005ab7 	.word	0x08005ab7
 800584c:	08005adb 	.word	0x08005adb
 8005850:	20004b48 	.word	0x20004b48

08005854 <stdio_exit_handler>:
 8005854:	4a02      	ldr	r2, [pc, #8]	@ (8005860 <stdio_exit_handler+0xc>)
 8005856:	4903      	ldr	r1, [pc, #12]	@ (8005864 <stdio_exit_handler+0x10>)
 8005858:	4803      	ldr	r0, [pc, #12]	@ (8005868 <stdio_exit_handler+0x14>)
 800585a:	f000 b869 	b.w	8005930 <_fwalk_sglue>
 800585e:	bf00      	nop
 8005860:	20000010 	.word	0x20000010
 8005864:	08006665 	.word	0x08006665
 8005868:	20000020 	.word	0x20000020

0800586c <cleanup_stdio>:
 800586c:	6841      	ldr	r1, [r0, #4]
 800586e:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <cleanup_stdio+0x34>)
 8005870:	4299      	cmp	r1, r3
 8005872:	b510      	push	{r4, lr}
 8005874:	4604      	mov	r4, r0
 8005876:	d001      	beq.n	800587c <cleanup_stdio+0x10>
 8005878:	f000 fef4 	bl	8006664 <_fflush_r>
 800587c:	68a1      	ldr	r1, [r4, #8]
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <cleanup_stdio+0x38>)
 8005880:	4299      	cmp	r1, r3
 8005882:	d002      	beq.n	800588a <cleanup_stdio+0x1e>
 8005884:	4620      	mov	r0, r4
 8005886:	f000 feed 	bl	8006664 <_fflush_r>
 800588a:	68e1      	ldr	r1, [r4, #12]
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <cleanup_stdio+0x3c>)
 800588e:	4299      	cmp	r1, r3
 8005890:	d004      	beq.n	800589c <cleanup_stdio+0x30>
 8005892:	4620      	mov	r0, r4
 8005894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005898:	f000 bee4 	b.w	8006664 <_fflush_r>
 800589c:	bd10      	pop	{r4, pc}
 800589e:	bf00      	nop
 80058a0:	20004b48 	.word	0x20004b48
 80058a4:	20004bb0 	.word	0x20004bb0
 80058a8:	20004c18 	.word	0x20004c18

080058ac <global_stdio_init.part.0>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	4b0b      	ldr	r3, [pc, #44]	@ (80058dc <global_stdio_init.part.0+0x30>)
 80058b0:	4c0b      	ldr	r4, [pc, #44]	@ (80058e0 <global_stdio_init.part.0+0x34>)
 80058b2:	4a0c      	ldr	r2, [pc, #48]	@ (80058e4 <global_stdio_init.part.0+0x38>)
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	4620      	mov	r0, r4
 80058b8:	2200      	movs	r2, #0
 80058ba:	2104      	movs	r1, #4
 80058bc:	f7ff ff94 	bl	80057e8 <std>
 80058c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058c4:	2201      	movs	r2, #1
 80058c6:	2109      	movs	r1, #9
 80058c8:	f7ff ff8e 	bl	80057e8 <std>
 80058cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058d0:	2202      	movs	r2, #2
 80058d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d6:	2112      	movs	r1, #18
 80058d8:	f7ff bf86 	b.w	80057e8 <std>
 80058dc:	20004c80 	.word	0x20004c80
 80058e0:	20004b48 	.word	0x20004b48
 80058e4:	08005855 	.word	0x08005855

080058e8 <__sfp_lock_acquire>:
 80058e8:	4801      	ldr	r0, [pc, #4]	@ (80058f0 <__sfp_lock_acquire+0x8>)
 80058ea:	f000 ba5e 	b.w	8005daa <__retarget_lock_acquire_recursive>
 80058ee:	bf00      	nop
 80058f0:	20004c89 	.word	0x20004c89

080058f4 <__sfp_lock_release>:
 80058f4:	4801      	ldr	r0, [pc, #4]	@ (80058fc <__sfp_lock_release+0x8>)
 80058f6:	f000 ba59 	b.w	8005dac <__retarget_lock_release_recursive>
 80058fa:	bf00      	nop
 80058fc:	20004c89 	.word	0x20004c89

08005900 <__sinit>:
 8005900:	b510      	push	{r4, lr}
 8005902:	4604      	mov	r4, r0
 8005904:	f7ff fff0 	bl	80058e8 <__sfp_lock_acquire>
 8005908:	6a23      	ldr	r3, [r4, #32]
 800590a:	b11b      	cbz	r3, 8005914 <__sinit+0x14>
 800590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005910:	f7ff bff0 	b.w	80058f4 <__sfp_lock_release>
 8005914:	4b04      	ldr	r3, [pc, #16]	@ (8005928 <__sinit+0x28>)
 8005916:	6223      	str	r3, [r4, #32]
 8005918:	4b04      	ldr	r3, [pc, #16]	@ (800592c <__sinit+0x2c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f5      	bne.n	800590c <__sinit+0xc>
 8005920:	f7ff ffc4 	bl	80058ac <global_stdio_init.part.0>
 8005924:	e7f2      	b.n	800590c <__sinit+0xc>
 8005926:	bf00      	nop
 8005928:	0800586d 	.word	0x0800586d
 800592c:	20004c80 	.word	0x20004c80

08005930 <_fwalk_sglue>:
 8005930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005934:	4607      	mov	r7, r0
 8005936:	4688      	mov	r8, r1
 8005938:	4614      	mov	r4, r2
 800593a:	2600      	movs	r6, #0
 800593c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005940:	f1b9 0901 	subs.w	r9, r9, #1
 8005944:	d505      	bpl.n	8005952 <_fwalk_sglue+0x22>
 8005946:	6824      	ldr	r4, [r4, #0]
 8005948:	2c00      	cmp	r4, #0
 800594a:	d1f7      	bne.n	800593c <_fwalk_sglue+0xc>
 800594c:	4630      	mov	r0, r6
 800594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005952:	89ab      	ldrh	r3, [r5, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d907      	bls.n	8005968 <_fwalk_sglue+0x38>
 8005958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800595c:	3301      	adds	r3, #1
 800595e:	d003      	beq.n	8005968 <_fwalk_sglue+0x38>
 8005960:	4629      	mov	r1, r5
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	4306      	orrs	r6, r0
 8005968:	3568      	adds	r5, #104	@ 0x68
 800596a:	e7e9      	b.n	8005940 <_fwalk_sglue+0x10>

0800596c <iprintf>:
 800596c:	b40f      	push	{r0, r1, r2, r3}
 800596e:	b507      	push	{r0, r1, r2, lr}
 8005970:	4906      	ldr	r1, [pc, #24]	@ (800598c <iprintf+0x20>)
 8005972:	ab04      	add	r3, sp, #16
 8005974:	6808      	ldr	r0, [r1, #0]
 8005976:	f853 2b04 	ldr.w	r2, [r3], #4
 800597a:	6881      	ldr	r1, [r0, #8]
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	f000 fb47 	bl	8006010 <_vfiprintf_r>
 8005982:	b003      	add	sp, #12
 8005984:	f85d eb04 	ldr.w	lr, [sp], #4
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr
 800598c:	2000001c 	.word	0x2000001c

08005990 <putchar>:
 8005990:	4b02      	ldr	r3, [pc, #8]	@ (800599c <putchar+0xc>)
 8005992:	4601      	mov	r1, r0
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	6882      	ldr	r2, [r0, #8]
 8005998:	f000 beee 	b.w	8006778 <_putc_r>
 800599c:	2000001c 	.word	0x2000001c

080059a0 <_puts_r>:
 80059a0:	6a03      	ldr	r3, [r0, #32]
 80059a2:	b570      	push	{r4, r5, r6, lr}
 80059a4:	6884      	ldr	r4, [r0, #8]
 80059a6:	4605      	mov	r5, r0
 80059a8:	460e      	mov	r6, r1
 80059aa:	b90b      	cbnz	r3, 80059b0 <_puts_r+0x10>
 80059ac:	f7ff ffa8 	bl	8005900 <__sinit>
 80059b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059b2:	07db      	lsls	r3, r3, #31
 80059b4:	d405      	bmi.n	80059c2 <_puts_r+0x22>
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	0598      	lsls	r0, r3, #22
 80059ba:	d402      	bmi.n	80059c2 <_puts_r+0x22>
 80059bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059be:	f000 f9f4 	bl	8005daa <__retarget_lock_acquire_recursive>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	0719      	lsls	r1, r3, #28
 80059c6:	d502      	bpl.n	80059ce <_puts_r+0x2e>
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d135      	bne.n	8005a3a <_puts_r+0x9a>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 f8c5 	bl	8005b60 <__swsetup_r>
 80059d6:	b380      	cbz	r0, 8005a3a <_puts_r+0x9a>
 80059d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80059dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059de:	07da      	lsls	r2, r3, #31
 80059e0:	d405      	bmi.n	80059ee <_puts_r+0x4e>
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	059b      	lsls	r3, r3, #22
 80059e6:	d402      	bmi.n	80059ee <_puts_r+0x4e>
 80059e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ea:	f000 f9df 	bl	8005dac <__retarget_lock_release_recursive>
 80059ee:	4628      	mov	r0, r5
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da04      	bge.n	8005a00 <_puts_r+0x60>
 80059f6:	69a2      	ldr	r2, [r4, #24]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	dc17      	bgt.n	8005a2c <_puts_r+0x8c>
 80059fc:	290a      	cmp	r1, #10
 80059fe:	d015      	beq.n	8005a2c <_puts_r+0x8c>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	7019      	strb	r1, [r3, #0]
 8005a08:	68a3      	ldr	r3, [r4, #8]
 8005a0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	60a3      	str	r3, [r4, #8]
 8005a12:	2900      	cmp	r1, #0
 8005a14:	d1ed      	bne.n	80059f2 <_puts_r+0x52>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da11      	bge.n	8005a3e <_puts_r+0x9e>
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	210a      	movs	r1, #10
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f85f 	bl	8005ae2 <__swbuf_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0d7      	beq.n	80059d8 <_puts_r+0x38>
 8005a28:	250a      	movs	r5, #10
 8005a2a:	e7d7      	b.n	80059dc <_puts_r+0x3c>
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f857 	bl	8005ae2 <__swbuf_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d1e7      	bne.n	8005a08 <_puts_r+0x68>
 8005a38:	e7ce      	b.n	80059d8 <_puts_r+0x38>
 8005a3a:	3e01      	subs	r6, #1
 8005a3c:	e7e4      	b.n	8005a08 <_puts_r+0x68>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	6022      	str	r2, [r4, #0]
 8005a44:	220a      	movs	r2, #10
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e7ee      	b.n	8005a28 <_puts_r+0x88>
	...

08005a4c <puts>:
 8005a4c:	4b02      	ldr	r3, [pc, #8]	@ (8005a58 <puts+0xc>)
 8005a4e:	4601      	mov	r1, r0
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	f7ff bfa5 	b.w	80059a0 <_puts_r>
 8005a56:	bf00      	nop
 8005a58:	2000001c 	.word	0x2000001c

08005a5c <__sread>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	460c      	mov	r4, r1
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	f000 f952 	bl	8005d0c <_read_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	bfab      	itete	ge
 8005a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a70:	181b      	addge	r3, r3, r0
 8005a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a76:	bfac      	ite	ge
 8005a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a7a:	81a3      	strhlt	r3, [r4, #12]
 8005a7c:	bd10      	pop	{r4, pc}

08005a7e <__swrite>:
 8005a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	461f      	mov	r7, r3
 8005a84:	898b      	ldrh	r3, [r1, #12]
 8005a86:	05db      	lsls	r3, r3, #23
 8005a88:	4605      	mov	r5, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	d505      	bpl.n	8005a9c <__swrite+0x1e>
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	2302      	movs	r3, #2
 8005a96:	2200      	movs	r2, #0
 8005a98:	f000 f926 	bl	8005ce8 <_lseek_r>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	463b      	mov	r3, r7
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab2:	f000 b93d 	b.w	8005d30 <_write_r>

08005ab6 <__sseek>:
 8005ab6:	b510      	push	{r4, lr}
 8005ab8:	460c      	mov	r4, r1
 8005aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abe:	f000 f913 	bl	8005ce8 <_lseek_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	bf15      	itete	ne
 8005ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ad2:	81a3      	strheq	r3, [r4, #12]
 8005ad4:	bf18      	it	ne
 8005ad6:	81a3      	strhne	r3, [r4, #12]
 8005ad8:	bd10      	pop	{r4, pc}

08005ada <__sclose>:
 8005ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ade:	f000 b89d 	b.w	8005c1c <_close_r>

08005ae2 <__swbuf_r>:
 8005ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	4605      	mov	r5, r0
 8005aea:	b118      	cbz	r0, 8005af4 <__swbuf_r+0x12>
 8005aec:	6a03      	ldr	r3, [r0, #32]
 8005aee:	b90b      	cbnz	r3, 8005af4 <__swbuf_r+0x12>
 8005af0:	f7ff ff06 	bl	8005900 <__sinit>
 8005af4:	69a3      	ldr	r3, [r4, #24]
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	071a      	lsls	r2, r3, #28
 8005afc:	d501      	bpl.n	8005b02 <__swbuf_r+0x20>
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	b943      	cbnz	r3, 8005b14 <__swbuf_r+0x32>
 8005b02:	4621      	mov	r1, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 f82b 	bl	8005b60 <__swsetup_r>
 8005b0a:	b118      	cbz	r0, 8005b14 <__swbuf_r+0x32>
 8005b0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005b10:	4638      	mov	r0, r7
 8005b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	6922      	ldr	r2, [r4, #16]
 8005b18:	1a98      	subs	r0, r3, r2
 8005b1a:	6963      	ldr	r3, [r4, #20]
 8005b1c:	b2f6      	uxtb	r6, r6
 8005b1e:	4283      	cmp	r3, r0
 8005b20:	4637      	mov	r7, r6
 8005b22:	dc05      	bgt.n	8005b30 <__swbuf_r+0x4e>
 8005b24:	4621      	mov	r1, r4
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fd9c 	bl	8006664 <_fflush_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d1ed      	bne.n	8005b0c <__swbuf_r+0x2a>
 8005b30:	68a3      	ldr	r3, [r4, #8]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	60a3      	str	r3, [r4, #8]
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	701e      	strb	r6, [r3, #0]
 8005b3e:	6962      	ldr	r2, [r4, #20]
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d004      	beq.n	8005b50 <__swbuf_r+0x6e>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	07db      	lsls	r3, r3, #31
 8005b4a:	d5e1      	bpl.n	8005b10 <__swbuf_r+0x2e>
 8005b4c:	2e0a      	cmp	r6, #10
 8005b4e:	d1df      	bne.n	8005b10 <__swbuf_r+0x2e>
 8005b50:	4621      	mov	r1, r4
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fd86 	bl	8006664 <_fflush_r>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d0d9      	beq.n	8005b10 <__swbuf_r+0x2e>
 8005b5c:	e7d6      	b.n	8005b0c <__swbuf_r+0x2a>
	...

08005b60 <__swsetup_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4b29      	ldr	r3, [pc, #164]	@ (8005c08 <__swsetup_r+0xa8>)
 8005b64:	4605      	mov	r5, r0
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	460c      	mov	r4, r1
 8005b6a:	b118      	cbz	r0, 8005b74 <__swsetup_r+0x14>
 8005b6c:	6a03      	ldr	r3, [r0, #32]
 8005b6e:	b90b      	cbnz	r3, 8005b74 <__swsetup_r+0x14>
 8005b70:	f7ff fec6 	bl	8005900 <__sinit>
 8005b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b78:	0719      	lsls	r1, r3, #28
 8005b7a:	d422      	bmi.n	8005bc2 <__swsetup_r+0x62>
 8005b7c:	06da      	lsls	r2, r3, #27
 8005b7e:	d407      	bmi.n	8005b90 <__swsetup_r+0x30>
 8005b80:	2209      	movs	r2, #9
 8005b82:	602a      	str	r2, [r5, #0]
 8005b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b8e:	e033      	b.n	8005bf8 <__swsetup_r+0x98>
 8005b90:	0758      	lsls	r0, r3, #29
 8005b92:	d512      	bpl.n	8005bba <__swsetup_r+0x5a>
 8005b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b96:	b141      	cbz	r1, 8005baa <__swsetup_r+0x4a>
 8005b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d002      	beq.n	8005ba6 <__swsetup_r+0x46>
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f913 	bl	8005dcc <_free_r>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f043 0308 	orr.w	r3, r3, #8
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	b94b      	cbnz	r3, 8005bda <__swsetup_r+0x7a>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd0:	d003      	beq.n	8005bda <__swsetup_r+0x7a>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f000 fd93 	bl	8006700 <__smakebuf_r>
 8005bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bde:	f013 0201 	ands.w	r2, r3, #1
 8005be2:	d00a      	beq.n	8005bfa <__swsetup_r+0x9a>
 8005be4:	2200      	movs	r2, #0
 8005be6:	60a2      	str	r2, [r4, #8]
 8005be8:	6962      	ldr	r2, [r4, #20]
 8005bea:	4252      	negs	r2, r2
 8005bec:	61a2      	str	r2, [r4, #24]
 8005bee:	6922      	ldr	r2, [r4, #16]
 8005bf0:	b942      	cbnz	r2, 8005c04 <__swsetup_r+0xa4>
 8005bf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bf6:	d1c5      	bne.n	8005b84 <__swsetup_r+0x24>
 8005bf8:	bd38      	pop	{r3, r4, r5, pc}
 8005bfa:	0799      	lsls	r1, r3, #30
 8005bfc:	bf58      	it	pl
 8005bfe:	6962      	ldrpl	r2, [r4, #20]
 8005c00:	60a2      	str	r2, [r4, #8]
 8005c02:	e7f4      	b.n	8005bee <__swsetup_r+0x8e>
 8005c04:	2000      	movs	r0, #0
 8005c06:	e7f7      	b.n	8005bf8 <__swsetup_r+0x98>
 8005c08:	2000001c 	.word	0x2000001c

08005c0c <memset>:
 8005c0c:	4402      	add	r2, r0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d100      	bne.n	8005c16 <memset+0xa>
 8005c14:	4770      	bx	lr
 8005c16:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1a:	e7f9      	b.n	8005c10 <memset+0x4>

08005c1c <_close_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d06      	ldr	r5, [pc, #24]	@ (8005c38 <_close_r+0x1c>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	f7fb ff8c 	bl	8001b44 <_close>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_close_r+0x1a>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_close_r+0x1a>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	20004c84 	.word	0x20004c84

08005c3c <_reclaim_reent>:
 8005c3c:	4b29      	ldr	r3, [pc, #164]	@ (8005ce4 <_reclaim_reent+0xa8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4283      	cmp	r3, r0
 8005c42:	b570      	push	{r4, r5, r6, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	d04b      	beq.n	8005ce0 <_reclaim_reent+0xa4>
 8005c48:	69c3      	ldr	r3, [r0, #28]
 8005c4a:	b1ab      	cbz	r3, 8005c78 <_reclaim_reent+0x3c>
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	b16b      	cbz	r3, 8005c6c <_reclaim_reent+0x30>
 8005c50:	2500      	movs	r5, #0
 8005c52:	69e3      	ldr	r3, [r4, #28]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	5959      	ldr	r1, [r3, r5]
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	d13b      	bne.n	8005cd4 <_reclaim_reent+0x98>
 8005c5c:	3504      	adds	r5, #4
 8005c5e:	2d80      	cmp	r5, #128	@ 0x80
 8005c60:	d1f7      	bne.n	8005c52 <_reclaim_reent+0x16>
 8005c62:	69e3      	ldr	r3, [r4, #28]
 8005c64:	4620      	mov	r0, r4
 8005c66:	68d9      	ldr	r1, [r3, #12]
 8005c68:	f000 f8b0 	bl	8005dcc <_free_r>
 8005c6c:	69e3      	ldr	r3, [r4, #28]
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	b111      	cbz	r1, 8005c78 <_reclaim_reent+0x3c>
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 f8aa 	bl	8005dcc <_free_r>
 8005c78:	6961      	ldr	r1, [r4, #20]
 8005c7a:	b111      	cbz	r1, 8005c82 <_reclaim_reent+0x46>
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 f8a5 	bl	8005dcc <_free_r>
 8005c82:	69e1      	ldr	r1, [r4, #28]
 8005c84:	b111      	cbz	r1, 8005c8c <_reclaim_reent+0x50>
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 f8a0 	bl	8005dcc <_free_r>
 8005c8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c8e:	b111      	cbz	r1, 8005c96 <_reclaim_reent+0x5a>
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f89b 	bl	8005dcc <_free_r>
 8005c96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c98:	b111      	cbz	r1, 8005ca0 <_reclaim_reent+0x64>
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 f896 	bl	8005dcc <_free_r>
 8005ca0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005ca2:	b111      	cbz	r1, 8005caa <_reclaim_reent+0x6e>
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 f891 	bl	8005dcc <_free_r>
 8005caa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005cac:	b111      	cbz	r1, 8005cb4 <_reclaim_reent+0x78>
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 f88c 	bl	8005dcc <_free_r>
 8005cb4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005cb6:	b111      	cbz	r1, 8005cbe <_reclaim_reent+0x82>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 f887 	bl	8005dcc <_free_r>
 8005cbe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005cc0:	b111      	cbz	r1, 8005cc8 <_reclaim_reent+0x8c>
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 f882 	bl	8005dcc <_free_r>
 8005cc8:	6a23      	ldr	r3, [r4, #32]
 8005cca:	b14b      	cbz	r3, 8005ce0 <_reclaim_reent+0xa4>
 8005ccc:	4620      	mov	r0, r4
 8005cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cd2:	4718      	bx	r3
 8005cd4:	680e      	ldr	r6, [r1, #0]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f878 	bl	8005dcc <_free_r>
 8005cdc:	4631      	mov	r1, r6
 8005cde:	e7bb      	b.n	8005c58 <_reclaim_reent+0x1c>
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	bf00      	nop
 8005ce4:	2000001c 	.word	0x2000001c

08005ce8 <_lseek_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	@ (8005d08 <_lseek_r+0x20>)
 8005cec:	4604      	mov	r4, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb ff4b 	bl	8001b92 <_lseek>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_lseek_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_lseek_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20004c84 	.word	0x20004c84

08005d0c <_read_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d07      	ldr	r5, [pc, #28]	@ (8005d2c <_read_r+0x20>)
 8005d10:	4604      	mov	r4, r0
 8005d12:	4608      	mov	r0, r1
 8005d14:	4611      	mov	r1, r2
 8005d16:	2200      	movs	r2, #0
 8005d18:	602a      	str	r2, [r5, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7fb fef5 	bl	8001b0a <_read>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_read_r+0x1e>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_read_r+0x1e>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20004c84 	.word	0x20004c84

08005d30 <_write_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	@ (8005d50 <_write_r+0x20>)
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7fc f8f4 	bl	8001f2c <_write>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_write_r+0x1e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_write_r+0x1e>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20004c84 	.word	0x20004c84

08005d54 <__errno>:
 8005d54:	4b01      	ldr	r3, [pc, #4]	@ (8005d5c <__errno+0x8>)
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	2000001c 	.word	0x2000001c

08005d60 <__libc_init_array>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4d0d      	ldr	r5, [pc, #52]	@ (8005d98 <__libc_init_array+0x38>)
 8005d64:	4c0d      	ldr	r4, [pc, #52]	@ (8005d9c <__libc_init_array+0x3c>)
 8005d66:	1b64      	subs	r4, r4, r5
 8005d68:	10a4      	asrs	r4, r4, #2
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	42a6      	cmp	r6, r4
 8005d6e:	d109      	bne.n	8005d84 <__libc_init_array+0x24>
 8005d70:	4d0b      	ldr	r5, [pc, #44]	@ (8005da0 <__libc_init_array+0x40>)
 8005d72:	4c0c      	ldr	r4, [pc, #48]	@ (8005da4 <__libc_init_array+0x44>)
 8005d74:	f000 fdb2 	bl	80068dc <_init>
 8005d78:	1b64      	subs	r4, r4, r5
 8005d7a:	10a4      	asrs	r4, r4, #2
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	42a6      	cmp	r6, r4
 8005d80:	d105      	bne.n	8005d8e <__libc_init_array+0x2e>
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d88:	4798      	blx	r3
 8005d8a:	3601      	adds	r6, #1
 8005d8c:	e7ee      	b.n	8005d6c <__libc_init_array+0xc>
 8005d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d92:	4798      	blx	r3
 8005d94:	3601      	adds	r6, #1
 8005d96:	e7f2      	b.n	8005d7e <__libc_init_array+0x1e>
 8005d98:	08006b10 	.word	0x08006b10
 8005d9c:	08006b10 	.word	0x08006b10
 8005da0:	08006b10 	.word	0x08006b10
 8005da4:	08006b14 	.word	0x08006b14

08005da8 <__retarget_lock_init_recursive>:
 8005da8:	4770      	bx	lr

08005daa <__retarget_lock_acquire_recursive>:
 8005daa:	4770      	bx	lr

08005dac <__retarget_lock_release_recursive>:
 8005dac:	4770      	bx	lr

08005dae <memcpy>:
 8005dae:	440a      	add	r2, r1
 8005db0:	4291      	cmp	r1, r2
 8005db2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005db6:	d100      	bne.n	8005dba <memcpy+0xc>
 8005db8:	4770      	bx	lr
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc4:	4291      	cmp	r1, r2
 8005dc6:	d1f9      	bne.n	8005dbc <memcpy+0xe>
 8005dc8:	bd10      	pop	{r4, pc}
	...

08005dcc <_free_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4605      	mov	r5, r0
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d041      	beq.n	8005e58 <_free_r+0x8c>
 8005dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd8:	1f0c      	subs	r4, r1, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bfb8      	it	lt
 8005dde:	18e4      	addlt	r4, r4, r3
 8005de0:	f000 f8e0 	bl	8005fa4 <__malloc_lock>
 8005de4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e5c <_free_r+0x90>)
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	b933      	cbnz	r3, 8005df8 <_free_r+0x2c>
 8005dea:	6063      	str	r3, [r4, #4]
 8005dec:	6014      	str	r4, [r2, #0]
 8005dee:	4628      	mov	r0, r5
 8005df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005df4:	f000 b8dc 	b.w	8005fb0 <__malloc_unlock>
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d908      	bls.n	8005e0e <_free_r+0x42>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	1821      	adds	r1, r4, r0
 8005e00:	428b      	cmp	r3, r1
 8005e02:	bf01      	itttt	eq
 8005e04:	6819      	ldreq	r1, [r3, #0]
 8005e06:	685b      	ldreq	r3, [r3, #4]
 8005e08:	1809      	addeq	r1, r1, r0
 8005e0a:	6021      	streq	r1, [r4, #0]
 8005e0c:	e7ed      	b.n	8005dea <_free_r+0x1e>
 8005e0e:	461a      	mov	r2, r3
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	b10b      	cbz	r3, 8005e18 <_free_r+0x4c>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d9fa      	bls.n	8005e0e <_free_r+0x42>
 8005e18:	6811      	ldr	r1, [r2, #0]
 8005e1a:	1850      	adds	r0, r2, r1
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	d10b      	bne.n	8005e38 <_free_r+0x6c>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	4401      	add	r1, r0
 8005e24:	1850      	adds	r0, r2, r1
 8005e26:	4283      	cmp	r3, r0
 8005e28:	6011      	str	r1, [r2, #0]
 8005e2a:	d1e0      	bne.n	8005dee <_free_r+0x22>
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	6053      	str	r3, [r2, #4]
 8005e32:	4408      	add	r0, r1
 8005e34:	6010      	str	r0, [r2, #0]
 8005e36:	e7da      	b.n	8005dee <_free_r+0x22>
 8005e38:	d902      	bls.n	8005e40 <_free_r+0x74>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	e7d6      	b.n	8005dee <_free_r+0x22>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	1821      	adds	r1, r4, r0
 8005e44:	428b      	cmp	r3, r1
 8005e46:	bf04      	itt	eq
 8005e48:	6819      	ldreq	r1, [r3, #0]
 8005e4a:	685b      	ldreq	r3, [r3, #4]
 8005e4c:	6063      	str	r3, [r4, #4]
 8005e4e:	bf04      	itt	eq
 8005e50:	1809      	addeq	r1, r1, r0
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	6054      	str	r4, [r2, #4]
 8005e56:	e7ca      	b.n	8005dee <_free_r+0x22>
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20004c90 	.word	0x20004c90

08005e60 <sbrk_aligned>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4e0f      	ldr	r6, [pc, #60]	@ (8005ea0 <sbrk_aligned+0x40>)
 8005e64:	460c      	mov	r4, r1
 8005e66:	6831      	ldr	r1, [r6, #0]
 8005e68:	4605      	mov	r5, r0
 8005e6a:	b911      	cbnz	r1, 8005e72 <sbrk_aligned+0x12>
 8005e6c:	f000 fcda 	bl	8006824 <_sbrk_r>
 8005e70:	6030      	str	r0, [r6, #0]
 8005e72:	4621      	mov	r1, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 fcd5 	bl	8006824 <_sbrk_r>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d103      	bne.n	8005e86 <sbrk_aligned+0x26>
 8005e7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e82:	4620      	mov	r0, r4
 8005e84:	bd70      	pop	{r4, r5, r6, pc}
 8005e86:	1cc4      	adds	r4, r0, #3
 8005e88:	f024 0403 	bic.w	r4, r4, #3
 8005e8c:	42a0      	cmp	r0, r4
 8005e8e:	d0f8      	beq.n	8005e82 <sbrk_aligned+0x22>
 8005e90:	1a21      	subs	r1, r4, r0
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 fcc6 	bl	8006824 <_sbrk_r>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d1f2      	bne.n	8005e82 <sbrk_aligned+0x22>
 8005e9c:	e7ef      	b.n	8005e7e <sbrk_aligned+0x1e>
 8005e9e:	bf00      	nop
 8005ea0:	20004c8c 	.word	0x20004c8c

08005ea4 <_malloc_r>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	1ccd      	adds	r5, r1, #3
 8005eaa:	f025 0503 	bic.w	r5, r5, #3
 8005eae:	3508      	adds	r5, #8
 8005eb0:	2d0c      	cmp	r5, #12
 8005eb2:	bf38      	it	cc
 8005eb4:	250c      	movcc	r5, #12
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	4606      	mov	r6, r0
 8005eba:	db01      	blt.n	8005ec0 <_malloc_r+0x1c>
 8005ebc:	42a9      	cmp	r1, r5
 8005ebe:	d904      	bls.n	8005eca <_malloc_r+0x26>
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fa0 <_malloc_r+0xfc>
 8005ece:	f000 f869 	bl	8005fa4 <__malloc_lock>
 8005ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ed6:	461c      	mov	r4, r3
 8005ed8:	bb44      	cbnz	r4, 8005f2c <_malloc_r+0x88>
 8005eda:	4629      	mov	r1, r5
 8005edc:	4630      	mov	r0, r6
 8005ede:	f7ff ffbf 	bl	8005e60 <sbrk_aligned>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	d158      	bne.n	8005f9a <_malloc_r+0xf6>
 8005ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8005eec:	4627      	mov	r7, r4
 8005eee:	2f00      	cmp	r7, #0
 8005ef0:	d143      	bne.n	8005f7a <_malloc_r+0xd6>
 8005ef2:	2c00      	cmp	r4, #0
 8005ef4:	d04b      	beq.n	8005f8e <_malloc_r+0xea>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	4639      	mov	r1, r7
 8005efa:	4630      	mov	r0, r6
 8005efc:	eb04 0903 	add.w	r9, r4, r3
 8005f00:	f000 fc90 	bl	8006824 <_sbrk_r>
 8005f04:	4581      	cmp	r9, r0
 8005f06:	d142      	bne.n	8005f8e <_malloc_r+0xea>
 8005f08:	6821      	ldr	r1, [r4, #0]
 8005f0a:	1a6d      	subs	r5, r5, r1
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ffa6 	bl	8005e60 <sbrk_aligned>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d03a      	beq.n	8005f8e <_malloc_r+0xea>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	442b      	add	r3, r5
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	bb62      	cbnz	r2, 8005f80 <_malloc_r+0xdc>
 8005f26:	f8c8 7000 	str.w	r7, [r8]
 8005f2a:	e00f      	b.n	8005f4c <_malloc_r+0xa8>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	1b52      	subs	r2, r2, r5
 8005f30:	d420      	bmi.n	8005f74 <_malloc_r+0xd0>
 8005f32:	2a0b      	cmp	r2, #11
 8005f34:	d917      	bls.n	8005f66 <_malloc_r+0xc2>
 8005f36:	1961      	adds	r1, r4, r5
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	6025      	str	r5, [r4, #0]
 8005f3c:	bf18      	it	ne
 8005f3e:	6059      	strne	r1, [r3, #4]
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	bf08      	it	eq
 8005f44:	f8c8 1000 	streq.w	r1, [r8]
 8005f48:	5162      	str	r2, [r4, r5]
 8005f4a:	604b      	str	r3, [r1, #4]
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 f82f 	bl	8005fb0 <__malloc_unlock>
 8005f52:	f104 000b 	add.w	r0, r4, #11
 8005f56:	1d23      	adds	r3, r4, #4
 8005f58:	f020 0007 	bic.w	r0, r0, #7
 8005f5c:	1ac2      	subs	r2, r0, r3
 8005f5e:	bf1c      	itt	ne
 8005f60:	1a1b      	subne	r3, r3, r0
 8005f62:	50a3      	strne	r3, [r4, r2]
 8005f64:	e7af      	b.n	8005ec6 <_malloc_r+0x22>
 8005f66:	6862      	ldr	r2, [r4, #4]
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	bf0c      	ite	eq
 8005f6c:	f8c8 2000 	streq.w	r2, [r8]
 8005f70:	605a      	strne	r2, [r3, #4]
 8005f72:	e7eb      	b.n	8005f4c <_malloc_r+0xa8>
 8005f74:	4623      	mov	r3, r4
 8005f76:	6864      	ldr	r4, [r4, #4]
 8005f78:	e7ae      	b.n	8005ed8 <_malloc_r+0x34>
 8005f7a:	463c      	mov	r4, r7
 8005f7c:	687f      	ldr	r7, [r7, #4]
 8005f7e:	e7b6      	b.n	8005eee <_malloc_r+0x4a>
 8005f80:	461a      	mov	r2, r3
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	d1fb      	bne.n	8005f80 <_malloc_r+0xdc>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6053      	str	r3, [r2, #4]
 8005f8c:	e7de      	b.n	8005f4c <_malloc_r+0xa8>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	4630      	mov	r0, r6
 8005f94:	f000 f80c 	bl	8005fb0 <__malloc_unlock>
 8005f98:	e794      	b.n	8005ec4 <_malloc_r+0x20>
 8005f9a:	6005      	str	r5, [r0, #0]
 8005f9c:	e7d6      	b.n	8005f4c <_malloc_r+0xa8>
 8005f9e:	bf00      	nop
 8005fa0:	20004c90 	.word	0x20004c90

08005fa4 <__malloc_lock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	@ (8005fac <__malloc_lock+0x8>)
 8005fa6:	f7ff bf00 	b.w	8005daa <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	20004c88 	.word	0x20004c88

08005fb0 <__malloc_unlock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	@ (8005fb8 <__malloc_unlock+0x8>)
 8005fb2:	f7ff befb 	b.w	8005dac <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20004c88 	.word	0x20004c88

08005fbc <__sfputc_r>:
 8005fbc:	6893      	ldr	r3, [r2, #8]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	b410      	push	{r4}
 8005fc4:	6093      	str	r3, [r2, #8]
 8005fc6:	da08      	bge.n	8005fda <__sfputc_r+0x1e>
 8005fc8:	6994      	ldr	r4, [r2, #24]
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	db01      	blt.n	8005fd2 <__sfputc_r+0x16>
 8005fce:	290a      	cmp	r1, #10
 8005fd0:	d103      	bne.n	8005fda <__sfputc_r+0x1e>
 8005fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fd6:	f7ff bd84 	b.w	8005ae2 <__swbuf_r>
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	1c58      	adds	r0, r3, #1
 8005fde:	6010      	str	r0, [r2, #0]
 8005fe0:	7019      	strb	r1, [r3, #0]
 8005fe2:	4608      	mov	r0, r1
 8005fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <__sfputs_r>:
 8005fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fec:	4606      	mov	r6, r0
 8005fee:	460f      	mov	r7, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	18d5      	adds	r5, r2, r3
 8005ff4:	42ac      	cmp	r4, r5
 8005ff6:	d101      	bne.n	8005ffc <__sfputs_r+0x12>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e007      	b.n	800600c <__sfputs_r+0x22>
 8005ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006000:	463a      	mov	r2, r7
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff ffda 	bl	8005fbc <__sfputc_r>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d1f3      	bne.n	8005ff4 <__sfputs_r+0xa>
 800600c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006010 <_vfiprintf_r>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	460d      	mov	r5, r1
 8006016:	b09d      	sub	sp, #116	@ 0x74
 8006018:	4614      	mov	r4, r2
 800601a:	4698      	mov	r8, r3
 800601c:	4606      	mov	r6, r0
 800601e:	b118      	cbz	r0, 8006028 <_vfiprintf_r+0x18>
 8006020:	6a03      	ldr	r3, [r0, #32]
 8006022:	b90b      	cbnz	r3, 8006028 <_vfiprintf_r+0x18>
 8006024:	f7ff fc6c 	bl	8005900 <__sinit>
 8006028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800602a:	07d9      	lsls	r1, r3, #31
 800602c:	d405      	bmi.n	800603a <_vfiprintf_r+0x2a>
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	059a      	lsls	r2, r3, #22
 8006032:	d402      	bmi.n	800603a <_vfiprintf_r+0x2a>
 8006034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006036:	f7ff feb8 	bl	8005daa <__retarget_lock_acquire_recursive>
 800603a:	89ab      	ldrh	r3, [r5, #12]
 800603c:	071b      	lsls	r3, r3, #28
 800603e:	d501      	bpl.n	8006044 <_vfiprintf_r+0x34>
 8006040:	692b      	ldr	r3, [r5, #16]
 8006042:	b99b      	cbnz	r3, 800606c <_vfiprintf_r+0x5c>
 8006044:	4629      	mov	r1, r5
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff fd8a 	bl	8005b60 <__swsetup_r>
 800604c:	b170      	cbz	r0, 800606c <_vfiprintf_r+0x5c>
 800604e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006050:	07dc      	lsls	r4, r3, #31
 8006052:	d504      	bpl.n	800605e <_vfiprintf_r+0x4e>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006058:	b01d      	add	sp, #116	@ 0x74
 800605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605e:	89ab      	ldrh	r3, [r5, #12]
 8006060:	0598      	lsls	r0, r3, #22
 8006062:	d4f7      	bmi.n	8006054 <_vfiprintf_r+0x44>
 8006064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006066:	f7ff fea1 	bl	8005dac <__retarget_lock_release_recursive>
 800606a:	e7f3      	b.n	8006054 <_vfiprintf_r+0x44>
 800606c:	2300      	movs	r3, #0
 800606e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006070:	2320      	movs	r3, #32
 8006072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006076:	f8cd 800c 	str.w	r8, [sp, #12]
 800607a:	2330      	movs	r3, #48	@ 0x30
 800607c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800622c <_vfiprintf_r+0x21c>
 8006080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006084:	f04f 0901 	mov.w	r9, #1
 8006088:	4623      	mov	r3, r4
 800608a:	469a      	mov	sl, r3
 800608c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006090:	b10a      	cbz	r2, 8006096 <_vfiprintf_r+0x86>
 8006092:	2a25      	cmp	r2, #37	@ 0x25
 8006094:	d1f9      	bne.n	800608a <_vfiprintf_r+0x7a>
 8006096:	ebba 0b04 	subs.w	fp, sl, r4
 800609a:	d00b      	beq.n	80060b4 <_vfiprintf_r+0xa4>
 800609c:	465b      	mov	r3, fp
 800609e:	4622      	mov	r2, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff ffa1 	bl	8005fea <__sfputs_r>
 80060a8:	3001      	adds	r0, #1
 80060aa:	f000 80a7 	beq.w	80061fc <_vfiprintf_r+0x1ec>
 80060ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060b0:	445a      	add	r2, fp
 80060b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80060b4:	f89a 3000 	ldrb.w	r3, [sl]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 809f 	beq.w	80061fc <_vfiprintf_r+0x1ec>
 80060be:	2300      	movs	r3, #0
 80060c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060c8:	f10a 0a01 	add.w	sl, sl, #1
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	9307      	str	r3, [sp, #28]
 80060d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80060d6:	4654      	mov	r4, sl
 80060d8:	2205      	movs	r2, #5
 80060da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060de:	4853      	ldr	r0, [pc, #332]	@ (800622c <_vfiprintf_r+0x21c>)
 80060e0:	f7fa f896 	bl	8000210 <memchr>
 80060e4:	9a04      	ldr	r2, [sp, #16]
 80060e6:	b9d8      	cbnz	r0, 8006120 <_vfiprintf_r+0x110>
 80060e8:	06d1      	lsls	r1, r2, #27
 80060ea:	bf44      	itt	mi
 80060ec:	2320      	movmi	r3, #32
 80060ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060f2:	0713      	lsls	r3, r2, #28
 80060f4:	bf44      	itt	mi
 80060f6:	232b      	movmi	r3, #43	@ 0x2b
 80060f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006100:	2b2a      	cmp	r3, #42	@ 0x2a
 8006102:	d015      	beq.n	8006130 <_vfiprintf_r+0x120>
 8006104:	9a07      	ldr	r2, [sp, #28]
 8006106:	4654      	mov	r4, sl
 8006108:	2000      	movs	r0, #0
 800610a:	f04f 0c0a 	mov.w	ip, #10
 800610e:	4621      	mov	r1, r4
 8006110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006114:	3b30      	subs	r3, #48	@ 0x30
 8006116:	2b09      	cmp	r3, #9
 8006118:	d94b      	bls.n	80061b2 <_vfiprintf_r+0x1a2>
 800611a:	b1b0      	cbz	r0, 800614a <_vfiprintf_r+0x13a>
 800611c:	9207      	str	r2, [sp, #28]
 800611e:	e014      	b.n	800614a <_vfiprintf_r+0x13a>
 8006120:	eba0 0308 	sub.w	r3, r0, r8
 8006124:	fa09 f303 	lsl.w	r3, r9, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	46a2      	mov	sl, r4
 800612e:	e7d2      	b.n	80060d6 <_vfiprintf_r+0xc6>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d19      	adds	r1, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9103      	str	r1, [sp, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	bfbb      	ittet	lt
 800613c:	425b      	neglt	r3, r3
 800613e:	f042 0202 	orrlt.w	r2, r2, #2
 8006142:	9307      	strge	r3, [sp, #28]
 8006144:	9307      	strlt	r3, [sp, #28]
 8006146:	bfb8      	it	lt
 8006148:	9204      	strlt	r2, [sp, #16]
 800614a:	7823      	ldrb	r3, [r4, #0]
 800614c:	2b2e      	cmp	r3, #46	@ 0x2e
 800614e:	d10a      	bne.n	8006166 <_vfiprintf_r+0x156>
 8006150:	7863      	ldrb	r3, [r4, #1]
 8006152:	2b2a      	cmp	r3, #42	@ 0x2a
 8006154:	d132      	bne.n	80061bc <_vfiprintf_r+0x1ac>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	9203      	str	r2, [sp, #12]
 800615e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006162:	3402      	adds	r4, #2
 8006164:	9305      	str	r3, [sp, #20]
 8006166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800623c <_vfiprintf_r+0x22c>
 800616a:	7821      	ldrb	r1, [r4, #0]
 800616c:	2203      	movs	r2, #3
 800616e:	4650      	mov	r0, sl
 8006170:	f7fa f84e 	bl	8000210 <memchr>
 8006174:	b138      	cbz	r0, 8006186 <_vfiprintf_r+0x176>
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	eba0 000a 	sub.w	r0, r0, sl
 800617c:	2240      	movs	r2, #64	@ 0x40
 800617e:	4082      	lsls	r2, r0
 8006180:	4313      	orrs	r3, r2
 8006182:	3401      	adds	r4, #1
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800618a:	4829      	ldr	r0, [pc, #164]	@ (8006230 <_vfiprintf_r+0x220>)
 800618c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006190:	2206      	movs	r2, #6
 8006192:	f7fa f83d 	bl	8000210 <memchr>
 8006196:	2800      	cmp	r0, #0
 8006198:	d03f      	beq.n	800621a <_vfiprintf_r+0x20a>
 800619a:	4b26      	ldr	r3, [pc, #152]	@ (8006234 <_vfiprintf_r+0x224>)
 800619c:	bb1b      	cbnz	r3, 80061e6 <_vfiprintf_r+0x1d6>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	3307      	adds	r3, #7
 80061a2:	f023 0307 	bic.w	r3, r3, #7
 80061a6:	3308      	adds	r3, #8
 80061a8:	9303      	str	r3, [sp, #12]
 80061aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ac:	443b      	add	r3, r7
 80061ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80061b0:	e76a      	b.n	8006088 <_vfiprintf_r+0x78>
 80061b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061b6:	460c      	mov	r4, r1
 80061b8:	2001      	movs	r0, #1
 80061ba:	e7a8      	b.n	800610e <_vfiprintf_r+0xfe>
 80061bc:	2300      	movs	r3, #0
 80061be:	3401      	adds	r4, #1
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	4619      	mov	r1, r3
 80061c4:	f04f 0c0a 	mov.w	ip, #10
 80061c8:	4620      	mov	r0, r4
 80061ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ce:	3a30      	subs	r2, #48	@ 0x30
 80061d0:	2a09      	cmp	r2, #9
 80061d2:	d903      	bls.n	80061dc <_vfiprintf_r+0x1cc>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0c6      	beq.n	8006166 <_vfiprintf_r+0x156>
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	e7c4      	b.n	8006166 <_vfiprintf_r+0x156>
 80061dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80061e0:	4604      	mov	r4, r0
 80061e2:	2301      	movs	r3, #1
 80061e4:	e7f0      	b.n	80061c8 <_vfiprintf_r+0x1b8>
 80061e6:	ab03      	add	r3, sp, #12
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	462a      	mov	r2, r5
 80061ec:	4b12      	ldr	r3, [pc, #72]	@ (8006238 <_vfiprintf_r+0x228>)
 80061ee:	a904      	add	r1, sp, #16
 80061f0:	4630      	mov	r0, r6
 80061f2:	f3af 8000 	nop.w
 80061f6:	4607      	mov	r7, r0
 80061f8:	1c78      	adds	r0, r7, #1
 80061fa:	d1d6      	bne.n	80061aa <_vfiprintf_r+0x19a>
 80061fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061fe:	07d9      	lsls	r1, r3, #31
 8006200:	d405      	bmi.n	800620e <_vfiprintf_r+0x1fe>
 8006202:	89ab      	ldrh	r3, [r5, #12]
 8006204:	059a      	lsls	r2, r3, #22
 8006206:	d402      	bmi.n	800620e <_vfiprintf_r+0x1fe>
 8006208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800620a:	f7ff fdcf 	bl	8005dac <__retarget_lock_release_recursive>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	065b      	lsls	r3, r3, #25
 8006212:	f53f af1f 	bmi.w	8006054 <_vfiprintf_r+0x44>
 8006216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006218:	e71e      	b.n	8006058 <_vfiprintf_r+0x48>
 800621a:	ab03      	add	r3, sp, #12
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	462a      	mov	r2, r5
 8006220:	4b05      	ldr	r3, [pc, #20]	@ (8006238 <_vfiprintf_r+0x228>)
 8006222:	a904      	add	r1, sp, #16
 8006224:	4630      	mov	r0, r6
 8006226:	f000 f879 	bl	800631c <_printf_i>
 800622a:	e7e4      	b.n	80061f6 <_vfiprintf_r+0x1e6>
 800622c:	08006a04 	.word	0x08006a04
 8006230:	08006a0e 	.word	0x08006a0e
 8006234:	00000000 	.word	0x00000000
 8006238:	08005feb 	.word	0x08005feb
 800623c:	08006a0a 	.word	0x08006a0a

08006240 <_printf_common>:
 8006240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	4616      	mov	r6, r2
 8006246:	4698      	mov	r8, r3
 8006248:	688a      	ldr	r2, [r1, #8]
 800624a:	690b      	ldr	r3, [r1, #16]
 800624c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006250:	4293      	cmp	r3, r2
 8006252:	bfb8      	it	lt
 8006254:	4613      	movlt	r3, r2
 8006256:	6033      	str	r3, [r6, #0]
 8006258:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800625c:	4607      	mov	r7, r0
 800625e:	460c      	mov	r4, r1
 8006260:	b10a      	cbz	r2, 8006266 <_printf_common+0x26>
 8006262:	3301      	adds	r3, #1
 8006264:	6033      	str	r3, [r6, #0]
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	0699      	lsls	r1, r3, #26
 800626a:	bf42      	ittt	mi
 800626c:	6833      	ldrmi	r3, [r6, #0]
 800626e:	3302      	addmi	r3, #2
 8006270:	6033      	strmi	r3, [r6, #0]
 8006272:	6825      	ldr	r5, [r4, #0]
 8006274:	f015 0506 	ands.w	r5, r5, #6
 8006278:	d106      	bne.n	8006288 <_printf_common+0x48>
 800627a:	f104 0a19 	add.w	sl, r4, #25
 800627e:	68e3      	ldr	r3, [r4, #12]
 8006280:	6832      	ldr	r2, [r6, #0]
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	42ab      	cmp	r3, r5
 8006286:	dc26      	bgt.n	80062d6 <_printf_common+0x96>
 8006288:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	3b00      	subs	r3, #0
 8006290:	bf18      	it	ne
 8006292:	2301      	movne	r3, #1
 8006294:	0692      	lsls	r2, r2, #26
 8006296:	d42b      	bmi.n	80062f0 <_printf_common+0xb0>
 8006298:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800629c:	4641      	mov	r1, r8
 800629e:	4638      	mov	r0, r7
 80062a0:	47c8      	blx	r9
 80062a2:	3001      	adds	r0, #1
 80062a4:	d01e      	beq.n	80062e4 <_printf_common+0xa4>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	6922      	ldr	r2, [r4, #16]
 80062aa:	f003 0306 	and.w	r3, r3, #6
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	bf02      	ittt	eq
 80062b2:	68e5      	ldreq	r5, [r4, #12]
 80062b4:	6833      	ldreq	r3, [r6, #0]
 80062b6:	1aed      	subeq	r5, r5, r3
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	bf0c      	ite	eq
 80062bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062c0:	2500      	movne	r5, #0
 80062c2:	4293      	cmp	r3, r2
 80062c4:	bfc4      	itt	gt
 80062c6:	1a9b      	subgt	r3, r3, r2
 80062c8:	18ed      	addgt	r5, r5, r3
 80062ca:	2600      	movs	r6, #0
 80062cc:	341a      	adds	r4, #26
 80062ce:	42b5      	cmp	r5, r6
 80062d0:	d11a      	bne.n	8006308 <_printf_common+0xc8>
 80062d2:	2000      	movs	r0, #0
 80062d4:	e008      	b.n	80062e8 <_printf_common+0xa8>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4652      	mov	r2, sl
 80062da:	4641      	mov	r1, r8
 80062dc:	4638      	mov	r0, r7
 80062de:	47c8      	blx	r9
 80062e0:	3001      	adds	r0, #1
 80062e2:	d103      	bne.n	80062ec <_printf_common+0xac>
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ec:	3501      	adds	r5, #1
 80062ee:	e7c6      	b.n	800627e <_printf_common+0x3e>
 80062f0:	18e1      	adds	r1, r4, r3
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	2030      	movs	r0, #48	@ 0x30
 80062f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062fa:	4422      	add	r2, r4
 80062fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006300:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006304:	3302      	adds	r3, #2
 8006306:	e7c7      	b.n	8006298 <_printf_common+0x58>
 8006308:	2301      	movs	r3, #1
 800630a:	4622      	mov	r2, r4
 800630c:	4641      	mov	r1, r8
 800630e:	4638      	mov	r0, r7
 8006310:	47c8      	blx	r9
 8006312:	3001      	adds	r0, #1
 8006314:	d0e6      	beq.n	80062e4 <_printf_common+0xa4>
 8006316:	3601      	adds	r6, #1
 8006318:	e7d9      	b.n	80062ce <_printf_common+0x8e>
	...

0800631c <_printf_i>:
 800631c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	7e0f      	ldrb	r7, [r1, #24]
 8006322:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006324:	2f78      	cmp	r7, #120	@ 0x78
 8006326:	4691      	mov	r9, r2
 8006328:	4680      	mov	r8, r0
 800632a:	460c      	mov	r4, r1
 800632c:	469a      	mov	sl, r3
 800632e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006332:	d807      	bhi.n	8006344 <_printf_i+0x28>
 8006334:	2f62      	cmp	r7, #98	@ 0x62
 8006336:	d80a      	bhi.n	800634e <_printf_i+0x32>
 8006338:	2f00      	cmp	r7, #0
 800633a:	f000 80d2 	beq.w	80064e2 <_printf_i+0x1c6>
 800633e:	2f58      	cmp	r7, #88	@ 0x58
 8006340:	f000 80b9 	beq.w	80064b6 <_printf_i+0x19a>
 8006344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006348:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800634c:	e03a      	b.n	80063c4 <_printf_i+0xa8>
 800634e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006352:	2b15      	cmp	r3, #21
 8006354:	d8f6      	bhi.n	8006344 <_printf_i+0x28>
 8006356:	a101      	add	r1, pc, #4	@ (adr r1, 800635c <_printf_i+0x40>)
 8006358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800635c:	080063b5 	.word	0x080063b5
 8006360:	080063c9 	.word	0x080063c9
 8006364:	08006345 	.word	0x08006345
 8006368:	08006345 	.word	0x08006345
 800636c:	08006345 	.word	0x08006345
 8006370:	08006345 	.word	0x08006345
 8006374:	080063c9 	.word	0x080063c9
 8006378:	08006345 	.word	0x08006345
 800637c:	08006345 	.word	0x08006345
 8006380:	08006345 	.word	0x08006345
 8006384:	08006345 	.word	0x08006345
 8006388:	080064c9 	.word	0x080064c9
 800638c:	080063f3 	.word	0x080063f3
 8006390:	08006483 	.word	0x08006483
 8006394:	08006345 	.word	0x08006345
 8006398:	08006345 	.word	0x08006345
 800639c:	080064eb 	.word	0x080064eb
 80063a0:	08006345 	.word	0x08006345
 80063a4:	080063f3 	.word	0x080063f3
 80063a8:	08006345 	.word	0x08006345
 80063ac:	08006345 	.word	0x08006345
 80063b0:	0800648b 	.word	0x0800648b
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	1d1a      	adds	r2, r3, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6032      	str	r2, [r6, #0]
 80063bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063c4:	2301      	movs	r3, #1
 80063c6:	e09d      	b.n	8006504 <_printf_i+0x1e8>
 80063c8:	6833      	ldr	r3, [r6, #0]
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	1d19      	adds	r1, r3, #4
 80063ce:	6031      	str	r1, [r6, #0]
 80063d0:	0606      	lsls	r6, r0, #24
 80063d2:	d501      	bpl.n	80063d8 <_printf_i+0xbc>
 80063d4:	681d      	ldr	r5, [r3, #0]
 80063d6:	e003      	b.n	80063e0 <_printf_i+0xc4>
 80063d8:	0645      	lsls	r5, r0, #25
 80063da:	d5fb      	bpl.n	80063d4 <_printf_i+0xb8>
 80063dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	da03      	bge.n	80063ec <_printf_i+0xd0>
 80063e4:	232d      	movs	r3, #45	@ 0x2d
 80063e6:	426d      	negs	r5, r5
 80063e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ec:	4859      	ldr	r0, [pc, #356]	@ (8006554 <_printf_i+0x238>)
 80063ee:	230a      	movs	r3, #10
 80063f0:	e011      	b.n	8006416 <_printf_i+0xfa>
 80063f2:	6821      	ldr	r1, [r4, #0]
 80063f4:	6833      	ldr	r3, [r6, #0]
 80063f6:	0608      	lsls	r0, r1, #24
 80063f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80063fc:	d402      	bmi.n	8006404 <_printf_i+0xe8>
 80063fe:	0649      	lsls	r1, r1, #25
 8006400:	bf48      	it	mi
 8006402:	b2ad      	uxthmi	r5, r5
 8006404:	2f6f      	cmp	r7, #111	@ 0x6f
 8006406:	4853      	ldr	r0, [pc, #332]	@ (8006554 <_printf_i+0x238>)
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	bf14      	ite	ne
 800640c:	230a      	movne	r3, #10
 800640e:	2308      	moveq	r3, #8
 8006410:	2100      	movs	r1, #0
 8006412:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006416:	6866      	ldr	r6, [r4, #4]
 8006418:	60a6      	str	r6, [r4, #8]
 800641a:	2e00      	cmp	r6, #0
 800641c:	bfa2      	ittt	ge
 800641e:	6821      	ldrge	r1, [r4, #0]
 8006420:	f021 0104 	bicge.w	r1, r1, #4
 8006424:	6021      	strge	r1, [r4, #0]
 8006426:	b90d      	cbnz	r5, 800642c <_printf_i+0x110>
 8006428:	2e00      	cmp	r6, #0
 800642a:	d04b      	beq.n	80064c4 <_printf_i+0x1a8>
 800642c:	4616      	mov	r6, r2
 800642e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006432:	fb03 5711 	mls	r7, r3, r1, r5
 8006436:	5dc7      	ldrb	r7, [r0, r7]
 8006438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800643c:	462f      	mov	r7, r5
 800643e:	42bb      	cmp	r3, r7
 8006440:	460d      	mov	r5, r1
 8006442:	d9f4      	bls.n	800642e <_printf_i+0x112>
 8006444:	2b08      	cmp	r3, #8
 8006446:	d10b      	bne.n	8006460 <_printf_i+0x144>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	07df      	lsls	r7, r3, #31
 800644c:	d508      	bpl.n	8006460 <_printf_i+0x144>
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	6861      	ldr	r1, [r4, #4]
 8006452:	4299      	cmp	r1, r3
 8006454:	bfde      	ittt	le
 8006456:	2330      	movle	r3, #48	@ 0x30
 8006458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800645c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006460:	1b92      	subs	r2, r2, r6
 8006462:	6122      	str	r2, [r4, #16]
 8006464:	f8cd a000 	str.w	sl, [sp]
 8006468:	464b      	mov	r3, r9
 800646a:	aa03      	add	r2, sp, #12
 800646c:	4621      	mov	r1, r4
 800646e:	4640      	mov	r0, r8
 8006470:	f7ff fee6 	bl	8006240 <_printf_common>
 8006474:	3001      	adds	r0, #1
 8006476:	d14a      	bne.n	800650e <_printf_i+0x1f2>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800647c:	b004      	add	sp, #16
 800647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	f043 0320 	orr.w	r3, r3, #32
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	4833      	ldr	r0, [pc, #204]	@ (8006558 <_printf_i+0x23c>)
 800648c:	2778      	movs	r7, #120	@ 0x78
 800648e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	6831      	ldr	r1, [r6, #0]
 8006496:	061f      	lsls	r7, r3, #24
 8006498:	f851 5b04 	ldr.w	r5, [r1], #4
 800649c:	d402      	bmi.n	80064a4 <_printf_i+0x188>
 800649e:	065f      	lsls	r7, r3, #25
 80064a0:	bf48      	it	mi
 80064a2:	b2ad      	uxthmi	r5, r5
 80064a4:	6031      	str	r1, [r6, #0]
 80064a6:	07d9      	lsls	r1, r3, #31
 80064a8:	bf44      	itt	mi
 80064aa:	f043 0320 	orrmi.w	r3, r3, #32
 80064ae:	6023      	strmi	r3, [r4, #0]
 80064b0:	b11d      	cbz	r5, 80064ba <_printf_i+0x19e>
 80064b2:	2310      	movs	r3, #16
 80064b4:	e7ac      	b.n	8006410 <_printf_i+0xf4>
 80064b6:	4827      	ldr	r0, [pc, #156]	@ (8006554 <_printf_i+0x238>)
 80064b8:	e7e9      	b.n	800648e <_printf_i+0x172>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	f023 0320 	bic.w	r3, r3, #32
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	e7f6      	b.n	80064b2 <_printf_i+0x196>
 80064c4:	4616      	mov	r6, r2
 80064c6:	e7bd      	b.n	8006444 <_printf_i+0x128>
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	6825      	ldr	r5, [r4, #0]
 80064cc:	6961      	ldr	r1, [r4, #20]
 80064ce:	1d18      	adds	r0, r3, #4
 80064d0:	6030      	str	r0, [r6, #0]
 80064d2:	062e      	lsls	r6, r5, #24
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	d501      	bpl.n	80064dc <_printf_i+0x1c0>
 80064d8:	6019      	str	r1, [r3, #0]
 80064da:	e002      	b.n	80064e2 <_printf_i+0x1c6>
 80064dc:	0668      	lsls	r0, r5, #25
 80064de:	d5fb      	bpl.n	80064d8 <_printf_i+0x1bc>
 80064e0:	8019      	strh	r1, [r3, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	4616      	mov	r6, r2
 80064e8:	e7bc      	b.n	8006464 <_printf_i+0x148>
 80064ea:	6833      	ldr	r3, [r6, #0]
 80064ec:	1d1a      	adds	r2, r3, #4
 80064ee:	6032      	str	r2, [r6, #0]
 80064f0:	681e      	ldr	r6, [r3, #0]
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	2100      	movs	r1, #0
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7f9 fe8a 	bl	8000210 <memchr>
 80064fc:	b108      	cbz	r0, 8006502 <_printf_i+0x1e6>
 80064fe:	1b80      	subs	r0, r0, r6
 8006500:	6060      	str	r0, [r4, #4]
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	2300      	movs	r3, #0
 8006508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800650c:	e7aa      	b.n	8006464 <_printf_i+0x148>
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	4632      	mov	r2, r6
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	47d0      	blx	sl
 8006518:	3001      	adds	r0, #1
 800651a:	d0ad      	beq.n	8006478 <_printf_i+0x15c>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	079b      	lsls	r3, r3, #30
 8006520:	d413      	bmi.n	800654a <_printf_i+0x22e>
 8006522:	68e0      	ldr	r0, [r4, #12]
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	4298      	cmp	r0, r3
 8006528:	bfb8      	it	lt
 800652a:	4618      	movlt	r0, r3
 800652c:	e7a6      	b.n	800647c <_printf_i+0x160>
 800652e:	2301      	movs	r3, #1
 8006530:	4632      	mov	r2, r6
 8006532:	4649      	mov	r1, r9
 8006534:	4640      	mov	r0, r8
 8006536:	47d0      	blx	sl
 8006538:	3001      	adds	r0, #1
 800653a:	d09d      	beq.n	8006478 <_printf_i+0x15c>
 800653c:	3501      	adds	r5, #1
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	9903      	ldr	r1, [sp, #12]
 8006542:	1a5b      	subs	r3, r3, r1
 8006544:	42ab      	cmp	r3, r5
 8006546:	dcf2      	bgt.n	800652e <_printf_i+0x212>
 8006548:	e7eb      	b.n	8006522 <_printf_i+0x206>
 800654a:	2500      	movs	r5, #0
 800654c:	f104 0619 	add.w	r6, r4, #25
 8006550:	e7f5      	b.n	800653e <_printf_i+0x222>
 8006552:	bf00      	nop
 8006554:	08006a15 	.word	0x08006a15
 8006558:	08006a26 	.word	0x08006a26

0800655c <__sflush_r>:
 800655c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	0716      	lsls	r6, r2, #28
 8006566:	4605      	mov	r5, r0
 8006568:	460c      	mov	r4, r1
 800656a:	d454      	bmi.n	8006616 <__sflush_r+0xba>
 800656c:	684b      	ldr	r3, [r1, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	dc02      	bgt.n	8006578 <__sflush_r+0x1c>
 8006572:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	dd48      	ble.n	800660a <__sflush_r+0xae>
 8006578:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800657a:	2e00      	cmp	r6, #0
 800657c:	d045      	beq.n	800660a <__sflush_r+0xae>
 800657e:	2300      	movs	r3, #0
 8006580:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006584:	682f      	ldr	r7, [r5, #0]
 8006586:	6a21      	ldr	r1, [r4, #32]
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	d030      	beq.n	80065ee <__sflush_r+0x92>
 800658c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	0759      	lsls	r1, r3, #29
 8006592:	d505      	bpl.n	80065a0 <__sflush_r+0x44>
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800659a:	b10b      	cbz	r3, 80065a0 <__sflush_r+0x44>
 800659c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065a4:	6a21      	ldr	r1, [r4, #32]
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b0      	blx	r6
 80065aa:	1c43      	adds	r3, r0, #1
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	d106      	bne.n	80065be <__sflush_r+0x62>
 80065b0:	6829      	ldr	r1, [r5, #0]
 80065b2:	291d      	cmp	r1, #29
 80065b4:	d82b      	bhi.n	800660e <__sflush_r+0xb2>
 80065b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006660 <__sflush_r+0x104>)
 80065b8:	410a      	asrs	r2, r1
 80065ba:	07d6      	lsls	r6, r2, #31
 80065bc:	d427      	bmi.n	800660e <__sflush_r+0xb2>
 80065be:	2200      	movs	r2, #0
 80065c0:	6062      	str	r2, [r4, #4]
 80065c2:	04d9      	lsls	r1, r3, #19
 80065c4:	6922      	ldr	r2, [r4, #16]
 80065c6:	6022      	str	r2, [r4, #0]
 80065c8:	d504      	bpl.n	80065d4 <__sflush_r+0x78>
 80065ca:	1c42      	adds	r2, r0, #1
 80065cc:	d101      	bne.n	80065d2 <__sflush_r+0x76>
 80065ce:	682b      	ldr	r3, [r5, #0]
 80065d0:	b903      	cbnz	r3, 80065d4 <__sflush_r+0x78>
 80065d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80065d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065d6:	602f      	str	r7, [r5, #0]
 80065d8:	b1b9      	cbz	r1, 800660a <__sflush_r+0xae>
 80065da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065de:	4299      	cmp	r1, r3
 80065e0:	d002      	beq.n	80065e8 <__sflush_r+0x8c>
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7ff fbf2 	bl	8005dcc <_free_r>
 80065e8:	2300      	movs	r3, #0
 80065ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80065ec:	e00d      	b.n	800660a <__sflush_r+0xae>
 80065ee:	2301      	movs	r3, #1
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b0      	blx	r6
 80065f4:	4602      	mov	r2, r0
 80065f6:	1c50      	adds	r0, r2, #1
 80065f8:	d1c9      	bne.n	800658e <__sflush_r+0x32>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0c6      	beq.n	800658e <__sflush_r+0x32>
 8006600:	2b1d      	cmp	r3, #29
 8006602:	d001      	beq.n	8006608 <__sflush_r+0xac>
 8006604:	2b16      	cmp	r3, #22
 8006606:	d11e      	bne.n	8006646 <__sflush_r+0xea>
 8006608:	602f      	str	r7, [r5, #0]
 800660a:	2000      	movs	r0, #0
 800660c:	e022      	b.n	8006654 <__sflush_r+0xf8>
 800660e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006612:	b21b      	sxth	r3, r3
 8006614:	e01b      	b.n	800664e <__sflush_r+0xf2>
 8006616:	690f      	ldr	r7, [r1, #16]
 8006618:	2f00      	cmp	r7, #0
 800661a:	d0f6      	beq.n	800660a <__sflush_r+0xae>
 800661c:	0793      	lsls	r3, r2, #30
 800661e:	680e      	ldr	r6, [r1, #0]
 8006620:	bf08      	it	eq
 8006622:	694b      	ldreq	r3, [r1, #20]
 8006624:	600f      	str	r7, [r1, #0]
 8006626:	bf18      	it	ne
 8006628:	2300      	movne	r3, #0
 800662a:	eba6 0807 	sub.w	r8, r6, r7
 800662e:	608b      	str	r3, [r1, #8]
 8006630:	f1b8 0f00 	cmp.w	r8, #0
 8006634:	dde9      	ble.n	800660a <__sflush_r+0xae>
 8006636:	6a21      	ldr	r1, [r4, #32]
 8006638:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800663a:	4643      	mov	r3, r8
 800663c:	463a      	mov	r2, r7
 800663e:	4628      	mov	r0, r5
 8006640:	47b0      	blx	r6
 8006642:	2800      	cmp	r0, #0
 8006644:	dc08      	bgt.n	8006658 <__sflush_r+0xfc>
 8006646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800664a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006658:	4407      	add	r7, r0
 800665a:	eba8 0800 	sub.w	r8, r8, r0
 800665e:	e7e7      	b.n	8006630 <__sflush_r+0xd4>
 8006660:	dfbffffe 	.word	0xdfbffffe

08006664 <_fflush_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	690b      	ldr	r3, [r1, #16]
 8006668:	4605      	mov	r5, r0
 800666a:	460c      	mov	r4, r1
 800666c:	b913      	cbnz	r3, 8006674 <_fflush_r+0x10>
 800666e:	2500      	movs	r5, #0
 8006670:	4628      	mov	r0, r5
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	b118      	cbz	r0, 800667e <_fflush_r+0x1a>
 8006676:	6a03      	ldr	r3, [r0, #32]
 8006678:	b90b      	cbnz	r3, 800667e <_fflush_r+0x1a>
 800667a:	f7ff f941 	bl	8005900 <__sinit>
 800667e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f3      	beq.n	800666e <_fflush_r+0xa>
 8006686:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006688:	07d0      	lsls	r0, r2, #31
 800668a:	d404      	bmi.n	8006696 <_fflush_r+0x32>
 800668c:	0599      	lsls	r1, r3, #22
 800668e:	d402      	bmi.n	8006696 <_fflush_r+0x32>
 8006690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006692:	f7ff fb8a 	bl	8005daa <__retarget_lock_acquire_recursive>
 8006696:	4628      	mov	r0, r5
 8006698:	4621      	mov	r1, r4
 800669a:	f7ff ff5f 	bl	800655c <__sflush_r>
 800669e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066a0:	07da      	lsls	r2, r3, #31
 80066a2:	4605      	mov	r5, r0
 80066a4:	d4e4      	bmi.n	8006670 <_fflush_r+0xc>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	059b      	lsls	r3, r3, #22
 80066aa:	d4e1      	bmi.n	8006670 <_fflush_r+0xc>
 80066ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ae:	f7ff fb7d 	bl	8005dac <__retarget_lock_release_recursive>
 80066b2:	e7dd      	b.n	8006670 <_fflush_r+0xc>

080066b4 <__swhatbuf_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	460c      	mov	r4, r1
 80066b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066bc:	2900      	cmp	r1, #0
 80066be:	b096      	sub	sp, #88	@ 0x58
 80066c0:	4615      	mov	r5, r2
 80066c2:	461e      	mov	r6, r3
 80066c4:	da0d      	bge.n	80066e2 <__swhatbuf_r+0x2e>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066cc:	f04f 0100 	mov.w	r1, #0
 80066d0:	bf14      	ite	ne
 80066d2:	2340      	movne	r3, #64	@ 0x40
 80066d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066d8:	2000      	movs	r0, #0
 80066da:	6031      	str	r1, [r6, #0]
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	b016      	add	sp, #88	@ 0x58
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	466a      	mov	r2, sp
 80066e4:	f000 f87c 	bl	80067e0 <_fstat_r>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	dbec      	blt.n	80066c6 <__swhatbuf_r+0x12>
 80066ec:	9901      	ldr	r1, [sp, #4]
 80066ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066f6:	4259      	negs	r1, r3
 80066f8:	4159      	adcs	r1, r3
 80066fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066fe:	e7eb      	b.n	80066d8 <__swhatbuf_r+0x24>

08006700 <__smakebuf_r>:
 8006700:	898b      	ldrh	r3, [r1, #12]
 8006702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006704:	079d      	lsls	r5, r3, #30
 8006706:	4606      	mov	r6, r0
 8006708:	460c      	mov	r4, r1
 800670a:	d507      	bpl.n	800671c <__smakebuf_r+0x1c>
 800670c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	6123      	str	r3, [r4, #16]
 8006714:	2301      	movs	r3, #1
 8006716:	6163      	str	r3, [r4, #20]
 8006718:	b003      	add	sp, #12
 800671a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800671c:	ab01      	add	r3, sp, #4
 800671e:	466a      	mov	r2, sp
 8006720:	f7ff ffc8 	bl	80066b4 <__swhatbuf_r>
 8006724:	9f00      	ldr	r7, [sp, #0]
 8006726:	4605      	mov	r5, r0
 8006728:	4639      	mov	r1, r7
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff fbba 	bl	8005ea4 <_malloc_r>
 8006730:	b948      	cbnz	r0, 8006746 <__smakebuf_r+0x46>
 8006732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006736:	059a      	lsls	r2, r3, #22
 8006738:	d4ee      	bmi.n	8006718 <__smakebuf_r+0x18>
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	f043 0302 	orr.w	r3, r3, #2
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	e7e2      	b.n	800670c <__smakebuf_r+0xc>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	6020      	str	r0, [r4, #0]
 800674a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006756:	b15b      	cbz	r3, 8006770 <__smakebuf_r+0x70>
 8006758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800675c:	4630      	mov	r0, r6
 800675e:	f000 f851 	bl	8006804 <_isatty_r>
 8006762:	b128      	cbz	r0, 8006770 <__smakebuf_r+0x70>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	431d      	orrs	r5, r3
 8006774:	81a5      	strh	r5, [r4, #12]
 8006776:	e7cf      	b.n	8006718 <__smakebuf_r+0x18>

08006778 <_putc_r>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	460d      	mov	r5, r1
 800677c:	4614      	mov	r4, r2
 800677e:	4606      	mov	r6, r0
 8006780:	b118      	cbz	r0, 800678a <_putc_r+0x12>
 8006782:	6a03      	ldr	r3, [r0, #32]
 8006784:	b90b      	cbnz	r3, 800678a <_putc_r+0x12>
 8006786:	f7ff f8bb 	bl	8005900 <__sinit>
 800678a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800678c:	07d8      	lsls	r0, r3, #31
 800678e:	d405      	bmi.n	800679c <_putc_r+0x24>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	0599      	lsls	r1, r3, #22
 8006794:	d402      	bmi.n	800679c <_putc_r+0x24>
 8006796:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006798:	f7ff fb07 	bl	8005daa <__retarget_lock_acquire_recursive>
 800679c:	68a3      	ldr	r3, [r4, #8]
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	60a3      	str	r3, [r4, #8]
 80067a4:	da05      	bge.n	80067b2 <_putc_r+0x3a>
 80067a6:	69a2      	ldr	r2, [r4, #24]
 80067a8:	4293      	cmp	r3, r2
 80067aa:	db12      	blt.n	80067d2 <_putc_r+0x5a>
 80067ac:	b2eb      	uxtb	r3, r5
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d00f      	beq.n	80067d2 <_putc_r+0x5a>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	701d      	strb	r5, [r3, #0]
 80067ba:	b2ed      	uxtb	r5, r5
 80067bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067be:	07da      	lsls	r2, r3, #31
 80067c0:	d405      	bmi.n	80067ce <_putc_r+0x56>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	059b      	lsls	r3, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_putc_r+0x56>
 80067c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ca:	f7ff faef 	bl	8005dac <__retarget_lock_release_recursive>
 80067ce:	4628      	mov	r0, r5
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	4629      	mov	r1, r5
 80067d4:	4622      	mov	r2, r4
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff f983 	bl	8005ae2 <__swbuf_r>
 80067dc:	4605      	mov	r5, r0
 80067de:	e7ed      	b.n	80067bc <_putc_r+0x44>

080067e0 <_fstat_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d07      	ldr	r5, [pc, #28]	@ (8006800 <_fstat_r+0x20>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	4611      	mov	r1, r2
 80067ec:	602b      	str	r3, [r5, #0]
 80067ee:	f7fb f9b5 	bl	8001b5c <_fstat>
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	d102      	bne.n	80067fc <_fstat_r+0x1c>
 80067f6:	682b      	ldr	r3, [r5, #0]
 80067f8:	b103      	cbz	r3, 80067fc <_fstat_r+0x1c>
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	bd38      	pop	{r3, r4, r5, pc}
 80067fe:	bf00      	nop
 8006800:	20004c84 	.word	0x20004c84

08006804 <_isatty_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d06      	ldr	r5, [pc, #24]	@ (8006820 <_isatty_r+0x1c>)
 8006808:	2300      	movs	r3, #0
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	f7fb f9b4 	bl	8001b7c <_isatty>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_isatty_r+0x1a>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_isatty_r+0x1a>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20004c84 	.word	0x20004c84

08006824 <_sbrk_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	@ (8006840 <_sbrk_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fb f9bc 	bl	8001bac <_sbrk>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_sbrk_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_sbrk_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20004c84 	.word	0x20004c84

08006844 <abort>:
 8006844:	b508      	push	{r3, lr}
 8006846:	2006      	movs	r0, #6
 8006848:	f000 f82c 	bl	80068a4 <raise>
 800684c:	2001      	movs	r0, #1
 800684e:	f7fb f951 	bl	8001af4 <_exit>

08006852 <_raise_r>:
 8006852:	291f      	cmp	r1, #31
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4605      	mov	r5, r0
 8006858:	460c      	mov	r4, r1
 800685a:	d904      	bls.n	8006866 <_raise_r+0x14>
 800685c:	2316      	movs	r3, #22
 800685e:	6003      	str	r3, [r0, #0]
 8006860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006864:	bd38      	pop	{r3, r4, r5, pc}
 8006866:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006868:	b112      	cbz	r2, 8006870 <_raise_r+0x1e>
 800686a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800686e:	b94b      	cbnz	r3, 8006884 <_raise_r+0x32>
 8006870:	4628      	mov	r0, r5
 8006872:	f000 f831 	bl	80068d8 <_getpid_r>
 8006876:	4622      	mov	r2, r4
 8006878:	4601      	mov	r1, r0
 800687a:	4628      	mov	r0, r5
 800687c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006880:	f000 b818 	b.w	80068b4 <_kill_r>
 8006884:	2b01      	cmp	r3, #1
 8006886:	d00a      	beq.n	800689e <_raise_r+0x4c>
 8006888:	1c59      	adds	r1, r3, #1
 800688a:	d103      	bne.n	8006894 <_raise_r+0x42>
 800688c:	2316      	movs	r3, #22
 800688e:	6003      	str	r3, [r0, #0]
 8006890:	2001      	movs	r0, #1
 8006892:	e7e7      	b.n	8006864 <_raise_r+0x12>
 8006894:	2100      	movs	r1, #0
 8006896:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800689a:	4620      	mov	r0, r4
 800689c:	4798      	blx	r3
 800689e:	2000      	movs	r0, #0
 80068a0:	e7e0      	b.n	8006864 <_raise_r+0x12>
	...

080068a4 <raise>:
 80068a4:	4b02      	ldr	r3, [pc, #8]	@ (80068b0 <raise+0xc>)
 80068a6:	4601      	mov	r1, r0
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	f7ff bfd2 	b.w	8006852 <_raise_r>
 80068ae:	bf00      	nop
 80068b0:	2000001c 	.word	0x2000001c

080068b4 <_kill_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	@ (80068d4 <_kill_r+0x20>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	f7fb f907 	bl	8001ad4 <_kill>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d102      	bne.n	80068d0 <_kill_r+0x1c>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	b103      	cbz	r3, 80068d0 <_kill_r+0x1c>
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	20004c84 	.word	0x20004c84

080068d8 <_getpid_r>:
 80068d8:	f7fb b8f4 	b.w	8001ac4 <_getpid>

080068dc <_init>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	bf00      	nop
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr

080068e8 <_fini>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr
