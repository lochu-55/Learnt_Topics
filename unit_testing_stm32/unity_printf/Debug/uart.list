
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080033c8  080033c8  000043c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  080034a8  080034a8  000044a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003580  08003580  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003580  08003580  00004580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003584  08003584  00004584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003588  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000068  080035f0  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080035f0  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005649  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000142e  00000000  00000000  0000a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  0000bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000046d  00000000  00000000  0000c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e61  00000000  00000000  0000c585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000663a  00000000  00000000  000243e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a322b  00000000  00000000  0002aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdc4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a8  00000000  00000000  000cdc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033b0 	.word	0x080033b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	080033b0 	.word	0x080033b0

080001d4 <setjmp>:
 80001d4:	46ec      	mov	ip, sp
 80001d6:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001da:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001de:	f04f 0000 	mov.w	r0, #0
 80001e2:	4770      	bx	lr

080001e4 <longjmp>:
 80001e4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e8:	46e5      	mov	sp, ip
 80001ea:	ec90 8b10 	vldmia	r0, {d8-d15}
 80001ee:	0008      	movs	r0, r1
 80001f0:	bf08      	it	eq
 80001f2:	2001      	moveq	r0, #1
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800020c:	f001 b8f6 	b.w	80013fc <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	460c      	mov	r4, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14e      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000234:	4694      	mov	ip, r2
 8000236:	458c      	cmp	ip, r1
 8000238:	4686      	mov	lr, r0
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	d962      	bls.n	8000306 <__udivmoddi4+0xde>
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0320 	rsb	r3, r2, #32
 8000246:	4091      	lsls	r1, r2
 8000248:	fa20 f303 	lsr.w	r3, r0, r3
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	4319      	orrs	r1, r3
 8000252:	fa00 fe02 	lsl.w	lr, r0, r2
 8000256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025a:	fa1f f68c 	uxth.w	r6, ip
 800025e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000262:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000266:	fb07 1114 	mls	r1, r7, r4, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb04 f106 	mul.w	r1, r4, r6
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800027e:	f080 8112 	bcs.w	80004a6 <__udivmoddi4+0x27e>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 810f 	bls.w	80004a6 <__udivmoddi4+0x27e>
 8000288:	3c02      	subs	r4, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a59      	subs	r1, r3, r1
 800028e:	fa1f f38e 	uxth.w	r3, lr
 8000292:	fbb1 f0f7 	udiv	r0, r1, r7
 8000296:	fb07 1110 	mls	r1, r7, r0, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb00 f606 	mul.w	r6, r0, r6
 80002a2:	429e      	cmp	r6, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x94>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ae:	f080 80fc 	bcs.w	80004aa <__udivmoddi4+0x282>
 80002b2:	429e      	cmp	r6, r3
 80002b4:	f240 80f9 	bls.w	80004aa <__udivmoddi4+0x282>
 80002b8:	4463      	add	r3, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	1b9b      	subs	r3, r3, r6
 80002be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa6>
 80002c6:	40d3      	lsrs	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xba>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb4>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa6>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x150>
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xcc>
 80002ee:	4290      	cmp	r0, r2
 80002f0:	f0c0 80f0 	bcc.w	80004d4 <__udivmoddi4+0x2ac>
 80002f4:	1a86      	subs	r6, r0, r2
 80002f6:	eb64 0303 	sbc.w	r3, r4, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d0e6      	beq.n	80002ce <__udivmoddi4+0xa6>
 8000300:	e9c5 6300 	strd	r6, r3, [r5]
 8000304:	e7e3      	b.n	80002ce <__udivmoddi4+0xa6>
 8000306:	2a00      	cmp	r2, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x204>
 800030c:	eba1 040c 	sub.w	r4, r1, ip
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	fa1f f78c 	uxth.w	r7, ip
 8000318:	2101      	movs	r1, #1
 800031a:	fbb4 f6f8 	udiv	r6, r4, r8
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb08 4416 	mls	r4, r8, r6, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb07 f006 	mul.w	r0, r7, r6
 800032e:	4298      	cmp	r0, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x11c>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x11a>
 800033c:	4298      	cmp	r0, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2b4>
 8000342:	4626      	mov	r6, r4
 8000344:	1a1c      	subs	r4, r3, r0
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb4 f0f8 	udiv	r0, r4, r8
 800034e:	fb08 4410 	mls	r4, r8, r0, r4
 8000352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000356:	fb00 f707 	mul.w	r7, r0, r7
 800035a:	429f      	cmp	r7, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x148>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x146>
 8000368:	429f      	cmp	r7, r3
 800036a:	f200 80b0 	bhi.w	80004ce <__udivmoddi4+0x2a6>
 800036e:	4620      	mov	r0, r4
 8000370:	1bdb      	subs	r3, r3, r7
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x9c>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa20 fc06 	lsr.w	ip, r0, r6
 8000388:	fa04 f301 	lsl.w	r3, r4, r1
 800038c:	ea43 030c 	orr.w	r3, r3, ip
 8000390:	40f4      	lsrs	r4, r6
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800039c:	fbb4 fef0 	udiv	lr, r4, r0
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	fb00 441e 	mls	r4, r0, lr, r4
 80003a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ac:	fb0e f90c 	mul.w	r9, lr, ip
 80003b0:	45a1      	cmp	r9, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x1a6>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003be:	f080 8084 	bcs.w	80004ca <__udivmoddi4+0x2a2>
 80003c2:	45a1      	cmp	r9, r4
 80003c4:	f240 8081 	bls.w	80004ca <__udivmoddi4+0x2a2>
 80003c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	eba4 0409 	sub.w	r4, r4, r9
 80003d2:	fa1f f983 	uxth.w	r9, r3
 80003d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003da:	fb00 4413 	mls	r4, r0, r3, r4
 80003de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1d2>
 80003ea:	193c      	adds	r4, r7, r4
 80003ec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f0:	d267      	bcs.n	80004c2 <__udivmoddi4+0x29a>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0x29a>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	429c      	cmp	r4, r3
 8000408:	46ce      	mov	lr, r9
 800040a:	469c      	mov	ip, r3
 800040c:	d351      	bcc.n	80004b2 <__udivmoddi4+0x28a>
 800040e:	d04e      	beq.n	80004ae <__udivmoddi4+0x286>
 8000410:	b155      	cbz	r5, 8000428 <__udivmoddi4+0x200>
 8000412:	ebb8 030e 	subs.w	r3, r8, lr
 8000416:	eb64 040c 	sbc.w	r4, r4, ip
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	40cb      	lsrs	r3, r1
 8000420:	431e      	orrs	r6, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c5 6400 	strd	r6, r4, [r5]
 8000428:	2100      	movs	r1, #0
 800042a:	e750      	b.n	80002ce <__udivmoddi4+0xa6>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f103 	lsr.w	r1, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa24 f303 	lsr.w	r3, r4, r3
 800043c:	4094      	lsls	r4, r2
 800043e:	430c      	orrs	r4, r1
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa00 fe02 	lsl.w	lr, r0, r2
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3110 	mls	r1, r8, r0, r3
 8000454:	0c23      	lsrs	r3, r4, #16
 8000456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045a:	fb00 f107 	mul.w	r1, r0, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x24c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046a:	d22c      	bcs.n	80004c6 <__udivmoddi4+0x29e>
 800046c:	4299      	cmp	r1, r3
 800046e:	d92a      	bls.n	80004c6 <__udivmoddi4+0x29e>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f1f8 	udiv	r1, r3, r8
 800047c:	fb08 3311 	mls	r3, r8, r1, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb01 f307 	mul.w	r3, r1, r7
 8000488:	42a3      	cmp	r3, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x276>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000494:	d213      	bcs.n	80004be <__udivmoddi4+0x296>
 8000496:	42a3      	cmp	r3, r4
 8000498:	d911      	bls.n	80004be <__udivmoddi4+0x296>
 800049a:	3902      	subs	r1, #2
 800049c:	4464      	add	r4, ip
 800049e:	1ae4      	subs	r4, r4, r3
 80004a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a4:	e739      	b.n	800031a <__udivmoddi4+0xf2>
 80004a6:	4604      	mov	r4, r0
 80004a8:	e6f0      	b.n	800028c <__udivmoddi4+0x64>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e706      	b.n	80002bc <__udivmoddi4+0x94>
 80004ae:	45c8      	cmp	r8, r9
 80004b0:	d2ae      	bcs.n	8000410 <__udivmoddi4+0x1e8>
 80004b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a8      	b.n	8000410 <__udivmoddi4+0x1e8>
 80004be:	4631      	mov	r1, r6
 80004c0:	e7ed      	b.n	800049e <__udivmoddi4+0x276>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e799      	b.n	80003fa <__udivmoddi4+0x1d2>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e7d4      	b.n	8000474 <__udivmoddi4+0x24c>
 80004ca:	46d6      	mov	lr, sl
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1a6>
 80004ce:	4463      	add	r3, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e74d      	b.n	8000370 <__udivmoddi4+0x148>
 80004d4:	4606      	mov	r6, r0
 80004d6:	4623      	mov	r3, r4
 80004d8:	4608      	mov	r0, r1
 80004da:	e70f      	b.n	80002fc <__udivmoddi4+0xd4>
 80004dc:	3e02      	subs	r6, #2
 80004de:	4463      	add	r3, ip
 80004e0:	e730      	b.n	8000344 <__udivmoddi4+0x11c>
 80004e2:	bf00      	nop

080004e4 <selfrel_offset31>:
 80004e4:	6803      	ldr	r3, [r0, #0]
 80004e6:	005a      	lsls	r2, r3, #1
 80004e8:	bf4c      	ite	mi
 80004ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80004ee:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80004f2:	4418      	add	r0, r3
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <search_EIT_table>:
 80004f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004fc:	b349      	cbz	r1, 8000552 <search_EIT_table+0x5a>
 80004fe:	1e4f      	subs	r7, r1, #1
 8000500:	4604      	mov	r4, r0
 8000502:	4615      	mov	r5, r2
 8000504:	463e      	mov	r6, r7
 8000506:	f04f 0900 	mov.w	r9, #0
 800050a:	eb09 0106 	add.w	r1, r9, r6
 800050e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000512:	1049      	asrs	r1, r1, #1
 8000514:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8000518:	4640      	mov	r0, r8
 800051a:	f7ff ffe3 	bl	80004e4 <selfrel_offset31>
 800051e:	428f      	cmp	r7, r1
 8000520:	4603      	mov	r3, r0
 8000522:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 8000526:	d00f      	beq.n	8000548 <search_EIT_table+0x50>
 8000528:	3008      	adds	r0, #8
 800052a:	42ab      	cmp	r3, r5
 800052c:	4420      	add	r0, r4
 800052e:	d807      	bhi.n	8000540 <search_EIT_table+0x48>
 8000530:	f7ff ffd8 	bl	80004e4 <selfrel_offset31>
 8000534:	3801      	subs	r0, #1
 8000536:	42a8      	cmp	r0, r5
 8000538:	d208      	bcs.n	800054c <search_EIT_table+0x54>
 800053a:	f101 0901 	add.w	r9, r1, #1
 800053e:	e7e4      	b.n	800050a <search_EIT_table+0x12>
 8000540:	4589      	cmp	r9, r1
 8000542:	d006      	beq.n	8000552 <search_EIT_table+0x5a>
 8000544:	1e4e      	subs	r6, r1, #1
 8000546:	e7e0      	b.n	800050a <search_EIT_table+0x12>
 8000548:	42ab      	cmp	r3, r5
 800054a:	d8f9      	bhi.n	8000540 <search_EIT_table+0x48>
 800054c:	4640      	mov	r0, r8
 800054e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000552:	f04f 0800 	mov.w	r8, #0
 8000556:	4640      	mov	r0, r8
 8000558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800055c <__gnu_unwind_get_pr_addr>:
 800055c:	2801      	cmp	r0, #1
 800055e:	d007      	beq.n	8000570 <__gnu_unwind_get_pr_addr+0x14>
 8000560:	2802      	cmp	r0, #2
 8000562:	d007      	beq.n	8000574 <__gnu_unwind_get_pr_addr+0x18>
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <__gnu_unwind_get_pr_addr+0x1c>)
 8000566:	2800      	cmp	r0, #0
 8000568:	bf0c      	ite	eq
 800056a:	4618      	moveq	r0, r3
 800056c:	2000      	movne	r0, #0
 800056e:	4770      	bx	lr
 8000570:	4802      	ldr	r0, [pc, #8]	@ (800057c <__gnu_unwind_get_pr_addr+0x20>)
 8000572:	4770      	bx	lr
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <__gnu_unwind_get_pr_addr+0x24>)
 8000576:	4770      	bx	lr
 8000578:	08000c25 	.word	0x08000c25
 800057c:	08000c29 	.word	0x08000c29
 8000580:	08000c2d 	.word	0x08000c2d

08000584 <get_eit_entry>:
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	4b21      	ldr	r3, [pc, #132]	@ (800060c <get_eit_entry+0x88>)
 8000588:	b083      	sub	sp, #12
 800058a:	4604      	mov	r4, r0
 800058c:	1e8d      	subs	r5, r1, #2
 800058e:	b31b      	cbz	r3, 80005d8 <get_eit_entry+0x54>
 8000590:	a901      	add	r1, sp, #4
 8000592:	4628      	mov	r0, r5
 8000594:	f3af 8000 	nop.w
 8000598:	b388      	cbz	r0, 80005fe <get_eit_entry+0x7a>
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	462a      	mov	r2, r5
 800059e:	f7ff ffab 	bl	80004f8 <search_EIT_table>
 80005a2:	4601      	mov	r1, r0
 80005a4:	b358      	cbz	r0, 80005fe <get_eit_entry+0x7a>
 80005a6:	f7ff ff9d 	bl	80004e4 <selfrel_offset31>
 80005aa:	684b      	ldr	r3, [r1, #4]
 80005ac:	64a0      	str	r0, [r4, #72]	@ 0x48
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d028      	beq.n	8000604 <get_eit_entry+0x80>
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	f101 0004 	add.w	r0, r1, #4
 80005b8:	db1f      	blt.n	80005fa <get_eit_entry+0x76>
 80005ba:	f7ff ff93 	bl	80004e4 <selfrel_offset31>
 80005be:	2300      	movs	r3, #0
 80005c0:	6523      	str	r3, [r4, #80]	@ 0x50
 80005c2:	6803      	ldr	r3, [r0, #0]
 80005c4:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0d      	blt.n	80005e6 <get_eit_entry+0x62>
 80005ca:	f7ff ff8b 	bl	80004e4 <selfrel_offset31>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2000      	movs	r0, #0
 80005d2:	6123      	str	r3, [r4, #16]
 80005d4:	b003      	add	sp, #12
 80005d6:	bd30      	pop	{r4, r5, pc}
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <get_eit_entry+0x8c>)
 80005da:	490e      	ldr	r1, [pc, #56]	@ (8000614 <get_eit_entry+0x90>)
 80005dc:	1ac9      	subs	r1, r1, r3
 80005de:	10c9      	asrs	r1, r1, #3
 80005e0:	4618      	mov	r0, r3
 80005e2:	9101      	str	r1, [sp, #4]
 80005e4:	e7da      	b.n	800059c <get_eit_entry+0x18>
 80005e6:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80005ea:	f7ff ffb7 	bl	800055c <__gnu_unwind_get_pr_addr>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b128      	cbz	r0, 80005fe <get_eit_entry+0x7a>
 80005f2:	2000      	movs	r0, #0
 80005f4:	6123      	str	r3, [r4, #16]
 80005f6:	b003      	add	sp, #12
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	2301      	movs	r3, #1
 80005fc:	e7e0      	b.n	80005c0 <get_eit_entry+0x3c>
 80005fe:	2300      	movs	r3, #0
 8000600:	2009      	movs	r0, #9
 8000602:	e7e6      	b.n	80005d2 <get_eit_entry+0x4e>
 8000604:	2300      	movs	r3, #0
 8000606:	2005      	movs	r0, #5
 8000608:	e7e3      	b.n	80005d2 <get_eit_entry+0x4e>
 800060a:	bf00      	nop
 800060c:	00000000 	.word	0x00000000
 8000610:	080034c0 	.word	0x080034c0
 8000614:	08003580 	.word	0x08003580

08000618 <restore_non_core_regs>:
 8000618:	6803      	ldr	r3, [r0, #0]
 800061a:	07da      	lsls	r2, r3, #31
 800061c:	b510      	push	{r4, lr}
 800061e:	4604      	mov	r4, r0
 8000620:	d406      	bmi.n	8000630 <restore_non_core_regs+0x18>
 8000622:	079b      	lsls	r3, r3, #30
 8000624:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8000628:	d509      	bpl.n	800063e <restore_non_core_regs+0x26>
 800062a:	f000 fc69 	bl	8000f00 <__gnu_Unwind_Restore_VFP_D>
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	0759      	lsls	r1, r3, #29
 8000632:	d509      	bpl.n	8000648 <restore_non_core_regs+0x30>
 8000634:	071a      	lsls	r2, r3, #28
 8000636:	d50e      	bpl.n	8000656 <restore_non_core_regs+0x3e>
 8000638:	06db      	lsls	r3, r3, #27
 800063a:	d513      	bpl.n	8000664 <restore_non_core_regs+0x4c>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	f000 fc57 	bl	8000ef0 <__gnu_Unwind_Restore_VFP>
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	0759      	lsls	r1, r3, #29
 8000646:	d4f5      	bmi.n	8000634 <restore_non_core_regs+0x1c>
 8000648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800064c:	f000 fc60 	bl	8000f10 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	071a      	lsls	r2, r3, #28
 8000654:	d4f0      	bmi.n	8000638 <restore_non_core_regs+0x20>
 8000656:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 800065a:	f000 fc61 	bl	8000f20 <__gnu_Unwind_Restore_WMMXD>
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	06db      	lsls	r3, r3, #27
 8000662:	d4eb      	bmi.n	800063c <restore_non_core_regs+0x24>
 8000664:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8000668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800066c:	f000 bc9c 	b.w	8000fa8 <__gnu_Unwind_Restore_WMMXC>

08000670 <__gnu_unwind_24bit.constprop.0>:
 8000670:	2009      	movs	r0, #9
 8000672:	4770      	bx	lr

08000674 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000674:	4603      	mov	r3, r0
 8000676:	6800      	ldr	r0, [r0, #0]
 8000678:	b100      	cbz	r0, 800067c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800067a:	4418      	add	r0, r3
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_Unwind_DebugHook>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <unwind_phase2>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4604      	mov	r4, r0
 8000688:	460e      	mov	r6, r1
 800068a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800068c:	4620      	mov	r0, r4
 800068e:	f7ff ff79 	bl	8000584 <get_eit_entry>
 8000692:	4605      	mov	r5, r0
 8000694:	b988      	cbnz	r0, 80006ba <unwind_phase2+0x36>
 8000696:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000698:	6162      	str	r2, [r4, #20]
 800069a:	6923      	ldr	r3, [r4, #16]
 800069c:	4632      	mov	r2, r6
 800069e:	4621      	mov	r1, r4
 80006a0:	2001      	movs	r0, #1
 80006a2:	4798      	blx	r3
 80006a4:	2808      	cmp	r0, #8
 80006a6:	d0f0      	beq.n	800068a <unwind_phase2+0x6>
 80006a8:	2807      	cmp	r0, #7
 80006aa:	d106      	bne.n	80006ba <unwind_phase2+0x36>
 80006ac:	4628      	mov	r0, r5
 80006ae:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80006b0:	f7ff ffe6 	bl	8000680 <_Unwind_DebugHook>
 80006b4:	1d30      	adds	r0, r6, #4
 80006b6:	f000 fc0f 	bl	8000ed8 <__restore_core_regs>
 80006ba:	f002 fe1f 	bl	80032fc <abort>
 80006be:	bf00      	nop

080006c0 <unwind_phase2_forced>:
 80006c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c4:	1d0d      	adds	r5, r1, #4
 80006c6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80006ca:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80006ce:	4607      	mov	r7, r0
 80006d0:	4614      	mov	r4, r2
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80006d8:	f10d 0c0c 	add.w	ip, sp, #12
 80006dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f0:	ae02      	add	r6, sp, #8
 80006f2:	f04f 0e00 	mov.w	lr, #0
 80006f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80006fa:	f8c6 e000 	str.w	lr, [r6]
 80006fe:	e020      	b.n	8000742 <unwind_phase2_forced+0x82>
 8000700:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000708:	4631      	mov	r1, r6
 800070a:	a87a      	add	r0, sp, #488	@ 0x1e8
 800070c:	f002 fe42 	bl	8003394 <memcpy>
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	aa7a      	add	r2, sp, #488	@ 0x1e8
 8000714:	4639      	mov	r1, r7
 8000716:	4650      	mov	r0, sl
 8000718:	4798      	blx	r3
 800071a:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 800071c:	6473      	str	r3, [r6, #68]	@ 0x44
 800071e:	4621      	mov	r1, r4
 8000720:	e9cd 6900 	strd	r6, r9, [sp]
 8000724:	4605      	mov	r5, r0
 8000726:	463b      	mov	r3, r7
 8000728:	463a      	mov	r2, r7
 800072a:	2001      	movs	r0, #1
 800072c:	47c0      	blx	r8
 800072e:	4604      	mov	r4, r0
 8000730:	bb18      	cbnz	r0, 800077a <unwind_phase2_forced+0xba>
 8000732:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000736:	a97a      	add	r1, sp, #488	@ 0x1e8
 8000738:	4630      	mov	r0, r6
 800073a:	f002 fe2b 	bl	8003394 <memcpy>
 800073e:	2d08      	cmp	r5, #8
 8000740:	d119      	bne.n	8000776 <unwind_phase2_forced+0xb6>
 8000742:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000744:	4638      	mov	r0, r7
 8000746:	f7ff ff1d 	bl	8000584 <get_eit_entry>
 800074a:	3409      	adds	r4, #9
 800074c:	fa5f fa84 	uxtb.w	sl, r4
 8000750:	4605      	mov	r5, r0
 8000752:	2800      	cmp	r0, #0
 8000754:	d0d4      	beq.n	8000700 <unwind_phase2_forced+0x40>
 8000756:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000758:	6473      	str	r3, [r6, #68]	@ 0x44
 800075a:	463a      	mov	r2, r7
 800075c:	e9cd 6900 	strd	r6, r9, [sp]
 8000760:	463b      	mov	r3, r7
 8000762:	f04a 0110 	orr.w	r1, sl, #16
 8000766:	2001      	movs	r0, #1
 8000768:	47c0      	blx	r8
 800076a:	b930      	cbnz	r0, 800077a <unwind_phase2_forced+0xba>
 800076c:	4628      	mov	r0, r5
 800076e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	2d07      	cmp	r5, #7
 8000778:	d005      	beq.n	8000786 <unwind_phase2_forced+0xc6>
 800077a:	2509      	movs	r5, #9
 800077c:	4628      	mov	r0, r5
 800077e:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 8000782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000786:	4620      	mov	r0, r4
 8000788:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800078a:	f7ff ff79 	bl	8000680 <_Unwind_DebugHook>
 800078e:	a803      	add	r0, sp, #12
 8000790:	f000 fba2 	bl	8000ed8 <__restore_core_regs>

08000794 <_Unwind_GetCFA>:
 8000794:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8000796:	4770      	bx	lr

08000798 <__gnu_Unwind_RaiseException>:
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800079c:	640b      	str	r3, [r1, #64]	@ 0x40
 800079e:	f101 0c04 	add.w	ip, r1, #4
 80007a2:	460e      	mov	r6, r1
 80007a4:	4605      	mov	r5, r0
 80007a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007aa:	b0f9      	sub	sp, #484	@ 0x1e4
 80007ac:	ac01      	add	r4, sp, #4
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007bc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80007c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80007c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007c8:	9700      	str	r7, [sp, #0]
 80007ca:	e006      	b.n	80007da <__gnu_Unwind_RaiseException+0x42>
 80007cc:	692b      	ldr	r3, [r5, #16]
 80007ce:	466a      	mov	r2, sp
 80007d0:	4629      	mov	r1, r5
 80007d2:	4798      	blx	r3
 80007d4:	2808      	cmp	r0, #8
 80007d6:	4604      	mov	r4, r0
 80007d8:	d108      	bne.n	80007ec <__gnu_Unwind_RaiseException+0x54>
 80007da:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80007dc:	4628      	mov	r0, r5
 80007de:	f7ff fed1 	bl	8000584 <get_eit_entry>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d0f2      	beq.n	80007cc <__gnu_Unwind_RaiseException+0x34>
 80007e6:	2009      	movs	r0, #9
 80007e8:	b079      	add	sp, #484	@ 0x1e4
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	4668      	mov	r0, sp
 80007ee:	f7ff ff13 	bl	8000618 <restore_non_core_regs>
 80007f2:	2c06      	cmp	r4, #6
 80007f4:	d1f7      	bne.n	80007e6 <__gnu_Unwind_RaiseException+0x4e>
 80007f6:	4631      	mov	r1, r6
 80007f8:	4628      	mov	r0, r5
 80007fa:	f7ff ff43 	bl	8000684 <unwind_phase2>
 80007fe:	bf00      	nop

08000800 <__gnu_Unwind_ForcedUnwind>:
 8000800:	60c1      	str	r1, [r0, #12]
 8000802:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000804:	6182      	str	r2, [r0, #24]
 8000806:	6419      	str	r1, [r3, #64]	@ 0x40
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	e758      	b.n	80006c0 <unwind_phase2_forced>
 800080e:	bf00      	nop

08000810 <__gnu_Unwind_Resume>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	68c6      	ldr	r6, [r0, #12]
 8000814:	6943      	ldr	r3, [r0, #20]
 8000816:	640b      	str	r3, [r1, #64]	@ 0x40
 8000818:	b9ae      	cbnz	r6, 8000846 <__gnu_Unwind_Resume+0x36>
 800081a:	6903      	ldr	r3, [r0, #16]
 800081c:	460a      	mov	r2, r1
 800081e:	4604      	mov	r4, r0
 8000820:	460d      	mov	r5, r1
 8000822:	4601      	mov	r1, r0
 8000824:	2002      	movs	r0, #2
 8000826:	4798      	blx	r3
 8000828:	2807      	cmp	r0, #7
 800082a:	d005      	beq.n	8000838 <__gnu_Unwind_Resume+0x28>
 800082c:	2808      	cmp	r0, #8
 800082e:	d10f      	bne.n	8000850 <__gnu_Unwind_Resume+0x40>
 8000830:	4629      	mov	r1, r5
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff ff26 	bl	8000684 <unwind_phase2>
 8000838:	4630      	mov	r0, r6
 800083a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 800083c:	f7ff ff20 	bl	8000680 <_Unwind_DebugHook>
 8000840:	1d28      	adds	r0, r5, #4
 8000842:	f000 fb49 	bl	8000ed8 <__restore_core_regs>
 8000846:	2201      	movs	r2, #1
 8000848:	f7ff ff3a 	bl	80006c0 <unwind_phase2_forced>
 800084c:	f002 fd56 	bl	80032fc <abort>
 8000850:	f002 fd54 	bl	80032fc <abort>

08000854 <__gnu_Unwind_Resume_or_Rethrow>:
 8000854:	68c2      	ldr	r2, [r0, #12]
 8000856:	b11a      	cbz	r2, 8000860 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000858:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800085a:	640a      	str	r2, [r1, #64]	@ 0x40
 800085c:	2200      	movs	r2, #0
 800085e:	e72f      	b.n	80006c0 <unwind_phase2_forced>
 8000860:	e79a      	b.n	8000798 <__gnu_Unwind_RaiseException>
 8000862:	bf00      	nop

08000864 <_Unwind_Complete>:
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <_Unwind_DeleteException>:
 8000868:	6883      	ldr	r3, [r0, #8]
 800086a:	4601      	mov	r1, r0
 800086c:	b10b      	cbz	r3, 8000872 <_Unwind_DeleteException+0xa>
 800086e:	2001      	movs	r0, #1
 8000870:	4718      	bx	r3
 8000872:	4770      	bx	lr

08000874 <_Unwind_VRS_Get>:
 8000874:	2901      	cmp	r1, #1
 8000876:	d010      	beq.n	800089a <_Unwind_VRS_Get+0x26>
 8000878:	d809      	bhi.n	800088e <_Unwind_VRS_Get+0x1a>
 800087a:	b983      	cbnz	r3, 800089e <_Unwind_VRS_Get+0x2a>
 800087c:	2a0f      	cmp	r2, #15
 800087e:	d80e      	bhi.n	800089e <_Unwind_VRS_Get+0x2a>
 8000880:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000884:	4618      	mov	r0, r3
 8000886:	6853      	ldr	r3, [r2, #4]
 8000888:	9a00      	ldr	r2, [sp, #0]
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4770      	bx	lr
 800088e:	3903      	subs	r1, #3
 8000890:	2901      	cmp	r1, #1
 8000892:	bf8c      	ite	hi
 8000894:	2002      	movhi	r0, #2
 8000896:	2001      	movls	r0, #1
 8000898:	4770      	bx	lr
 800089a:	4608      	mov	r0, r1
 800089c:	4770      	bx	lr
 800089e:	2002      	movs	r0, #2
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <_Unwind_GetGR>:
 80008a4:	b500      	push	{lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	460a      	mov	r2, r1
 80008aa:	2300      	movs	r3, #0
 80008ac:	a903      	add	r1, sp, #12
 80008ae:	9100      	str	r1, [sp, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f7ff ffdf 	bl	8000874 <_Unwind_VRS_Get>
 80008b6:	9803      	ldr	r0, [sp, #12]
 80008b8:	b005      	add	sp, #20
 80008ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80008be:	bf00      	nop

080008c0 <_Unwind_VRS_Set>:
 80008c0:	2901      	cmp	r1, #1
 80008c2:	d010      	beq.n	80008e6 <_Unwind_VRS_Set+0x26>
 80008c4:	d809      	bhi.n	80008da <_Unwind_VRS_Set+0x1a>
 80008c6:	b983      	cbnz	r3, 80008ea <_Unwind_VRS_Set+0x2a>
 80008c8:	2a0f      	cmp	r2, #15
 80008ca:	d80e      	bhi.n	80008ea <_Unwind_VRS_Set+0x2a>
 80008cc:	9900      	ldr	r1, [sp, #0]
 80008ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008d2:	6809      	ldr	r1, [r1, #0]
 80008d4:	6051      	str	r1, [r2, #4]
 80008d6:	4618      	mov	r0, r3
 80008d8:	4770      	bx	lr
 80008da:	3903      	subs	r1, #3
 80008dc:	2901      	cmp	r1, #1
 80008de:	bf8c      	ite	hi
 80008e0:	2002      	movhi	r0, #2
 80008e2:	2001      	movls	r0, #1
 80008e4:	4770      	bx	lr
 80008e6:	4608      	mov	r0, r1
 80008e8:	4770      	bx	lr
 80008ea:	2002      	movs	r0, #2
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <_Unwind_SetGR>:
 80008f0:	b510      	push	{r4, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	2300      	movs	r3, #0
 80008f6:	ac03      	add	r4, sp, #12
 80008f8:	9203      	str	r2, [sp, #12]
 80008fa:	9400      	str	r4, [sp, #0]
 80008fc:	460a      	mov	r2, r1
 80008fe:	4619      	mov	r1, r3
 8000900:	f7ff ffde 	bl	80008c0 <_Unwind_VRS_Set>
 8000904:	b004      	add	sp, #16
 8000906:	bd10      	pop	{r4, pc}

08000908 <__gnu_Unwind_Backtrace>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	f102 0c04 	add.w	ip, r2, #4
 8000912:	4605      	mov	r5, r0
 8000914:	460c      	mov	r4, r1
 8000916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800091a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800091e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8000922:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000926:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800092a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800092e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000932:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000936:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800093a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800093e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000942:	9616      	str	r6, [sp, #88]	@ 0x58
 8000944:	e010      	b.n	8000968 <__gnu_Unwind_Backtrace+0x60>
 8000946:	f7ff ffd3 	bl	80008f0 <_Unwind_SetGR>
 800094a:	4621      	mov	r1, r4
 800094c:	a816      	add	r0, sp, #88	@ 0x58
 800094e:	47a8      	blx	r5
 8000950:	4603      	mov	r3, r0
 8000952:	aa16      	add	r2, sp, #88	@ 0x58
 8000954:	4669      	mov	r1, sp
 8000956:	2008      	movs	r0, #8
 8000958:	b983      	cbnz	r3, 800097c <__gnu_Unwind_Backtrace+0x74>
 800095a:	9b04      	ldr	r3, [sp, #16]
 800095c:	4798      	blx	r3
 800095e:	2805      	cmp	r0, #5
 8000960:	4606      	mov	r6, r0
 8000962:	d00c      	beq.n	800097e <__gnu_Unwind_Backtrace+0x76>
 8000964:	2809      	cmp	r0, #9
 8000966:	d009      	beq.n	800097c <__gnu_Unwind_Backtrace+0x74>
 8000968:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800096a:	4668      	mov	r0, sp
 800096c:	f7ff fe0a 	bl	8000584 <get_eit_entry>
 8000970:	4603      	mov	r3, r0
 8000972:	466a      	mov	r2, sp
 8000974:	210c      	movs	r1, #12
 8000976:	a816      	add	r0, sp, #88	@ 0x58
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0e4      	beq.n	8000946 <__gnu_Unwind_Backtrace+0x3e>
 800097c:	2609      	movs	r6, #9
 800097e:	a816      	add	r0, sp, #88	@ 0x58
 8000980:	f7ff fe4a 	bl	8000618 <restore_non_core_regs>
 8000984:	4630      	mov	r0, r6
 8000986:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 800098a:	bd70      	pop	{r4, r5, r6, pc}

0800098c <__gnu_unwind_pr_common>:
 800098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000990:	4693      	mov	fp, r2
 8000992:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000994:	b089      	sub	sp, #36	@ 0x24
 8000996:	460d      	mov	r5, r1
 8000998:	f852 1b04 	ldr.w	r1, [r2], #4
 800099c:	9206      	str	r2, [sp, #24]
 800099e:	f000 0c03 	and.w	ip, r0, #3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d079      	beq.n	8000a9a <__gnu_unwind_pr_common+0x10e>
 80009a6:	0c0c      	lsrs	r4, r1, #16
 80009a8:	f88d 401d 	strb.w	r4, [sp, #29]
 80009ac:	0409      	lsls	r1, r1, #16
 80009ae:	b2e4      	uxtb	r4, r4
 80009b0:	9105      	str	r1, [sp, #20]
 80009b2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80009b6:	2102      	movs	r1, #2
 80009b8:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 80009ba:	f88d 101c 	strb.w	r1, [sp, #28]
 80009be:	f1bc 0f02 	cmp.w	ip, #2
 80009c2:	bf08      	it	eq
 80009c4:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 80009c6:	f017 0701 	ands.w	r7, r7, #1
 80009ca:	d00c      	beq.n	80009e6 <__gnu_unwind_pr_common+0x5a>
 80009cc:	a905      	add	r1, sp, #20
 80009ce:	4658      	mov	r0, fp
 80009d0:	f000 fb84 	bl	80010dc <__gnu_unwind_execute>
 80009d4:	b918      	cbnz	r0, 80009de <__gnu_unwind_pr_common+0x52>
 80009d6:	2008      	movs	r0, #8
 80009d8:	b009      	add	sp, #36	@ 0x24
 80009da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009de:	2009      	movs	r0, #9
 80009e0:	b009      	add	sp, #36	@ 0x24
 80009e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e6:	6816      	ldr	r6, [r2, #0]
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d0ef      	beq.n	80009cc <__gnu_unwind_pr_common+0x40>
 80009ec:	f000 0108 	and.w	r1, r0, #8
 80009f0:	9101      	str	r1, [sp, #4]
 80009f2:	46b2      	mov	sl, r6
 80009f4:	9702      	str	r7, [sp, #8]
 80009f6:	4664      	mov	r4, ip
 80009f8:	4699      	mov	r9, r3
 80009fa:	f1b9 0f02 	cmp.w	r9, #2
 80009fe:	d048      	beq.n	8000a92 <__gnu_unwind_pr_common+0x106>
 8000a00:	f8b2 a000 	ldrh.w	sl, [r2]
 8000a04:	8856      	ldrh	r6, [r2, #2]
 8000a06:	f102 0804 	add.w	r8, r2, #4
 8000a0a:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8000a0c:	f026 0301 	bic.w	r3, r6, #1
 8000a10:	210f      	movs	r1, #15
 8000a12:	4658      	mov	r0, fp
 8000a14:	189f      	adds	r7, r3, r2
 8000a16:	f7ff ff45 	bl	80008a4 <_Unwind_GetGR>
 8000a1a:	4287      	cmp	r7, r0
 8000a1c:	d837      	bhi.n	8000a8e <__gnu_unwind_pr_common+0x102>
 8000a1e:	f02a 0201 	bic.w	r2, sl, #1
 8000a22:	443a      	add	r2, r7
 8000a24:	4282      	cmp	r2, r0
 8000a26:	bf94      	ite	ls
 8000a28:	2200      	movls	r2, #0
 8000a2a:	2201      	movhi	r2, #1
 8000a2c:	0073      	lsls	r3, r6, #1
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	f00a 0a01 	and.w	sl, sl, #1
 8000a36:	ea43 030a 	orr.w	r3, r3, sl
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d047      	beq.n	8000ace <__gnu_unwind_pr_common+0x142>
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d031      	beq.n	8000aa6 <__gnu_unwind_pr_common+0x11a>
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1cb      	bne.n	80009de <__gnu_unwind_pr_common+0x52>
 8000a46:	b114      	cbz	r4, 8000a4e <__gnu_unwind_pr_common+0xc2>
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	f040 80c9 	bne.w	8000be0 <__gnu_unwind_pr_common+0x254>
 8000a4e:	f108 0204 	add.w	r2, r8, #4
 8000a52:	f8d2 a000 	ldr.w	sl, [r2]
 8000a56:	f1ba 0f00 	cmp.w	sl, #0
 8000a5a:	d1ce      	bne.n	80009fa <__gnu_unwind_pr_common+0x6e>
 8000a5c:	a905      	add	r1, sp, #20
 8000a5e:	4658      	mov	r0, fp
 8000a60:	9f02      	ldr	r7, [sp, #8]
 8000a62:	f000 fb3b 	bl	80010dc <__gnu_unwind_execute>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d1b9      	bne.n	80009de <__gnu_unwind_pr_common+0x52>
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	d0b3      	beq.n	80009d6 <__gnu_unwind_pr_common+0x4a>
 8000a6e:	210f      	movs	r1, #15
 8000a70:	4658      	mov	r0, fp
 8000a72:	f7ff ff17 	bl	80008a4 <_Unwind_GetGR>
 8000a76:	210e      	movs	r1, #14
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4658      	mov	r0, fp
 8000a7c:	f7ff ff38 	bl	80008f0 <_Unwind_SetGR>
 8000a80:	4a67      	ldr	r2, [pc, #412]	@ (8000c20 <__gnu_unwind_pr_common+0x294>)
 8000a82:	210f      	movs	r1, #15
 8000a84:	4658      	mov	r0, fp
 8000a86:	f7ff ff33 	bl	80008f0 <_Unwind_SetGR>
 8000a8a:	2007      	movs	r0, #7
 8000a8c:	e7a8      	b.n	80009e0 <__gnu_unwind_pr_common+0x54>
 8000a8e:	2200      	movs	r2, #0
 8000a90:	e7cc      	b.n	8000a2c <__gnu_unwind_pr_common+0xa0>
 8000a92:	6856      	ldr	r6, [r2, #4]
 8000a94:	f102 0808 	add.w	r8, r2, #8
 8000a98:	e7b7      	b.n	8000a0a <__gnu_unwind_pr_common+0x7e>
 8000a9a:	0209      	lsls	r1, r1, #8
 8000a9c:	9105      	str	r1, [sp, #20]
 8000a9e:	f88d 301d 	strb.w	r3, [sp, #29]
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	e788      	b.n	80009b8 <__gnu_unwind_pr_common+0x2c>
 8000aa6:	f8d8 6000 	ldr.w	r6, [r8]
 8000aaa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d144      	bne.n	8000b3c <__gnu_unwind_pr_common+0x1b0>
 8000ab2:	b122      	cbz	r2, 8000abe <__gnu_unwind_pr_common+0x132>
 8000ab4:	9a01      	ldr	r2, [sp, #4]
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d05a      	beq.n	8000b70 <__gnu_unwind_pr_common+0x1e4>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d058      	beq.n	8000b70 <__gnu_unwind_pr_common+0x1e4>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	da01      	bge.n	8000ac6 <__gnu_unwind_pr_common+0x13a>
 8000ac2:	f108 0804 	add.w	r8, r8, #4
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8000acc:	e7c1      	b.n	8000a52 <__gnu_unwind_pr_common+0xc6>
 8000ace:	b9ec      	cbnz	r4, 8000b0c <__gnu_unwind_pr_common+0x180>
 8000ad0:	b1ca      	cbz	r2, 8000b06 <__gnu_unwind_pr_common+0x17a>
 8000ad2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000ad6:	f8d8 2000 	ldr.w	r2, [r8]
 8000ada:	1c99      	adds	r1, r3, #2
 8000adc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ae0:	f43f af7d 	beq.w	80009de <__gnu_unwind_pr_common+0x52>
 8000ae4:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8000ae8:	3301      	adds	r3, #1
 8000aea:	9104      	str	r1, [sp, #16]
 8000aec:	f000 808b 	beq.w	8000c06 <__gnu_unwind_pr_common+0x27a>
 8000af0:	f108 0004 	add.w	r0, r8, #4
 8000af4:	f7ff fdbe 	bl	8000674 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000af8:	ab04      	add	r3, sp, #16
 8000afa:	4601      	mov	r1, r0
 8000afc:	4628      	mov	r0, r5
 8000afe:	f3af 8000 	nop.w
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d157      	bne.n	8000bb6 <__gnu_unwind_pr_common+0x22a>
 8000b06:	f108 0208 	add.w	r2, r8, #8
 8000b0a:	e7a2      	b.n	8000a52 <__gnu_unwind_pr_common+0xc6>
 8000b0c:	210d      	movs	r1, #13
 8000b0e:	4658      	mov	r0, fp
 8000b10:	f7ff fec8 	bl	80008a4 <_Unwind_GetGR>
 8000b14:	6a2b      	ldr	r3, [r5, #32]
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d1f5      	bne.n	8000b06 <__gnu_unwind_pr_common+0x17a>
 8000b1a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000b1c:	4598      	cmp	r8, r3
 8000b1e:	d1f2      	bne.n	8000b06 <__gnu_unwind_pr_common+0x17a>
 8000b20:	4640      	mov	r0, r8
 8000b22:	f7ff fcdf 	bl	80004e4 <selfrel_offset31>
 8000b26:	210f      	movs	r1, #15
 8000b28:	4602      	mov	r2, r0
 8000b2a:	4658      	mov	r0, fp
 8000b2c:	f7ff fee0 	bl	80008f0 <_Unwind_SetGR>
 8000b30:	462a      	mov	r2, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	4658      	mov	r0, fp
 8000b36:	f7ff fedb 	bl	80008f0 <_Unwind_SetGR>
 8000b3a:	e7a6      	b.n	8000a8a <__gnu_unwind_pr_common+0xfe>
 8000b3c:	210d      	movs	r1, #13
 8000b3e:	4658      	mov	r0, fp
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	f7ff feaf 	bl	80008a4 <_Unwind_GetGR>
 8000b46:	6a2a      	ldr	r2, [r5, #32]
 8000b48:	9b03      	ldr	r3, [sp, #12]
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	d1b7      	bne.n	8000abe <__gnu_unwind_pr_common+0x132>
 8000b4e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000b50:	4590      	cmp	r8, r2
 8000b52:	d1b4      	bne.n	8000abe <__gnu_unwind_pr_common+0x132>
 8000b54:	2700      	movs	r7, #0
 8000b56:	2204      	movs	r2, #4
 8000b58:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8000b5c:	4442      	add	r2, r8
 8000b5e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000b60:	636a      	str	r2, [r5, #52]	@ 0x34
 8000b62:	f8d8 2000 	ldr.w	r2, [r8]
 8000b66:	42ba      	cmp	r2, r7
 8000b68:	db55      	blt.n	8000c16 <__gnu_unwind_pr_common+0x28a>
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	9202      	str	r2, [sp, #8]
 8000b6e:	e7aa      	b.n	8000ac6 <__gnu_unwind_pr_common+0x13a>
 8000b70:	9403      	str	r4, [sp, #12]
 8000b72:	f108 0a04 	add.w	sl, r8, #4
 8000b76:	2600      	movs	r6, #0
 8000b78:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8000b7c:	461c      	mov	r4, r3
 8000b7e:	e00d      	b.n	8000b9c <__gnu_unwind_pr_common+0x210>
 8000b80:	4650      	mov	r0, sl
 8000b82:	9704      	str	r7, [sp, #16]
 8000b84:	f7ff fd76 	bl	8000674 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	ab04      	add	r3, sp, #16
 8000b8e:	4628      	mov	r0, r5
 8000b90:	3601      	adds	r6, #1
 8000b92:	f10a 0a04 	add.w	sl, sl, #4
 8000b96:	f3af 8000 	nop.w
 8000b9a:	b9e0      	cbnz	r0, 8000bd6 <__gnu_unwind_pr_common+0x24a>
 8000b9c:	42a6      	cmp	r6, r4
 8000b9e:	d1ef      	bne.n	8000b80 <__gnu_unwind_pr_common+0x1f4>
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	4658      	mov	r0, fp
 8000ba4:	f7ff fe7e 	bl	80008a4 <_Unwind_GetGR>
 8000ba8:	9b04      	ldr	r3, [sp, #16]
 8000baa:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8000bae:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	e714      	b.n	80009e0 <__gnu_unwind_pr_common+0x54>
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	210d      	movs	r1, #13
 8000bba:	4658      	mov	r0, fp
 8000bbc:	f7ff fe72 	bl	80008a4 <_Unwind_GetGR>
 8000bc0:	9e04      	ldr	r6, [sp, #16]
 8000bc2:	6228      	str	r0, [r5, #32]
 8000bc4:	2c02      	cmp	r4, #2
 8000bc6:	bf04      	itt	eq
 8000bc8:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000bca:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000bce:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8000bd2:	2006      	movs	r0, #6
 8000bd4:	e704      	b.n	80009e0 <__gnu_unwind_pr_common+0x54>
 8000bd6:	4623      	mov	r3, r4
 8000bd8:	f8d8 6000 	ldr.w	r6, [r8]
 8000bdc:	9c03      	ldr	r4, [sp, #12]
 8000bde:	e76e      	b.n	8000abe <__gnu_unwind_pr_common+0x132>
 8000be0:	4640      	mov	r0, r8
 8000be2:	f7ff fc7f 	bl	80004e4 <selfrel_offset31>
 8000be6:	f108 0204 	add.w	r2, r8, #4
 8000bea:	4604      	mov	r4, r0
 8000bec:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000bee:	4628      	mov	r0, r5
 8000bf0:	f3af 8000 	nop.w
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	f43f aef2 	beq.w	80009de <__gnu_unwind_pr_common+0x52>
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	4658      	mov	r0, fp
 8000c00:	f7ff fe76 	bl	80008f0 <_Unwind_SetGR>
 8000c04:	e741      	b.n	8000a8a <__gnu_unwind_pr_common+0xfe>
 8000c06:	460c      	mov	r4, r1
 8000c08:	4658      	mov	r0, fp
 8000c0a:	210d      	movs	r1, #13
 8000c0c:	f7ff fe4a 	bl	80008a4 <_Unwind_GetGR>
 8000c10:	4626      	mov	r6, r4
 8000c12:	6228      	str	r0, [r5, #32]
 8000c14:	e7db      	b.n	8000bce <__gnu_unwind_pr_common+0x242>
 8000c16:	1c58      	adds	r0, r3, #1
 8000c18:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000c1c:	e781      	b.n	8000b22 <__gnu_unwind_pr_common+0x196>
 8000c1e:	bf00      	nop
 8000c20:	00000000 	.word	0x00000000

08000c24 <__aeabi_unwind_cpp_pr0>:
 8000c24:	2300      	movs	r3, #0
 8000c26:	e6b1      	b.n	800098c <__gnu_unwind_pr_common>

08000c28 <__aeabi_unwind_cpp_pr1>:
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e6af      	b.n	800098c <__gnu_unwind_pr_common>

08000c2c <__aeabi_unwind_cpp_pr2>:
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e6ad      	b.n	800098c <__gnu_unwind_pr_common>

08000c30 <_Unwind_VRS_Pop>:
 8000c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c34:	4606      	mov	r6, r0
 8000c36:	b0c3      	sub	sp, #268	@ 0x10c
 8000c38:	4615      	mov	r5, r2
 8000c3a:	461c      	mov	r4, r3
 8000c3c:	2904      	cmp	r1, #4
 8000c3e:	f200 80d1 	bhi.w	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000c42:	e8df f001 	tbb	[pc, r1]
 8000c46:	51ac      	.short	0x51ac
 8000c48:	2acf      	.short	0x2acf
 8000c4a:	03          	.byte	0x03
 8000c4b:	00          	.byte	0x00
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	f040 80c9 	bne.w	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000c52:	2a10      	cmp	r2, #16
 8000c54:	f200 80c6 	bhi.w	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000c58:	6803      	ldr	r3, [r0, #0]
 8000c5a:	06dc      	lsls	r4, r3, #27
 8000c5c:	f100 80e7 	bmi.w	8000e2e <_Unwind_VRS_Pop+0x1fe>
 8000c60:	af20      	add	r7, sp, #128	@ 0x80
 8000c62:	4638      	mov	r0, r7
 8000c64:	f000 f9aa 	bl	8000fbc <__gnu_Unwind_Save_WMMXC>
 8000c68:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f04f 0c01 	mov.w	ip, #1
 8000c72:	fa0c f203 	lsl.w	r2, ip, r3
 8000c76:	422a      	tst	r2, r5
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f103 0301 	add.w	r3, r3, #1
 8000c7e:	d003      	beq.n	8000c88 <_Unwind_VRS_Pop+0x58>
 8000c80:	f850 2b04 	ldr.w	r2, [r0], #4
 8000c84:	600a      	str	r2, [r1, #0]
 8000c86:	4604      	mov	r4, r0
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	f101 0104 	add.w	r1, r1, #4
 8000c8e:	d1f0      	bne.n	8000c72 <_Unwind_VRS_Pop+0x42>
 8000c90:	63b4      	str	r4, [r6, #56]	@ 0x38
 8000c92:	4638      	mov	r0, r7
 8000c94:	f000 f988 	bl	8000fa8 <__gnu_Unwind_Restore_WMMXC>
 8000c98:	e099      	b.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000c9a:	2c03      	cmp	r4, #3
 8000c9c:	f040 80a2 	bne.w	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000ca0:	b294      	uxth	r4, r2
 8000ca2:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000ca6:	2b10      	cmp	r3, #16
 8000ca8:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000cac:	f200 809a 	bhi.w	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000cb0:	6803      	ldr	r3, [r0, #0]
 8000cb2:	071f      	lsls	r7, r3, #28
 8000cb4:	f100 80c3 	bmi.w	8000e3e <_Unwind_VRS_Pop+0x20e>
 8000cb8:	af20      	add	r7, sp, #128	@ 0x80
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f000 f952 	bl	8000f64 <__gnu_Unwind_Save_WMMXD>
 8000cc0:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000cc2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000cc6:	b154      	cbz	r4, 8000cde <_Unwind_VRS_Pop+0xae>
 8000cc8:	460b      	mov	r3, r1
 8000cca:	1ad0      	subs	r0, r2, r3
 8000ccc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000cd0:	00e4      	lsls	r4, r4, #3
 8000cd2:	581d      	ldr	r5, [r3, r0]
 8000cd4:	f843 5b04 	str.w	r5, [r3], #4
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d1fa      	bne.n	8000cd2 <_Unwind_VRS_Pop+0xa2>
 8000cdc:	4422      	add	r2, r4
 8000cde:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	f000 f91d 	bl	8000f20 <__gnu_Unwind_Restore_WMMXD>
 8000ce6:	e072      	b.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000ce8:	2c01      	cmp	r4, #1
 8000cea:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000cee:	b295      	uxth	r5, r2
 8000cf0:	d071      	beq.n	8000dd6 <_Unwind_VRS_Pop+0x1a6>
 8000cf2:	2c05      	cmp	r4, #5
 8000cf4:	d176      	bne.n	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000cf6:	eb08 0905 	add.w	r9, r8, r5
 8000cfa:	f1b9 0f20 	cmp.w	r9, #32
 8000cfe:	d871      	bhi.n	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000d00:	f1b8 0f0f 	cmp.w	r8, #15
 8000d04:	d872      	bhi.n	8000dec <_Unwind_VRS_Pop+0x1bc>
 8000d06:	f1b9 0f10 	cmp.w	r9, #16
 8000d0a:	6803      	ldr	r3, [r0, #0]
 8000d0c:	f200 809f 	bhi.w	8000e4e <_Unwind_VRS_Pop+0x21e>
 8000d10:	07d9      	lsls	r1, r3, #31
 8000d12:	d508      	bpl.n	8000d26 <_Unwind_VRS_Pop+0xf6>
 8000d14:	f023 0301 	bic.w	r3, r3, #1
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f840 3b48 	str.w	r3, [r0], #72
 8000d22:	f000 f8f1 	bl	8000f08 <__gnu_Unwind_Save_VFP_D>
 8000d26:	af20      	add	r7, sp, #128	@ 0x80
 8000d28:	4638      	mov	r0, r7
 8000d2a:	f000 f8ed 	bl	8000f08 <__gnu_Unwind_Save_VFP_D>
 8000d2e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	f000 80b9 	beq.w	8000ea8 <_Unwind_VRS_Pop+0x278>
 8000d36:	006d      	lsls	r5, r5, #1
 8000d38:	1e6a      	subs	r2, r5, #1
 8000d3a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000d3e:	2500      	movs	r5, #0
 8000d40:	3201      	adds	r2, #1
 8000d42:	3904      	subs	r1, #4
 8000d44:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000d48:	f853 0b04 	ldr.w	r0, [r3], #4
 8000d4c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d1f9      	bne.n	8000d48 <_Unwind_VRS_Pop+0x118>
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	f000 80a1 	beq.w	8000e9c <_Unwind_VRS_Pop+0x26c>
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	2910      	cmp	r1, #16
 8000d5e:	bf38      	it	cc
 8000d60:	2110      	movcc	r1, #16
 8000d62:	006b      	lsls	r3, r5, #1
 8000d64:	3910      	subs	r1, #16
 8000d66:	466f      	mov	r7, sp
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	3904      	subs	r1, #4
 8000d72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000d76:	f852 0b04 	ldr.w	r0, [r2], #4
 8000d7a:	f841 0f04 	str.w	r0, [r1, #4]!
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d1f9      	bne.n	8000d76 <_Unwind_VRS_Pop+0x146>
 8000d82:	2c01      	cmp	r4, #1
 8000d84:	f000 8088 	beq.w	8000e98 <_Unwind_VRS_Pop+0x268>
 8000d88:	f1b8 0f0f 	cmp.w	r8, #15
 8000d8c:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000d8e:	d802      	bhi.n	8000d96 <_Unwind_VRS_Pop+0x166>
 8000d90:	a820      	add	r0, sp, #128	@ 0x80
 8000d92:	f000 f8b5 	bl	8000f00 <__gnu_Unwind_Restore_VFP_D>
 8000d96:	4638      	mov	r0, r7
 8000d98:	f000 f8ba 	bl	8000f10 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d9c:	e017      	b.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000d9e:	bb0c      	cbnz	r4, 8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000da0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000da2:	4623      	mov	r3, r4
 8000da4:	fa1f fc82 	uxth.w	ip, r2
 8000da8:	2401      	movs	r4, #1
 8000daa:	1d37      	adds	r7, r6, #4
 8000dac:	fa04 f103 	lsl.w	r1, r4, r3
 8000db0:	ea11 0f0c 	tst.w	r1, ip
 8000db4:	4602      	mov	r2, r0
 8000db6:	d004      	beq.n	8000dc2 <_Unwind_VRS_Pop+0x192>
 8000db8:	f852 1b04 	ldr.w	r1, [r2], #4
 8000dbc:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d1f1      	bne.n	8000dac <_Unwind_VRS_Pop+0x17c>
 8000dc8:	04ac      	lsls	r4, r5, #18
 8000dca:	d400      	bmi.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000dcc:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000dce:	2000      	movs	r0, #0
 8000dd0:	b043      	add	sp, #268	@ 0x10c
 8000dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dd6:	eb08 0305 	add.w	r3, r8, r5
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d802      	bhi.n	8000de4 <_Unwind_VRS_Pop+0x1b4>
 8000dde:	f1b8 0f10 	cmp.w	r8, #16
 8000de2:	d114      	bne.n	8000e0e <_Unwind_VRS_Pop+0x1de>
 8000de4:	2002      	movs	r0, #2
 8000de6:	b043      	add	sp, #268	@ 0x10c
 8000de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0ee      	beq.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000df0:	6803      	ldr	r3, [r0, #0]
 8000df2:	075a      	lsls	r2, r3, #29
 8000df4:	d45c      	bmi.n	8000eb0 <_Unwind_VRS_Pop+0x280>
 8000df6:	466f      	mov	r7, sp
 8000df8:	4638      	mov	r0, r7
 8000dfa:	f000 f88d 	bl	8000f18 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000dfe:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000e00:	006b      	lsls	r3, r5, #1
 8000e02:	f1a8 0110 	sub.w	r1, r8, #16
 8000e06:	3b01      	subs	r3, #1
 8000e08:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e0c:	e7af      	b.n	8000d6e <_Unwind_VRS_Pop+0x13e>
 8000e0e:	6803      	ldr	r3, [r0, #0]
 8000e10:	07da      	lsls	r2, r3, #31
 8000e12:	d459      	bmi.n	8000ec8 <_Unwind_VRS_Pop+0x298>
 8000e14:	af20      	add	r7, sp, #128	@ 0x80
 8000e16:	4638      	mov	r0, r7
 8000e18:	f000 f86e 	bl	8000ef8 <__gnu_Unwind_Save_VFP>
 8000e1c:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d189      	bne.n	8000d36 <_Unwind_VRS_Pop+0x106>
 8000e22:	3304      	adds	r3, #4
 8000e24:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000e26:	4638      	mov	r0, r7
 8000e28:	f000 f862 	bl	8000ef0 <__gnu_Unwind_Restore_VFP>
 8000e2c:	e7cf      	b.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000e2e:	f023 0310 	bic.w	r3, r3, #16
 8000e32:	6003      	str	r3, [r0, #0]
 8000e34:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8000e38:	f000 f8c0 	bl	8000fbc <__gnu_Unwind_Save_WMMXC>
 8000e3c:	e710      	b.n	8000c60 <_Unwind_VRS_Pop+0x30>
 8000e3e:	f023 0308 	bic.w	r3, r3, #8
 8000e42:	6003      	str	r3, [r0, #0]
 8000e44:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8000e48:	f000 f88c 	bl	8000f64 <__gnu_Unwind_Save_WMMXD>
 8000e4c:	e734      	b.n	8000cb8 <_Unwind_VRS_Pop+0x88>
 8000e4e:	07d9      	lsls	r1, r3, #31
 8000e50:	d508      	bpl.n	8000e64 <_Unwind_VRS_Pop+0x234>
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f840 3b48 	str.w	r3, [r0], #72
 8000e5e:	f000 f853 	bl	8000f08 <__gnu_Unwind_Save_VFP_D>
 8000e62:	6833      	ldr	r3, [r6, #0]
 8000e64:	0758      	lsls	r0, r3, #29
 8000e66:	d506      	bpl.n	8000e76 <_Unwind_VRS_Pop+0x246>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f023 0304 	bic.w	r3, r3, #4
 8000e6e:	f840 3bd0 	str.w	r3, [r0], #208
 8000e72:	f000 f851 	bl	8000f18 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e76:	af20      	add	r7, sp, #128	@ 0x80
 8000e78:	4638      	mov	r0, r7
 8000e7a:	f000 f845 	bl	8000f08 <__gnu_Unwind_Save_VFP_D>
 8000e7e:	4668      	mov	r0, sp
 8000e80:	f000 f84a 	bl	8000f18 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e84:	f1c8 0210 	rsb	r2, r8, #16
 8000e88:	0052      	lsls	r2, r2, #1
 8000e8a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000e8c:	f1a9 0510 	sub.w	r5, r9, #16
 8000e90:	3a01      	subs	r2, #1
 8000e92:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000e96:	e753      	b.n	8000d40 <_Unwind_VRS_Pop+0x110>
 8000e98:	af20      	add	r7, sp, #128	@ 0x80
 8000e9a:	e7c2      	b.n	8000e22 <_Unwind_VRS_Pop+0x1f2>
 8000e9c:	2c01      	cmp	r4, #1
 8000e9e:	d0c0      	beq.n	8000e22 <_Unwind_VRS_Pop+0x1f2>
 8000ea0:	f1b8 0f0f 	cmp.w	r8, #15
 8000ea4:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000ea6:	d892      	bhi.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	f000 f829 	bl	8000f00 <__gnu_Unwind_Restore_VFP_D>
 8000eae:	e78e      	b.n	8000dce <_Unwind_VRS_Pop+0x19e>
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	f840 3bd0 	str.w	r3, [r0], #208
 8000eb8:	466f      	mov	r7, sp
 8000eba:	f000 f82d 	bl	8000f18 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ebe:	4638      	mov	r0, r7
 8000ec0:	f000 f82a 	bl	8000f18 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ec4:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000ec6:	e79b      	b.n	8000e00 <_Unwind_VRS_Pop+0x1d0>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	f840 3b48 	str.w	r3, [r0], #72
 8000ed2:	f000 f811 	bl	8000ef8 <__gnu_Unwind_Save_VFP>
 8000ed6:	e79d      	b.n	8000e14 <_Unwind_VRS_Pop+0x1e4>

08000ed8 <__restore_core_regs>:
 8000ed8:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000edc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	46a6      	mov	lr, r4
 8000ee4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ee8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000eec:	46e5      	mov	sp, ip
 8000eee:	bd00      	pop	{pc}

08000ef0 <__gnu_Unwind_Restore_VFP>:
 8000ef0:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__gnu_Unwind_Save_VFP>:
 8000ef8:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__gnu_Unwind_Restore_VFP_D>:
 8000f00:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__gnu_Unwind_Save_VFP_D>:
 8000f08:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f10:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f18:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__gnu_Unwind_Restore_WMMXD>:
 8000f20:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f24:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f28:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f2c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f30:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f34:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f38:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f3c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f40:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f44:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f48:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f4c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f50:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f54:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f58:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f5c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__gnu_Unwind_Save_WMMXD>:
 8000f64:	ece0 0102 	stfe	f0, [r0], #8
 8000f68:	ece0 1102 	stfe	f1, [r0], #8
 8000f6c:	ece0 2102 	stfe	f2, [r0], #8
 8000f70:	ece0 3102 	stfe	f3, [r0], #8
 8000f74:	ece0 4102 	stfe	f4, [r0], #8
 8000f78:	ece0 5102 	stfe	f5, [r0], #8
 8000f7c:	ece0 6102 	stfe	f6, [r0], #8
 8000f80:	ece0 7102 	stfe	f7, [r0], #8
 8000f84:	ece0 8102 	stfp	f0, [r0], #8
 8000f88:	ece0 9102 	stfp	f1, [r0], #8
 8000f8c:	ece0 a102 	stfp	f2, [r0], #8
 8000f90:	ece0 b102 	stfp	f3, [r0], #8
 8000f94:	ece0 c102 	stfp	f4, [r0], #8
 8000f98:	ece0 d102 	stfp	f5, [r0], #8
 8000f9c:	ece0 e102 	stfp	f6, [r0], #8
 8000fa0:	ece0 f102 	stfp	f7, [r0], #8
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__gnu_Unwind_Restore_WMMXC>:
 8000fa8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fac:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fb0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fb4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <__gnu_Unwind_Save_WMMXC>:
 8000fbc:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fc0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fc4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fc8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <_Unwind_RaiseException>:
 8000fd0:	46ec      	mov	ip, sp
 8000fd2:	b500      	push	{lr}
 8000fd4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fd8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fe4:	a901      	add	r1, sp, #4
 8000fe6:	f7ff fbd7 	bl	8000798 <__gnu_Unwind_RaiseException>
 8000fea:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8000fee:	b012      	add	sp, #72	@ 0x48
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <_Unwind_Resume>:
 8000ff4:	46ec      	mov	ip, sp
 8000ff6:	b500      	push	{lr}
 8000ff8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ffc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001008:	a901      	add	r1, sp, #4
 800100a:	f7ff fc01 	bl	8000810 <__gnu_Unwind_Resume>
 800100e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001012:	b012      	add	sp, #72	@ 0x48
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <_Unwind_Resume_or_Rethrow>:
 8001018:	46ec      	mov	ip, sp
 800101a:	b500      	push	{lr}
 800101c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001020:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e92d 000c 	stmdb	sp!, {r2, r3}
 800102c:	a901      	add	r1, sp, #4
 800102e:	f7ff fc11 	bl	8000854 <__gnu_Unwind_Resume_or_Rethrow>
 8001032:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001036:	b012      	add	sp, #72	@ 0x48
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <_Unwind_ForcedUnwind>:
 800103c:	46ec      	mov	ip, sp
 800103e:	b500      	push	{lr}
 8001040:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001044:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001050:	ab01      	add	r3, sp, #4
 8001052:	f7ff fbd5 	bl	8000800 <__gnu_Unwind_ForcedUnwind>
 8001056:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800105a:	b012      	add	sp, #72	@ 0x48
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <_Unwind_Backtrace>:
 8001060:	46ec      	mov	ip, sp
 8001062:	b500      	push	{lr}
 8001064:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001068:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001074:	aa01      	add	r2, sp, #4
 8001076:	f7ff fc47 	bl	8000908 <__gnu_Unwind_Backtrace>
 800107a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800107e:	b012      	add	sp, #72	@ 0x48
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <next_unwind_byte>:
 8001084:	7a02      	ldrb	r2, [r0, #8]
 8001086:	4603      	mov	r3, r0
 8001088:	b97a      	cbnz	r2, 80010aa <next_unwind_byte+0x26>
 800108a:	7a42      	ldrb	r2, [r0, #9]
 800108c:	b1a2      	cbz	r2, 80010b8 <next_unwind_byte+0x34>
 800108e:	6841      	ldr	r1, [r0, #4]
 8001090:	3a01      	subs	r2, #1
 8001092:	b410      	push	{r4}
 8001094:	7242      	strb	r2, [r0, #9]
 8001096:	6808      	ldr	r0, [r1, #0]
 8001098:	2203      	movs	r2, #3
 800109a:	1d0c      	adds	r4, r1, #4
 800109c:	721a      	strb	r2, [r3, #8]
 800109e:	0202      	lsls	r2, r0, #8
 80010a0:	605c      	str	r4, [r3, #4]
 80010a2:	0e00      	lsrs	r0, r0, #24
 80010a4:	bc10      	pop	{r4}
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	4770      	bx	lr
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	3a01      	subs	r2, #1
 80010ae:	721a      	strb	r2, [r3, #8]
 80010b0:	0202      	lsls	r2, r0, #8
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	0e00      	lsrs	r0, r0, #24
 80010b6:	4770      	bx	lr
 80010b8:	20b0      	movs	r0, #176	@ 0xb0
 80010ba:	4770      	bx	lr

080010bc <_Unwind_GetGR.constprop.0>:
 80010bc:	b500      	push	{lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	2300      	movs	r3, #0
 80010c2:	aa03      	add	r2, sp, #12
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	220c      	movs	r2, #12
 80010ca:	f7ff fbd3 	bl	8000874 <_Unwind_VRS_Get>
 80010ce:	9803      	ldr	r0, [sp, #12]
 80010d0:	b005      	add	sp, #20
 80010d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d6:	bf00      	nop

080010d8 <unwind_UCB_from_context>:
 80010d8:	e7f0      	b.n	80010bc <_Unwind_GetGR.constprop.0>
 80010da:	bf00      	nop

080010dc <__gnu_unwind_execute>:
 80010dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e0:	4606      	mov	r6, r0
 80010e2:	b085      	sub	sp, #20
 80010e4:	460d      	mov	r5, r1
 80010e6:	f04f 0800 	mov.w	r8, #0
 80010ea:	4628      	mov	r0, r5
 80010ec:	f7ff ffca 	bl	8001084 <next_unwind_byte>
 80010f0:	28b0      	cmp	r0, #176	@ 0xb0
 80010f2:	4604      	mov	r4, r0
 80010f4:	f000 80da 	beq.w	80012ac <__gnu_unwind_execute+0x1d0>
 80010f8:	0607      	lsls	r7, r0, #24
 80010fa:	d546      	bpl.n	800118a <__gnu_unwind_execute+0xae>
 80010fc:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001100:	2b80      	cmp	r3, #128	@ 0x80
 8001102:	d05e      	beq.n	80011c2 <__gnu_unwind_execute+0xe6>
 8001104:	2bb0      	cmp	r3, #176	@ 0xb0
 8001106:	d073      	beq.n	80011f0 <__gnu_unwind_execute+0x114>
 8001108:	d81b      	bhi.n	8001142 <__gnu_unwind_execute+0x66>
 800110a:	2b90      	cmp	r3, #144	@ 0x90
 800110c:	f000 809b 	beq.w	8001246 <__gnu_unwind_execute+0x16a>
 8001110:	2ba0      	cmp	r3, #160	@ 0xa0
 8001112:	d112      	bne.n	800113a <__gnu_unwind_execute+0x5e>
 8001114:	43c3      	mvns	r3, r0
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 800111e:	411a      	asrs	r2, r3
 8001120:	0701      	lsls	r1, r0, #28
 8001122:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001126:	d501      	bpl.n	800112c <__gnu_unwind_execute+0x50>
 8001128:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800112c:	2300      	movs	r3, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4630      	mov	r0, r6
 8001132:	f7ff fd7d 	bl	8000c30 <_Unwind_VRS_Pop>
 8001136:	2800      	cmp	r0, #0
 8001138:	d0d7      	beq.n	80010ea <__gnu_unwind_execute+0xe>
 800113a:	2009      	movs	r0, #9
 800113c:	b005      	add	sp, #20
 800113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001142:	2bc0      	cmp	r3, #192	@ 0xc0
 8001144:	d16d      	bne.n	8001222 <__gnu_unwind_execute+0x146>
 8001146:	28c6      	cmp	r0, #198	@ 0xc6
 8001148:	f000 8093 	beq.w	8001272 <__gnu_unwind_execute+0x196>
 800114c:	28c7      	cmp	r0, #199	@ 0xc7
 800114e:	f000 80b2 	beq.w	80012b6 <__gnu_unwind_execute+0x1da>
 8001152:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001156:	2bc0      	cmp	r3, #192	@ 0xc0
 8001158:	f000 80d2 	beq.w	8001300 <__gnu_unwind_execute+0x224>
 800115c:	28c8      	cmp	r0, #200	@ 0xc8
 800115e:	f000 80dd 	beq.w	800131c <__gnu_unwind_execute+0x240>
 8001162:	28c9      	cmp	r0, #201	@ 0xc9
 8001164:	d1e9      	bne.n	800113a <__gnu_unwind_execute+0x5e>
 8001166:	4628      	mov	r0, r5
 8001168:	f7ff ff8c 	bl	8001084 <next_unwind_byte>
 800116c:	0302      	lsls	r2, r0, #12
 800116e:	f000 000f 	and.w	r0, r0, #15
 8001172:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001176:	3001      	adds	r0, #1
 8001178:	4302      	orrs	r2, r0
 800117a:	2101      	movs	r1, #1
 800117c:	2305      	movs	r3, #5
 800117e:	4630      	mov	r0, r6
 8001180:	f7ff fd56 	bl	8000c30 <_Unwind_VRS_Pop>
 8001184:	2800      	cmp	r0, #0
 8001186:	d0b0      	beq.n	80010ea <__gnu_unwind_execute+0xe>
 8001188:	e7d7      	b.n	800113a <__gnu_unwind_execute+0x5e>
 800118a:	0083      	lsls	r3, r0, #2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	1d1f      	adds	r7, r3, #4
 8001190:	f10d 090c 	add.w	r9, sp, #12
 8001194:	2300      	movs	r3, #0
 8001196:	4619      	mov	r1, r3
 8001198:	f8cd 9000 	str.w	r9, [sp]
 800119c:	220d      	movs	r2, #13
 800119e:	4630      	mov	r0, r6
 80011a0:	f7ff fb68 	bl	8000874 <_Unwind_VRS_Get>
 80011a4:	9b03      	ldr	r3, [sp, #12]
 80011a6:	f8cd 9000 	str.w	r9, [sp]
 80011aa:	0660      	lsls	r0, r4, #25
 80011ac:	bf4c      	ite	mi
 80011ae:	1bdf      	submi	r7, r3, r7
 80011b0:	18ff      	addpl	r7, r7, r3
 80011b2:	2300      	movs	r3, #0
 80011b4:	220d      	movs	r2, #13
 80011b6:	4619      	mov	r1, r3
 80011b8:	4630      	mov	r0, r6
 80011ba:	9703      	str	r7, [sp, #12]
 80011bc:	f7ff fb80 	bl	80008c0 <_Unwind_VRS_Set>
 80011c0:	e793      	b.n	80010ea <__gnu_unwind_execute+0xe>
 80011c2:	4628      	mov	r0, r5
 80011c4:	f7ff ff5e 	bl	8001084 <next_unwind_byte>
 80011c8:	0224      	lsls	r4, r4, #8
 80011ca:	4320      	orrs	r0, r4
 80011cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80011d0:	d0b3      	beq.n	800113a <__gnu_unwind_execute+0x5e>
 80011d2:	0104      	lsls	r4, r0, #4
 80011d4:	2300      	movs	r3, #0
 80011d6:	b2a2      	uxth	r2, r4
 80011d8:	4619      	mov	r1, r3
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff fd28 	bl	8000c30 <_Unwind_VRS_Pop>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1aa      	bne.n	800113a <__gnu_unwind_execute+0x5e>
 80011e4:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80011e8:	bf18      	it	ne
 80011ea:	f04f 0801 	movne.w	r8, #1
 80011ee:	e77c      	b.n	80010ea <__gnu_unwind_execute+0xe>
 80011f0:	28b1      	cmp	r0, #177	@ 0xb1
 80011f2:	d051      	beq.n	8001298 <__gnu_unwind_execute+0x1bc>
 80011f4:	28b2      	cmp	r0, #178	@ 0xb2
 80011f6:	f000 80ad 	beq.w	8001354 <__gnu_unwind_execute+0x278>
 80011fa:	28b3      	cmp	r0, #179	@ 0xb3
 80011fc:	d06d      	beq.n	80012da <__gnu_unwind_execute+0x1fe>
 80011fe:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001202:	2bb4      	cmp	r3, #180	@ 0xb4
 8001204:	d099      	beq.n	800113a <__gnu_unwind_execute+0x5e>
 8001206:	f000 0207 	and.w	r2, r0, #7
 800120a:	3201      	adds	r2, #1
 800120c:	2301      	movs	r3, #1
 800120e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001212:	4619      	mov	r1, r3
 8001214:	4630      	mov	r0, r6
 8001216:	f7ff fd0b 	bl	8000c30 <_Unwind_VRS_Pop>
 800121a:	2800      	cmp	r0, #0
 800121c:	f43f af65 	beq.w	80010ea <__gnu_unwind_execute+0xe>
 8001220:	e78b      	b.n	800113a <__gnu_unwind_execute+0x5e>
 8001222:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001226:	2bd0      	cmp	r3, #208	@ 0xd0
 8001228:	d187      	bne.n	800113a <__gnu_unwind_execute+0x5e>
 800122a:	f000 0207 	and.w	r2, r0, #7
 800122e:	3201      	adds	r2, #1
 8001230:	2305      	movs	r3, #5
 8001232:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001236:	2101      	movs	r1, #1
 8001238:	4630      	mov	r0, r6
 800123a:	f7ff fcf9 	bl	8000c30 <_Unwind_VRS_Pop>
 800123e:	2800      	cmp	r0, #0
 8001240:	f43f af53 	beq.w	80010ea <__gnu_unwind_execute+0xe>
 8001244:	e779      	b.n	800113a <__gnu_unwind_execute+0x5e>
 8001246:	f000 030d 	and.w	r3, r0, #13
 800124a:	2b0d      	cmp	r3, #13
 800124c:	f43f af75 	beq.w	800113a <__gnu_unwind_execute+0x5e>
 8001250:	af03      	add	r7, sp, #12
 8001252:	2300      	movs	r3, #0
 8001254:	f000 020f 	and.w	r2, r0, #15
 8001258:	4619      	mov	r1, r3
 800125a:	9700      	str	r7, [sp, #0]
 800125c:	4630      	mov	r0, r6
 800125e:	f7ff fb09 	bl	8000874 <_Unwind_VRS_Get>
 8001262:	2300      	movs	r3, #0
 8001264:	9700      	str	r7, [sp, #0]
 8001266:	220d      	movs	r2, #13
 8001268:	4619      	mov	r1, r3
 800126a:	4630      	mov	r0, r6
 800126c:	f7ff fb28 	bl	80008c0 <_Unwind_VRS_Set>
 8001270:	e73b      	b.n	80010ea <__gnu_unwind_execute+0xe>
 8001272:	4628      	mov	r0, r5
 8001274:	f7ff ff06 	bl	8001084 <next_unwind_byte>
 8001278:	0302      	lsls	r2, r0, #12
 800127a:	f000 000f 	and.w	r0, r0, #15
 800127e:	3001      	adds	r0, #1
 8001280:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001284:	2303      	movs	r3, #3
 8001286:	4302      	orrs	r2, r0
 8001288:	4619      	mov	r1, r3
 800128a:	4630      	mov	r0, r6
 800128c:	f7ff fcd0 	bl	8000c30 <_Unwind_VRS_Pop>
 8001290:	2800      	cmp	r0, #0
 8001292:	f43f af2a 	beq.w	80010ea <__gnu_unwind_execute+0xe>
 8001296:	e750      	b.n	800113a <__gnu_unwind_execute+0x5e>
 8001298:	4628      	mov	r0, r5
 800129a:	f7ff fef3 	bl	8001084 <next_unwind_byte>
 800129e:	1e43      	subs	r3, r0, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b0e      	cmp	r3, #14
 80012a4:	4602      	mov	r2, r0
 80012a6:	f67f af41 	bls.w	800112c <__gnu_unwind_execute+0x50>
 80012aa:	e746      	b.n	800113a <__gnu_unwind_execute+0x5e>
 80012ac:	f1b8 0f00 	cmp.w	r8, #0
 80012b0:	d040      	beq.n	8001334 <__gnu_unwind_execute+0x258>
 80012b2:	2000      	movs	r0, #0
 80012b4:	e742      	b.n	800113c <__gnu_unwind_execute+0x60>
 80012b6:	4628      	mov	r0, r5
 80012b8:	f7ff fee4 	bl	8001084 <next_unwind_byte>
 80012bc:	1e43      	subs	r3, r0, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b0e      	cmp	r3, #14
 80012c2:	4602      	mov	r2, r0
 80012c4:	f63f af39 	bhi.w	800113a <__gnu_unwind_execute+0x5e>
 80012c8:	2300      	movs	r3, #0
 80012ca:	2104      	movs	r1, #4
 80012cc:	4630      	mov	r0, r6
 80012ce:	f7ff fcaf 	bl	8000c30 <_Unwind_VRS_Pop>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	f43f af09 	beq.w	80010ea <__gnu_unwind_execute+0xe>
 80012d8:	e72f      	b.n	800113a <__gnu_unwind_execute+0x5e>
 80012da:	4628      	mov	r0, r5
 80012dc:	f7ff fed2 	bl	8001084 <next_unwind_byte>
 80012e0:	0302      	lsls	r2, r0, #12
 80012e2:	f000 000f 	and.w	r0, r0, #15
 80012e6:	3001      	adds	r0, #1
 80012e8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80012ec:	2301      	movs	r3, #1
 80012ee:	4302      	orrs	r2, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4630      	mov	r0, r6
 80012f4:	f7ff fc9c 	bl	8000c30 <_Unwind_VRS_Pop>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	f43f aef6 	beq.w	80010ea <__gnu_unwind_execute+0xe>
 80012fe:	e71c      	b.n	800113a <__gnu_unwind_execute+0x5e>
 8001300:	f000 020f 	and.w	r2, r0, #15
 8001304:	3201      	adds	r2, #1
 8001306:	2303      	movs	r3, #3
 8001308:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 800130c:	4619      	mov	r1, r3
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff fc8e 	bl	8000c30 <_Unwind_VRS_Pop>
 8001314:	2800      	cmp	r0, #0
 8001316:	f43f aee8 	beq.w	80010ea <__gnu_unwind_execute+0xe>
 800131a:	e70e      	b.n	800113a <__gnu_unwind_execute+0x5e>
 800131c:	4628      	mov	r0, r5
 800131e:	f7ff feb1 	bl	8001084 <next_unwind_byte>
 8001322:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001326:	f000 030f 	and.w	r3, r0, #15
 800132a:	3210      	adds	r2, #16
 800132c:	3301      	adds	r3, #1
 800132e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001332:	e722      	b.n	800117a <__gnu_unwind_execute+0x9e>
 8001334:	ac03      	add	r4, sp, #12
 8001336:	4643      	mov	r3, r8
 8001338:	4641      	mov	r1, r8
 800133a:	220e      	movs	r2, #14
 800133c:	9400      	str	r4, [sp, #0]
 800133e:	4630      	mov	r0, r6
 8001340:	f7ff fa98 	bl	8000874 <_Unwind_VRS_Get>
 8001344:	9400      	str	r4, [sp, #0]
 8001346:	4643      	mov	r3, r8
 8001348:	220f      	movs	r2, #15
 800134a:	4641      	mov	r1, r8
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fab7 	bl	80008c0 <_Unwind_VRS_Set>
 8001352:	e7ae      	b.n	80012b2 <__gnu_unwind_execute+0x1d6>
 8001354:	2300      	movs	r3, #0
 8001356:	f10d 090c 	add.w	r9, sp, #12
 800135a:	220d      	movs	r2, #13
 800135c:	4619      	mov	r1, r3
 800135e:	f8cd 9000 	str.w	r9, [sp]
 8001362:	4630      	mov	r0, r6
 8001364:	f7ff fa86 	bl	8000874 <_Unwind_VRS_Get>
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fe8b 	bl	8001084 <next_unwind_byte>
 800136e:	0602      	lsls	r2, r0, #24
 8001370:	9c03      	ldr	r4, [sp, #12]
 8001372:	f04f 0702 	mov.w	r7, #2
 8001376:	d50b      	bpl.n	8001390 <__gnu_unwind_execute+0x2b4>
 8001378:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800137c:	40b8      	lsls	r0, r7
 800137e:	4404      	add	r4, r0
 8001380:	4628      	mov	r0, r5
 8001382:	9403      	str	r4, [sp, #12]
 8001384:	f7ff fe7e 	bl	8001084 <next_unwind_byte>
 8001388:	0603      	lsls	r3, r0, #24
 800138a:	f107 0707 	add.w	r7, r7, #7
 800138e:	d4f3      	bmi.n	8001378 <__gnu_unwind_execute+0x29c>
 8001390:	fa00 f207 	lsl.w	r2, r0, r7
 8001394:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001398:	4422      	add	r2, r4
 800139a:	2300      	movs	r3, #0
 800139c:	9203      	str	r2, [sp, #12]
 800139e:	f8cd 9000 	str.w	r9, [sp]
 80013a2:	220d      	movs	r2, #13
 80013a4:	4619      	mov	r1, r3
 80013a6:	4630      	mov	r0, r6
 80013a8:	f7ff fa8a 	bl	80008c0 <_Unwind_VRS_Set>
 80013ac:	e69d      	b.n	80010ea <__gnu_unwind_execute+0xe>
 80013ae:	bf00      	nop

080013b0 <__gnu_unwind_frame>:
 80013b0:	b510      	push	{r4, lr}
 80013b2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80013b4:	6853      	ldr	r3, [r2, #4]
 80013b6:	b084      	sub	sp, #16
 80013b8:	f04f 0c03 	mov.w	ip, #3
 80013bc:	3208      	adds	r2, #8
 80013be:	021c      	lsls	r4, r3, #8
 80013c0:	4608      	mov	r0, r1
 80013c2:	0e1b      	lsrs	r3, r3, #24
 80013c4:	a901      	add	r1, sp, #4
 80013c6:	9401      	str	r4, [sp, #4]
 80013c8:	9202      	str	r2, [sp, #8]
 80013ca:	f88d c00c 	strb.w	ip, [sp, #12]
 80013ce:	f88d 300d 	strb.w	r3, [sp, #13]
 80013d2:	f7ff fe83 	bl	80010dc <__gnu_unwind_execute>
 80013d6:	b004      	add	sp, #16
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	bf00      	nop

080013dc <_Unwind_GetRegionStart>:
 80013dc:	b508      	push	{r3, lr}
 80013de:	f7ff fe7b 	bl	80010d8 <unwind_UCB_from_context>
 80013e2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop

080013e8 <_Unwind_GetLanguageSpecificData>:
 80013e8:	b508      	push	{r3, lr}
 80013ea:	f7ff fe75 	bl	80010d8 <unwind_UCB_from_context>
 80013ee:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80013f0:	79c3      	ldrb	r3, [r0, #7]
 80013f2:	3302      	adds	r3, #2
 80013f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013f8:	bd08      	pop	{r3, pc}
 80013fa:	bf00      	nop

080013fc <__aeabi_idiv0>:
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b7e      	cmp	r3, #126	@ 0x7e
 800140e:	d809      	bhi.n	8001424 <UnityPrintChar+0x24>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b1f      	cmp	r3, #31
 8001416:	d905      	bls.n	8001424 <UnityPrintChar+0x24>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fb47 	bl	8002ab0 <putchar>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8001422:	e021      	b.n	8001468 <UnityPrintChar+0x68>
    else if (*pch == 13)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b0d      	cmp	r3, #13
 800142a:	d106      	bne.n	800143a <UnityPrintChar+0x3a>
        UNITY_OUTPUT_CHAR('\\');
 800142c:	205c      	movs	r0, #92	@ 0x5c
 800142e:	f001 fb3f 	bl	8002ab0 <putchar>
        UNITY_OUTPUT_CHAR('r');
 8001432:	2072      	movs	r0, #114	@ 0x72
 8001434:	f001 fb3c 	bl	8002ab0 <putchar>
}
 8001438:	e016      	b.n	8001468 <UnityPrintChar+0x68>
    else if (*pch == 10)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d106      	bne.n	8001450 <UnityPrintChar+0x50>
        UNITY_OUTPUT_CHAR('\\');
 8001442:	205c      	movs	r0, #92	@ 0x5c
 8001444:	f001 fb34 	bl	8002ab0 <putchar>
        UNITY_OUTPUT_CHAR('n');
 8001448:	206e      	movs	r0, #110	@ 0x6e
 800144a:	f001 fb31 	bl	8002ab0 <putchar>
}
 800144e:	e00b      	b.n	8001468 <UnityPrintChar+0x68>
        UNITY_OUTPUT_CHAR('\\');
 8001450:	205c      	movs	r0, #92	@ 0x5c
 8001452:	f001 fb2d 	bl	8002ab0 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8001456:	2078      	movs	r0, #120	@ 0x78
 8001458:	f001 fb2a 	bl	8002ab0 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2102      	movs	r1, #2
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f868 	bl	8001538 <UnityPrintNumberHex>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <UnityPrint+0x28>
    {
        while (*pch)
 8001482:	e005      	b.n	8001490 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ffbb 	bl	8001400 <UnityPrintChar>
            pch++;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3301      	adds	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f5      	bne.n	8001484 <UnityPrint+0x14>
        }
    }
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <UnityPrintNumber>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da05      	bge.n	80014be <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 80014b2:	202d      	movs	r0, #45	@ 0x2d
 80014b4:	f001 fafc 	bl	8002ab0 <putchar>
        number = (~number) + 1;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	425b      	negs	r3, r3
 80014bc:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f804 	bl	80014cc <UnityPrintNumberUnsigned>
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 80014d8:	e005      	b.n	80014e6 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	d8f3      	bhi.n	80014da <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <UnityPrintNumberUnsigned+0x68>)
 80014fc:	fba3 2301 	umull	r2, r3, r3, r1
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	1aca      	subs	r2, r1, r3
 800150c:	b2d3      	uxtb	r3, r2
 800150e:	3330      	adds	r3, #48	@ 0x30
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f001 facc 	bl	8002ab0 <putchar>
        divisor /= 10;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <UnityPrintNumberUnsigned+0x68>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e3      	bne.n	80014f2 <UnityPrintNumberUnsigned+0x26>
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	cccccccd 	.word	0xcccccccd

08001538 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b08      	cmp	r3, #8
 800154c:	d91f      	bls.n	800158e <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 800154e:	2308      	movs	r3, #8
 8001550:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8001552:	e01c      	b.n	800158e <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	3b01      	subs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b09      	cmp	r3, #9
 800156e:	dc07      	bgt.n	8001580 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3330      	adds	r3, #48	@ 0x30
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fa99 	bl	8002ab0 <putchar>
 800157e:	e006      	b.n	800158e <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3337      	adds	r3, #55	@ 0x37
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fa91 	bl	8002ab0 <putchar>
    while (nibbles > 0)
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1df      	bne.n	8001554 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff60 	bl	8001470 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80015b0:	203a      	movs	r0, #58	@ 0x3a
 80015b2:	f001 fa7d 	bl	8002ab0 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff71 	bl	80014a0 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 80015be:	203a      	movs	r0, #58	@ 0x3a
 80015c0:	f001 fa76 	bl	8002ab0 <putchar>
    UnityPrint(Unity.CurrentTestName);
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <UnityTestResultsBegin+0x3c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff51 	bl	8001470 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80015ce:	203a      	movs	r0, #58	@ 0x3a
 80015d0:	f001 fa6e 	bl	8002ab0 <putchar>
#endif
#endif
#endif
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000088 	.word	0x20000088

080015e0 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <UnityTestResultsFailBegin+0x28>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ffd6 	bl	80015a0 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <UnityTestResultsFailBegin+0x2c>)
 80015f6:	f7ff ff3b 	bl	8001470 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80015fa:	203a      	movs	r0, #58	@ 0x3a
 80015fc:	f001 fa58 	bl	8002ab0 <putchar>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000088 	.word	0x20000088
 800160c:	08003420 	.word	0x08003420

08001610 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <UnityConcludeTest+0x58>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <UnityConcludeTest+0x58>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <UnityConcludeTest+0x58>)
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	e014      	b.n	8001652 <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <UnityConcludeTest+0x58>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10b      	bne.n	8001648 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <UnityConcludeTest+0x58>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <UnityConcludeTest+0x58>)
 8001636:	6912      	ldr	r2, [r2, #16]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ffb0 	bl	80015a0 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <UnityConcludeTest+0x5c>)
 8001642:	f7ff ff15 	bl	8001470 <UnityPrint>
 8001646:	e004      	b.n	8001652 <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <UnityConcludeTest+0x58>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	3301      	adds	r3, #1
 800164e:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <UnityConcludeTest+0x58>)
 8001650:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <UnityConcludeTest+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <UnityConcludeTest+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 800165e:	200a      	movs	r0, #10
 8001660:	f001 fa26 	bl	8002ab0 <putchar>
    UNITY_FLUSH_CALL();
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000088 	.word	0x20000088
 800166c:	08003418 	.word	0x08003418

08001670 <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
#ifdef UNITY_PRINT_TEST_CONTEXT
    UnityPrint(UnityStrSpacer);
    UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
    if (Unity.CurrentDetail1)
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <UnityAddMsgIfSpecified+0x58>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d016      	beq.n	80016ae <UnityAddMsgIfSpecified+0x3e>
    {
        UnityPrint(UnityStrSpacer);
 8001680:	4812      	ldr	r0, [pc, #72]	@ (80016cc <UnityAddMsgIfSpecified+0x5c>)
 8001682:	f7ff fef5 	bl	8001470 <UnityPrint>
        UnityPrint(UnityStrDetail1Name);
 8001686:	4812      	ldr	r0, [pc, #72]	@ (80016d0 <UnityAddMsgIfSpecified+0x60>)
 8001688:	f7ff fef2 	bl	8001470 <UnityPrint>
        UnityPrint(Unity.CurrentDetail1);
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <UnityAddMsgIfSpecified+0x58>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff feed 	bl	8001470 <UnityPrint>
        if (Unity.CurrentDetail2)
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <UnityAddMsgIfSpecified+0x58>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <UnityAddMsgIfSpecified+0x3e>
        {
            UnityPrint(UnityStrDetail2Name);
 800169e:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <UnityAddMsgIfSpecified+0x64>)
 80016a0:	f7ff fee6 	bl	8001470 <UnityPrint>
            UnityPrint(Unity.CurrentDetail2);
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <UnityAddMsgIfSpecified+0x58>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fee1 	bl	8001470 <UnityPrint>
        }
    }
#endif
    if (msg)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <UnityAddMsgIfSpecified+0x5c>)
 80016b6:	f7ff fedb 	bl	8001470 <UnityPrint>
        UnityPrint(msg);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fed8 	bl	8001470 <UnityPrint>
    }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000088 	.word	0x20000088
 80016cc:	08003430 	.word	0x08003430
 80016d0:	08003480 	.word	0x08003480
 80016d4:	0800348c 	.word	0x0800348c

080016d8 <UnityPrintExpectedAndActualStrings>:

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    UnityPrint(UnityStrExpected);
 80016e2:	4815      	ldr	r0, [pc, #84]	@ (8001738 <UnityPrintExpectedAndActualStrings+0x60>)
 80016e4:	f7ff fec4 	bl	8001470 <UnityPrint>
    if (expected != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <UnityPrintExpectedAndActualStrings+0x2a>
    {
        UNITY_OUTPUT_CHAR('\'');
 80016ee:	2027      	movs	r0, #39	@ 0x27
 80016f0:	f001 f9de 	bl	8002ab0 <putchar>
        UnityPrint(expected);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff febb 	bl	8001470 <UnityPrint>
        UNITY_OUTPUT_CHAR('\'');
 80016fa:	2027      	movs	r0, #39	@ 0x27
 80016fc:	f001 f9d8 	bl	8002ab0 <putchar>
 8001700:	e002      	b.n	8001708 <UnityPrintExpectedAndActualStrings+0x30>
    }
    else
    {
        UnityPrint(UnityStrNull);
 8001702:	480e      	ldr	r0, [pc, #56]	@ (800173c <UnityPrintExpectedAndActualStrings+0x64>)
 8001704:	f7ff feb4 	bl	8001470 <UnityPrint>
    }
    UnityPrint(UnityStrWas);
 8001708:	480d      	ldr	r0, [pc, #52]	@ (8001740 <UnityPrintExpectedAndActualStrings+0x68>)
 800170a:	f7ff feb1 	bl	8001470 <UnityPrint>
    if (actual != NULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <UnityPrintExpectedAndActualStrings+0x50>
    {
        UNITY_OUTPUT_CHAR('\'');
 8001714:	2027      	movs	r0, #39	@ 0x27
 8001716:	f001 f9cb 	bl	8002ab0 <putchar>
        UnityPrint(actual);
 800171a:	6838      	ldr	r0, [r7, #0]
 800171c:	f7ff fea8 	bl	8001470 <UnityPrint>
        UNITY_OUTPUT_CHAR('\'');
 8001720:	2027      	movs	r0, #39	@ 0x27
 8001722:	f001 f9c5 	bl	8002ab0 <putchar>
    }
    else
    {
        UnityPrint(UnityStrNull);
    }
}
 8001726:	e002      	b.n	800172e <UnityPrintExpectedAndActualStrings+0x56>
        UnityPrint(UnityStrNull);
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <UnityPrintExpectedAndActualStrings+0x64>)
 800172a:	f7ff fea1 	bl	8001470 <UnityPrint>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	08003434 	.word	0x08003434
 800173c:	08003428 	.word	0x08003428
 8001740:	08003440 	.word	0x08003440

08001744 <UnityAssertEqualString>:
/*-----------------------------------------------*/
void UnityAssertEqualString(const char* expected,
                            const char* actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
 8001752:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <UnityAssertEqualString+0xbc>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <UnityAssertEqualString+0x1e>
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <UnityAssertEqualString+0xbc>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <UnityAssertEqualString+0x26>
 8001762:	2101      	movs	r1, #1
 8001764:	4827      	ldr	r0, [pc, #156]	@ (8001804 <UnityAssertEqualString+0xc0>)
 8001766:	f7fe fd3d 	bl	80001e4 <longjmp>

    /* if both pointers not null compare the strings */
    if (expected && actual)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d024      	beq.n	80017ba <UnityAssertEqualString+0x76>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d021      	beq.n	80017ba <UnityAssertEqualString+0x76>
    {
        for (i = 0; expected[i] || actual[i]; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e011      	b.n	80017a0 <UnityAssertEqualString+0x5c>
        {
            if (expected[i] != actual[i])
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	4413      	add	r3, r2
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	440b      	add	r3, r1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d004      	beq.n	800179a <UnityAssertEqualString+0x56>
            {
                Unity.CurrentTestFailed = 1;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <UnityAssertEqualString+0xbc>)
 8001792:	2201      	movs	r2, #1
 8001794:	621a      	str	r2, [r3, #32]
                break;
 8001796:	bf00      	nop
    if (expected && actual)
 8001798:	e018      	b.n	80017cc <UnityAssertEqualString+0x88>
        for (i = 0; expected[i] || actual[i]; i++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e7      	bne.n	800177c <UnityAssertEqualString+0x38>
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e1      	bne.n	800177c <UnityAssertEqualString+0x38>
    if (expected && actual)
 80017b8:	e008      	b.n	80017cc <UnityAssertEqualString+0x88>
            }
        }
    }
    else
    { /* fail if either null but not if both */
        if (expected || actual)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <UnityAssertEqualString+0x82>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <UnityAssertEqualString+0x88>
        {
            Unity.CurrentTestFailed = 1;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <UnityAssertEqualString+0xbc>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	621a      	str	r2, [r3, #32]
        }
    }

    if (Unity.CurrentTestFailed)
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <UnityAssertEqualString+0xbc>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d010      	beq.n	80017f6 <UnityAssertEqualString+0xb2>
    {
        UnityTestResultsFailBegin(lineNumber);
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f7ff ff03 	bl	80015e0 <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStrings(expected, actual);
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff ff7b 	bl	80016d8 <UnityPrintExpectedAndActualStrings>
        UnityAddMsgIfSpecified(msg);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff44 	bl	8001670 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <UnityAssertEqualString+0xbc>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	621a      	str	r2, [r3, #32]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <UnityAssertEqualString+0xc0>)
 80017f2:	f7fe fcf7 	bl	80001e4 <longjmp>
    }
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000088 	.word	0x20000088
 8001804:	200000b0 	.word	0x200000b0

08001808 <UnityDefaultTestRun>:

/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <UnityDefaultTestRun+0x60>)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <UnityDefaultTestRun+0x60>)
 800181e:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <UnityDefaultTestRun+0x60>)
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <UnityDefaultTestRun+0x60>)
 8001828:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <UnityDefaultTestRun+0x60>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <UnityDefaultTestRun+0x60>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 8001836:	480d      	ldr	r0, [pc, #52]	@ (800186c <UnityDefaultTestRun+0x64>)
 8001838:	f7fe fccc 	bl	80001d4 <setjmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <UnityDefaultTestRun+0x42>
    {
        setUp();
 8001842:	f000 f9c0 	bl	8001bc6 <setUp>
        Func();
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 800184a:	4808      	ldr	r0, [pc, #32]	@ (800186c <UnityDefaultTestRun+0x64>)
 800184c:	f7fe fcc2 	bl	80001d4 <setjmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <UnityDefaultTestRun+0x52>
    {
        tearDown();
 8001856:	f000 f9bd 	bl	8001bd4 <tearDown>
    }
    UNITY_EXEC_TIME_STOP();
    UnityConcludeTest();
 800185a:	f7ff fed9 	bl	8001610 <UnityConcludeTest>
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000088 	.word	0x20000088
 800186c:	200000b0 	.word	0x200000b0

08001870 <UnityBegin>:
    Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8001878:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <UnityBegin+0x50>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <UnityBegin+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <UnityBegin+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <UnityBegin+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <UnityBegin+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <UnityBegin+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <UnityBegin+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <UnityBegin+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24

    UNITY_CLR_DETAILS();
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <UnityBegin+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <UnityBegin+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	20000088 	.word	0x20000088

080018c4 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 80018c8:	200a      	movs	r0, #10
 80018ca:	f001 f8f1 	bl	8002ab0 <putchar>
    UnityPrint(UnityStrBreaker);
 80018ce:	4819      	ldr	r0, [pc, #100]	@ (8001934 <UnityEnd+0x70>)
 80018d0:	f7ff fdce 	bl	8001470 <UnityPrint>
    UNITY_PRINT_EOL();
 80018d4:	200a      	movs	r0, #10
 80018d6:	f001 f8eb 	bl	8002ab0 <putchar>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <UnityEnd+0x74>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fdde 	bl	80014a0 <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 80018e4:	4815      	ldr	r0, [pc, #84]	@ (800193c <UnityEnd+0x78>)
 80018e6:	f7ff fdc3 	bl	8001470 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <UnityEnd+0x74>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fdd6 	bl	80014a0 <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 80018f4:	4812      	ldr	r0, [pc, #72]	@ (8001940 <UnityEnd+0x7c>)
 80018f6:	f7ff fdbb 	bl	8001470 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <UnityEnd+0x74>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fdce 	bl	80014a0 <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 8001904:	480f      	ldr	r0, [pc, #60]	@ (8001944 <UnityEnd+0x80>)
 8001906:	f7ff fdb3 	bl	8001470 <UnityPrint>
    UNITY_PRINT_EOL();
 800190a:	200a      	movs	r0, #10
 800190c:	f001 f8d0 	bl	8002ab0 <putchar>
    if (Unity.TestFailures == 0U)
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <UnityEnd+0x74>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <UnityEnd+0x5c>
    {
        UnityPrint(UnityStrOk);
 8001918:	480b      	ldr	r0, [pc, #44]	@ (8001948 <UnityEnd+0x84>)
 800191a:	f7ff fda9 	bl	8001470 <UnityPrint>
 800191e:	e002      	b.n	8001926 <UnityEnd+0x62>
    }
    else
    {
        UnityPrint(UnityStrFail);
 8001920:	480a      	ldr	r0, [pc, #40]	@ (800194c <UnityEnd+0x88>)
 8001922:	f7ff fda5 	bl	8001470 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 8001926:	200a      	movs	r0, #10
 8001928:	f001 f8c2 	bl	8002ab0 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 800192c:	4b02      	ldr	r3, [pc, #8]	@ (8001938 <UnityEnd+0x74>)
 800192e:	699b      	ldr	r3, [r3, #24]
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	08003448 	.word	0x08003448
 8001938:	20000088 	.word	0x20000088
 800193c:	08003460 	.word	0x08003460
 8001940:	08003468 	.word	0x08003468
 8001944:	08003474 	.word	0x08003474
 8001948:	08003414 	.word	0x08003414
 800194c:	08003420 	.word	0x08003420

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a0f      	ldr	r2, [pc, #60]	@ (800199c <HAL_MspInit+0x4c>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	@ 0x40
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <NMI_Handler+0x4>

080019a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <MemManage_Handler+0x4>

080019b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f6:	f000 fa2f 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  return 1;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_kill>:

int _kill(int pid, int sig)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a18:	f001 f9d6 	bl	8002dc8 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2216      	movs	r2, #22
 8001a20:	601a      	str	r2, [r3, #0]
  return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_exit>:

void _exit (int status)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffe7 	bl	8001a0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <_exit+0x12>

08001a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e00a      	b.n	8001a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a56:	f3af 8000 	nop.w
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf0      	blt.n	8001a56 <_read+0x12>
  }

  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f001 f956 	bl	8002dc8 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20018000 	.word	0x20018000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	20000150 	.word	0x20000150
 8001b50:	200002a8 	.word	0x200002a8

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001b84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001b94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001b98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ba0:	e000      	b.n	8001ba4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ba2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ba4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f9      	beq.n	8001ba2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001bae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <setUp>:

void SystemClock_Config(void);


uint8_t captured_char;
void setUp(){}
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <tearDown>:
void tearDown(){}
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <test_string_comparison>:

void test_string_comparison(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
    const char* expected_string = "Hello, Unity!";
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <test_string_comparison+0x24>)
 8001bec:	607b      	str	r3, [r7, #4]
    const char* actual_string = "Hello, Unity!";  // This should match the expected string
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <test_string_comparison+0x24>)
 8001bf0:	603b      	str	r3, [r7, #0]

    // Compare strings
    TEST_ASSERT_EQUAL_STRING(expected_string, actual_string);
 8001bf2:	2315      	movs	r3, #21
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fda3 	bl	8001744 <UnityAssertEqualString>

    // Test case where strings do not match
    //const char* wrong_string = "Hello, World!";
    //TEST_ASSERT_NOT_EQUAL_STRING(expected_string, wrong_string);  // This will fail
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	080033c8 	.word	0x080033c8

08001c0c <main>:


int main(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  HAL_Init();
 8001c10:	f000 f8d0 	bl	8001db4 <HAL_Init>
  SystemClock_Config();
 8001c14:	f000 f818 	bl	8001c48 <SystemClock_Config>



  while (1)
  {
	  UNITY_BEGIN();  // Initialize Unity Test framework
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <main+0x2c>)
 8001c1a:	f7ff fe29 	bl	8001870 <UnityBegin>
	     printf("HIIIII\n");
 8001c1e:	4807      	ldr	r0, [pc, #28]	@ (8001c3c <main+0x30>)
 8001c20:	f000 ffa4 	bl	8002b6c <puts>

	     RUN_TEST(test_string_comparison);  // Run the string comparison test
 8001c24:	222b      	movs	r2, #43	@ 0x2b
 8001c26:	4906      	ldr	r1, [pc, #24]	@ (8001c40 <main+0x34>)
 8001c28:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <main+0x38>)
 8001c2a:	f7ff fded 	bl	8001808 <UnityDefaultTestRun>

	     UNITY_END();
 8001c2e:	f7ff fe49 	bl	80018c4 <UnityEnd>
	  UNITY_BEGIN();  // Initialize Unity Test framework
 8001c32:	bf00      	nop
 8001c34:	e7f0      	b.n	8001c18 <main+0xc>
 8001c36:	bf00      	nop
 8001c38:	080033d8 	.word	0x080033d8
 8001c3c:	080033f4 	.word	0x080033f4
 8001c40:	080033fc 	.word	0x080033fc
 8001c44:	08001be5 	.word	0x08001be5

08001c48 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	@ 0x50
 8001c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2230      	movs	r2, #48	@ 0x30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 f868 	bl	8002d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <SystemClock_Config+0xcc>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	4a27      	ldr	r2, [pc, #156]	@ (8001d14 <SystemClock_Config+0xcc>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7c:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <SystemClock_Config+0xcc>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <SystemClock_Config+0xd0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c94:	4a20      	ldr	r2, [pc, #128]	@ (8001d18 <SystemClock_Config+0xd0>)
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <SystemClock_Config+0xd0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001cc0:	2354      	movs	r3, #84	@ 0x54
 8001cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f9c7 	bl	8002064 <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cdc:	f000 f83a 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fc29 	bl	8002554 <HAL_RCC_ClockConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d08:	f000 f824 	bl	8001d54 <Error_Handler>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3750      	adds	r7, #80	@ 0x50
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <_write>:



int _write(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e009      	b.n	8001d42 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	60ba      	str	r2, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff1e 	bl	8001b78 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dbf1      	blt.n	8001d2e <_write+0x12>
  }
  return len;
 8001d4a:	687b      	ldr	r3, [r7, #4]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <Error_Handler>:

void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <Error_Handler+0x8>

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d64:	f7ff fef6 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6a:	490d      	ldr	r1, [pc, #52]	@ (8001da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d80:	4c0a      	ldr	r4, [pc, #40]	@ (8001dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f001 f821 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff ff3b 	bl	8001c0c <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001da4:	08003588 	.word	0x08003588
  ldr r2, =_sbss
 8001da8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001dac:	200002a4 	.word	0x200002a4

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f90d 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fdb2 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f917 	bl	800204a <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e34:	f000 f8ed 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20000154 	.word	0x20000154

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000154 	.word	0x20000154

08001e98 <__NVIC_SetPriorityGrouping>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_SetPriority>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	@ (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <SysTick_Config>:
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fdc:	f7ff ff8e 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff47 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff5c 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff8e 	bl	8001f50 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5d 	bl	8001efc <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffb0 	bl	8001fb8 <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e267      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d075      	beq.n	800216e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002082:	4b88      	ldr	r3, [pc, #544]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d00c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4b85      	ldr	r3, [pc, #532]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002096:	2b08      	cmp	r3, #8
 8002098:	d112      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b82      	ldr	r3, [pc, #520]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	4b7e      	ldr	r3, [pc, #504]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05b      	beq.n	800216c <HAL_RCC_OscConfig+0x108>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d157      	bne.n	800216c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e242      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_OscConfig+0x74>
 80020ca:	4b76      	ldr	r3, [pc, #472]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a75      	ldr	r2, [pc, #468]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b70      	ldr	r3, [pc, #448]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6f      	ldr	r2, [pc, #444]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b6d      	ldr	r3, [pc, #436]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6c      	ldr	r2, [pc, #432]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xb0>
 80020fc:	4b69      	ldr	r3, [pc, #420]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a68      	ldr	r2, [pc, #416]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a65      	ldr	r2, [pc, #404]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff feb0 	bl	8001e80 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff feac 	bl	8001e80 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e207      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5b      	ldr	r3, [pc, #364]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xc0>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff fe9c 	bl	8001e80 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff fe98 	bl	8001e80 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1f3      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0xe8>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800217a:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b47      	ldr	r3, [pc, #284]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b44      	ldr	r3, [pc, #272]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1c7      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4937      	ldr	r1, [pc, #220]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_RCC_OscConfig+0x244>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff fe51 	bl	8001e80 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff fe4d 	bl	8001e80 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1a8      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <HAL_RCC_OscConfig+0x244>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff fe30 	bl	8001e80 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002224:	f7ff fe2c 	bl	8001e80 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e187      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d036      	beq.n	80022bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_RCC_OscConfig+0x248>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff fe10 	bl	8001e80 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff fe0c 	bl	8001e80 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e167      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_RCC_OscConfig+0x240>)
 8002278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x200>
 8002282:	e01b      	b.n	80022bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x248>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7ff fdf9 	bl	8001e80 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e00e      	b.n	80022b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff fdf5 	bl	8001e80 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d907      	bls.n	80022b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e150      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470000 	.word	0x42470000
 80022ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	4b88      	ldr	r3, [pc, #544]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ea      	bne.n	8002292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8097 	beq.w	80023f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ce:	4b81      	ldr	r3, [pc, #516]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b7d      	ldr	r3, [pc, #500]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a7c      	ldr	r2, [pc, #496]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b7a      	ldr	r3, [pc, #488]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b77      	ldr	r3, [pc, #476]	@ (80024d8 <HAL_RCC_OscConfig+0x474>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b74      	ldr	r3, [pc, #464]	@ (80024d8 <HAL_RCC_OscConfig+0x474>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a73      	ldr	r2, [pc, #460]	@ (80024d8 <HAL_RCC_OscConfig+0x474>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff fdb5 	bl	8001e80 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff fdb1 	bl	8001e80 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e10c      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_OscConfig+0x474>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x2ea>
 8002340:	4b64      	ldr	r3, [pc, #400]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	4a63      	ldr	r2, [pc, #396]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	@ 0x70
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b05      	cmp	r3, #5
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x30c>
 8002356:	4b5f      	ldr	r3, [pc, #380]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235a:	4a5e      	ldr	r2, [pc, #376]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6713      	str	r3, [r2, #112]	@ 0x70
 8002362:	4b5c      	ldr	r3, [pc, #368]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	4a5b      	ldr	r2, [pc, #364]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6713      	str	r3, [r2, #112]	@ 0x70
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
 8002370:	4b58      	ldr	r3, [pc, #352]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	4a57      	ldr	r2, [pc, #348]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6713      	str	r3, [r2, #112]	@ 0x70
 800237c:	4b55      	ldr	r3, [pc, #340]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	4a54      	ldr	r2, [pc, #336]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7ff fd76 	bl	8001e80 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff fd72 	bl	8001e80 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0cb      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	4b49      	ldr	r3, [pc, #292]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ee      	beq.n	8002398 <HAL_RCC_OscConfig+0x334>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7ff fd60 	bl	8001e80 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7ff fd5c 	bl	8001e80 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0b5      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023da:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ee      	bne.n	80023c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b39      	ldr	r3, [pc, #228]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	4a38      	ldr	r2, [pc, #224]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a1 	beq.w	8002544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002402:	4b34      	ldr	r3, [pc, #208]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d05c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d141      	bne.n	800249a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b31      	ldr	r3, [pc, #196]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff fd30 	bl	8001e80 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7ff fd2c 	bl	8001e80 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e087      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	019b      	lsls	r3, r3, #6
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	3b01      	subs	r3, #1
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	491b      	ldr	r1, [pc, #108]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff fd05 	bl	8001e80 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7ff fd01 	bl	8001e80 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e05c      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x416>
 8002498:	e054      	b.n	8002544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_RCC_OscConfig+0x478>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fcee 	bl	8001e80 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7ff fcea 	bl	8001e80 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e045      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_OscConfig+0x470>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
 80024c6:	e03d      	b.n	8002544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e038      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000
 80024dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_RCC_OscConfig+0x4ec>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d028      	beq.n	8002540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d121      	bne.n	8002540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d11a      	bne.n	8002540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002518:	4293      	cmp	r3, r2
 800251a:	d111      	bne.n	8002540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0cc      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b68      	ldr	r3, [pc, #416]	@ (800270c <HAL_RCC_ClockConfig+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d90c      	bls.n	8002590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b65      	ldr	r3, [pc, #404]	@ (800270c <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b63      	ldr	r3, [pc, #396]	@ (800270c <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0b8      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a8:	4b59      	ldr	r3, [pc, #356]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a52      	ldr	r2, [pc, #328]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b50      	ldr	r3, [pc, #320]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	494d      	ldr	r1, [pc, #308]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d044      	beq.n	8002674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d119      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e07f      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d003      	beq.n	8002612 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	2b03      	cmp	r3, #3
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b3f      	ldr	r3, [pc, #252]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06f      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b3b      	ldr	r3, [pc, #236]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e067      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4934      	ldr	r1, [pc, #208]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7ff fc1c 	bl	8001e80 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7ff fc18 	bl	8001e80 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e04f      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b2b      	ldr	r3, [pc, #172]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_RCC_ClockConfig+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d20c      	bcs.n	800269c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e032      	b.n	8002702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4916      	ldr	r1, [pc, #88]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	490e      	ldr	r1, [pc, #56]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026da:	f000 f821 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	490a      	ldr	r1, [pc, #40]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	5ccb      	ldrb	r3, [r1, r3]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fb7c 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00
 8002710:	40023800 	.word	0x40023800
 8002714:	08003498 	.word	0x08003498
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002724:	b094      	sub	sp, #80	@ 0x50
 8002726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002738:	4b79      	ldr	r3, [pc, #484]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x200>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d00d      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x40>
 8002744:	2b08      	cmp	r3, #8
 8002746:	f200 80e1 	bhi.w	800290c <HAL_RCC_GetSysClockFreq+0x1ec>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x34>
 800274e:	2b04      	cmp	r3, #4
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x3a>
 8002752:	e0db      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4b73      	ldr	r3, [pc, #460]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x204>)
 8002756:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002758:	e0db      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275a:	4b73      	ldr	r3, [pc, #460]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x208>)
 800275c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800275e:	e0d8      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002760:	4b6f      	ldr	r3, [pc, #444]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x200>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002768:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276a:	4b6d      	ldr	r3, [pc, #436]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x200>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	2200      	movs	r2, #0
 800277e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002780:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002788:	633b      	str	r3, [r7, #48]	@ 0x30
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
 800278e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002792:	4622      	mov	r2, r4
 8002794:	462b      	mov	r3, r5
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	0159      	lsls	r1, r3, #5
 80027a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a4:	0150      	lsls	r0, r2, #5
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4621      	mov	r1, r4
 80027ac:	1a51      	subs	r1, r2, r1
 80027ae:	6139      	str	r1, [r7, #16]
 80027b0:	4629      	mov	r1, r5
 80027b2:	eb63 0301 	sbc.w	r3, r3, r1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027c4:	4659      	mov	r1, fp
 80027c6:	018b      	lsls	r3, r1, #6
 80027c8:	4651      	mov	r1, sl
 80027ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ce:	4651      	mov	r1, sl
 80027d0:	018a      	lsls	r2, r1, #6
 80027d2:	4651      	mov	r1, sl
 80027d4:	ebb2 0801 	subs.w	r8, r2, r1
 80027d8:	4659      	mov	r1, fp
 80027da:	eb63 0901 	sbc.w	r9, r3, r1
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f2:	4690      	mov	r8, r2
 80027f4:	4699      	mov	r9, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	eb18 0303 	adds.w	r3, r8, r3
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	462b      	mov	r3, r5
 8002800:	eb49 0303 	adc.w	r3, r9, r3
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002812:	4629      	mov	r1, r5
 8002814:	024b      	lsls	r3, r1, #9
 8002816:	4621      	mov	r1, r4
 8002818:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800281c:	4621      	mov	r1, r4
 800281e:	024a      	lsls	r2, r1, #9
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002826:	2200      	movs	r2, #0
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800282c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002830:	f7fd fce2 	bl	80001f8 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800283c:	e058      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b38      	ldr	r3, [pc, #224]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x200>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	2200      	movs	r2, #0
 8002846:	4618      	mov	r0, r3
 8002848:	4611      	mov	r1, r2
 800284a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800284e:	623b      	str	r3, [r7, #32]
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
 8002854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	f04f 0000 	mov.w	r0, #0
 8002860:	f04f 0100 	mov.w	r1, #0
 8002864:	0159      	lsls	r1, r3, #5
 8002866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286a:	0150      	lsls	r0, r2, #5
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4641      	mov	r1, r8
 8002872:	ebb2 0a01 	subs.w	sl, r2, r1
 8002876:	4649      	mov	r1, r9
 8002878:	eb63 0b01 	sbc.w	fp, r3, r1
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800288c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002890:	ebb2 040a 	subs.w	r4, r2, sl
 8002894:	eb63 050b 	sbc.w	r5, r3, fp
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	00eb      	lsls	r3, r5, #3
 80028a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a6:	00e2      	lsls	r2, r4, #3
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	18e3      	adds	r3, r4, r3
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	464b      	mov	r3, r9
 80028b4:	eb45 0303 	adc.w	r3, r5, r3
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c6:	4629      	mov	r1, r5
 80028c8:	028b      	lsls	r3, r1, #10
 80028ca:	4621      	mov	r1, r4
 80028cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d0:	4621      	mov	r1, r4
 80028d2:	028a      	lsls	r2, r1, #10
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028da:	2200      	movs	r2, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	61fa      	str	r2, [r7, #28]
 80028e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e4:	f7fd fc88 	bl	80001f8 <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4613      	mov	r3, r2
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	3301      	adds	r3, #1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002900:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x204>)
 800290e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002914:	4618      	mov	r0, r3
 8002916:	3750      	adds	r7, #80	@ 0x50
 8002918:	46bd      	mov	sp, r7
 800291a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	00f42400 	.word	0x00f42400
 8002928:	007a1200 	.word	0x007a1200

0800292c <std>:
 800292c:	2300      	movs	r3, #0
 800292e:	b510      	push	{r4, lr}
 8002930:	4604      	mov	r4, r0
 8002932:	e9c0 3300 	strd	r3, r3, [r0]
 8002936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800293a:	6083      	str	r3, [r0, #8]
 800293c:	8181      	strh	r1, [r0, #12]
 800293e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002940:	81c2      	strh	r2, [r0, #14]
 8002942:	6183      	str	r3, [r0, #24]
 8002944:	4619      	mov	r1, r3
 8002946:	2208      	movs	r2, #8
 8002948:	305c      	adds	r0, #92	@ 0x5c
 800294a:	f000 f9ef 	bl	8002d2c <memset>
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <std+0x58>)
 8002950:	6263      	str	r3, [r4, #36]	@ 0x24
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <std+0x5c>)
 8002954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <std+0x60>)
 8002958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <std+0x64>)
 800295c:	6323      	str	r3, [r4, #48]	@ 0x30
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <std+0x68>)
 8002960:	6224      	str	r4, [r4, #32]
 8002962:	429c      	cmp	r4, r3
 8002964:	d006      	beq.n	8002974 <std+0x48>
 8002966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800296a:	4294      	cmp	r4, r2
 800296c:	d002      	beq.n	8002974 <std+0x48>
 800296e:	33d0      	adds	r3, #208	@ 0xd0
 8002970:	429c      	cmp	r4, r3
 8002972:	d105      	bne.n	8002980 <std+0x54>
 8002974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297c:	f000 ba4e 	b.w	8002e1c <__retarget_lock_init_recursive>
 8002980:	bd10      	pop	{r4, pc}
 8002982:	bf00      	nop
 8002984:	08002b7d 	.word	0x08002b7d
 8002988:	08002b9f 	.word	0x08002b9f
 800298c:	08002bd7 	.word	0x08002bd7
 8002990:	08002bfb 	.word	0x08002bfb
 8002994:	20000158 	.word	0x20000158

08002998 <stdio_exit_handler>:
 8002998:	4a02      	ldr	r2, [pc, #8]	@ (80029a4 <stdio_exit_handler+0xc>)
 800299a:	4903      	ldr	r1, [pc, #12]	@ (80029a8 <stdio_exit_handler+0x10>)
 800299c:	4803      	ldr	r0, [pc, #12]	@ (80029ac <stdio_exit_handler+0x14>)
 800299e:	f000 b869 	b.w	8002a74 <_fwalk_sglue>
 80029a2:	bf00      	nop
 80029a4:	2000000c 	.word	0x2000000c
 80029a8:	0800311d 	.word	0x0800311d
 80029ac:	2000001c 	.word	0x2000001c

080029b0 <cleanup_stdio>:
 80029b0:	6841      	ldr	r1, [r0, #4]
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <cleanup_stdio+0x34>)
 80029b4:	4299      	cmp	r1, r3
 80029b6:	b510      	push	{r4, lr}
 80029b8:	4604      	mov	r4, r0
 80029ba:	d001      	beq.n	80029c0 <cleanup_stdio+0x10>
 80029bc:	f000 fbae 	bl	800311c <_fflush_r>
 80029c0:	68a1      	ldr	r1, [r4, #8]
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <cleanup_stdio+0x38>)
 80029c4:	4299      	cmp	r1, r3
 80029c6:	d002      	beq.n	80029ce <cleanup_stdio+0x1e>
 80029c8:	4620      	mov	r0, r4
 80029ca:	f000 fba7 	bl	800311c <_fflush_r>
 80029ce:	68e1      	ldr	r1, [r4, #12]
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <cleanup_stdio+0x3c>)
 80029d2:	4299      	cmp	r1, r3
 80029d4:	d004      	beq.n	80029e0 <cleanup_stdio+0x30>
 80029d6:	4620      	mov	r0, r4
 80029d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029dc:	f000 bb9e 	b.w	800311c <_fflush_r>
 80029e0:	bd10      	pop	{r4, pc}
 80029e2:	bf00      	nop
 80029e4:	20000158 	.word	0x20000158
 80029e8:	200001c0 	.word	0x200001c0
 80029ec:	20000228 	.word	0x20000228

080029f0 <global_stdio_init.part.0>:
 80029f0:	b510      	push	{r4, lr}
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <global_stdio_init.part.0+0x30>)
 80029f4:	4c0b      	ldr	r4, [pc, #44]	@ (8002a24 <global_stdio_init.part.0+0x34>)
 80029f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <global_stdio_init.part.0+0x38>)
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4620      	mov	r0, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	2104      	movs	r1, #4
 8002a00:	f7ff ff94 	bl	800292c <std>
 8002a04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2109      	movs	r1, #9
 8002a0c:	f7ff ff8e 	bl	800292c <std>
 8002a10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a14:	2202      	movs	r2, #2
 8002a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a1a:	2112      	movs	r1, #18
 8002a1c:	f7ff bf86 	b.w	800292c <std>
 8002a20:	20000290 	.word	0x20000290
 8002a24:	20000158 	.word	0x20000158
 8002a28:	08002999 	.word	0x08002999

08002a2c <__sfp_lock_acquire>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	@ (8002a34 <__sfp_lock_acquire+0x8>)
 8002a2e:	f000 b9f6 	b.w	8002e1e <__retarget_lock_acquire_recursive>
 8002a32:	bf00      	nop
 8002a34:	20000299 	.word	0x20000299

08002a38 <__sfp_lock_release>:
 8002a38:	4801      	ldr	r0, [pc, #4]	@ (8002a40 <__sfp_lock_release+0x8>)
 8002a3a:	f000 b9f1 	b.w	8002e20 <__retarget_lock_release_recursive>
 8002a3e:	bf00      	nop
 8002a40:	20000299 	.word	0x20000299

08002a44 <__sinit>:
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4604      	mov	r4, r0
 8002a48:	f7ff fff0 	bl	8002a2c <__sfp_lock_acquire>
 8002a4c:	6a23      	ldr	r3, [r4, #32]
 8002a4e:	b11b      	cbz	r3, 8002a58 <__sinit+0x14>
 8002a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a54:	f7ff bff0 	b.w	8002a38 <__sfp_lock_release>
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <__sinit+0x28>)
 8002a5a:	6223      	str	r3, [r4, #32]
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <__sinit+0x2c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f5      	bne.n	8002a50 <__sinit+0xc>
 8002a64:	f7ff ffc4 	bl	80029f0 <global_stdio_init.part.0>
 8002a68:	e7f2      	b.n	8002a50 <__sinit+0xc>
 8002a6a:	bf00      	nop
 8002a6c:	080029b1 	.word	0x080029b1
 8002a70:	20000290 	.word	0x20000290

08002a74 <_fwalk_sglue>:
 8002a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a78:	4607      	mov	r7, r0
 8002a7a:	4688      	mov	r8, r1
 8002a7c:	4614      	mov	r4, r2
 8002a7e:	2600      	movs	r6, #0
 8002a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a84:	f1b9 0901 	subs.w	r9, r9, #1
 8002a88:	d505      	bpl.n	8002a96 <_fwalk_sglue+0x22>
 8002a8a:	6824      	ldr	r4, [r4, #0]
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	d1f7      	bne.n	8002a80 <_fwalk_sglue+0xc>
 8002a90:	4630      	mov	r0, r6
 8002a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a96:	89ab      	ldrh	r3, [r5, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d907      	bls.n	8002aac <_fwalk_sglue+0x38>
 8002a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	d003      	beq.n	8002aac <_fwalk_sglue+0x38>
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	47c0      	blx	r8
 8002aaa:	4306      	orrs	r6, r0
 8002aac:	3568      	adds	r5, #104	@ 0x68
 8002aae:	e7e9      	b.n	8002a84 <_fwalk_sglue+0x10>

08002ab0 <putchar>:
 8002ab0:	4b02      	ldr	r3, [pc, #8]	@ (8002abc <putchar+0xc>)
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	6882      	ldr	r2, [r0, #8]
 8002ab8:	f000 bbba 	b.w	8003230 <_putc_r>
 8002abc:	20000018 	.word	0x20000018

08002ac0 <_puts_r>:
 8002ac0:	6a03      	ldr	r3, [r0, #32]
 8002ac2:	b570      	push	{r4, r5, r6, lr}
 8002ac4:	6884      	ldr	r4, [r0, #8]
 8002ac6:	4605      	mov	r5, r0
 8002ac8:	460e      	mov	r6, r1
 8002aca:	b90b      	cbnz	r3, 8002ad0 <_puts_r+0x10>
 8002acc:	f7ff ffba 	bl	8002a44 <__sinit>
 8002ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ad2:	07db      	lsls	r3, r3, #31
 8002ad4:	d405      	bmi.n	8002ae2 <_puts_r+0x22>
 8002ad6:	89a3      	ldrh	r3, [r4, #12]
 8002ad8:	0598      	lsls	r0, r3, #22
 8002ada:	d402      	bmi.n	8002ae2 <_puts_r+0x22>
 8002adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ade:	f000 f99e 	bl	8002e1e <__retarget_lock_acquire_recursive>
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	0719      	lsls	r1, r3, #28
 8002ae6:	d502      	bpl.n	8002aee <_puts_r+0x2e>
 8002ae8:	6923      	ldr	r3, [r4, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d135      	bne.n	8002b5a <_puts_r+0x9a>
 8002aee:	4621      	mov	r1, r4
 8002af0:	4628      	mov	r0, r5
 8002af2:	f000 f8c5 	bl	8002c80 <__swsetup_r>
 8002af6:	b380      	cbz	r0, 8002b5a <_puts_r+0x9a>
 8002af8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002afe:	07da      	lsls	r2, r3, #31
 8002b00:	d405      	bmi.n	8002b0e <_puts_r+0x4e>
 8002b02:	89a3      	ldrh	r3, [r4, #12]
 8002b04:	059b      	lsls	r3, r3, #22
 8002b06:	d402      	bmi.n	8002b0e <_puts_r+0x4e>
 8002b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b0a:	f000 f989 	bl	8002e20 <__retarget_lock_release_recursive>
 8002b0e:	4628      	mov	r0, r5
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da04      	bge.n	8002b20 <_puts_r+0x60>
 8002b16:	69a2      	ldr	r2, [r4, #24]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dc17      	bgt.n	8002b4c <_puts_r+0x8c>
 8002b1c:	290a      	cmp	r1, #10
 8002b1e:	d015      	beq.n	8002b4c <_puts_r+0x8c>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	6022      	str	r2, [r4, #0]
 8002b26:	7019      	strb	r1, [r3, #0]
 8002b28:	68a3      	ldr	r3, [r4, #8]
 8002b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60a3      	str	r3, [r4, #8]
 8002b32:	2900      	cmp	r1, #0
 8002b34:	d1ed      	bne.n	8002b12 <_puts_r+0x52>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da11      	bge.n	8002b5e <_puts_r+0x9e>
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	210a      	movs	r1, #10
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f000 f85f 	bl	8002c02 <__swbuf_r>
 8002b44:	3001      	adds	r0, #1
 8002b46:	d0d7      	beq.n	8002af8 <_puts_r+0x38>
 8002b48:	250a      	movs	r5, #10
 8002b4a:	e7d7      	b.n	8002afc <_puts_r+0x3c>
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	4628      	mov	r0, r5
 8002b50:	f000 f857 	bl	8002c02 <__swbuf_r>
 8002b54:	3001      	adds	r0, #1
 8002b56:	d1e7      	bne.n	8002b28 <_puts_r+0x68>
 8002b58:	e7ce      	b.n	8002af8 <_puts_r+0x38>
 8002b5a:	3e01      	subs	r6, #1
 8002b5c:	e7e4      	b.n	8002b28 <_puts_r+0x68>
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	6022      	str	r2, [r4, #0]
 8002b64:	220a      	movs	r2, #10
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e7ee      	b.n	8002b48 <_puts_r+0x88>
	...

08002b6c <puts>:
 8002b6c:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <puts+0xc>)
 8002b6e:	4601      	mov	r1, r0
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	f7ff bfa5 	b.w	8002ac0 <_puts_r>
 8002b76:	bf00      	nop
 8002b78:	20000018 	.word	0x20000018

08002b7c <__sread>:
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	460c      	mov	r4, r1
 8002b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b84:	f000 f8fc 	bl	8002d80 <_read_r>
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	bfab      	itete	ge
 8002b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b90:	181b      	addge	r3, r3, r0
 8002b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b96:	bfac      	ite	ge
 8002b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b9a:	81a3      	strhlt	r3, [r4, #12]
 8002b9c:	bd10      	pop	{r4, pc}

08002b9e <__swrite>:
 8002b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba2:	461f      	mov	r7, r3
 8002ba4:	898b      	ldrh	r3, [r1, #12]
 8002ba6:	05db      	lsls	r3, r3, #23
 8002ba8:	4605      	mov	r5, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	4616      	mov	r6, r2
 8002bae:	d505      	bpl.n	8002bbc <__swrite+0x1e>
 8002bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f000 f8d0 	bl	8002d5c <_lseek_r>
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	4632      	mov	r2, r6
 8002bca:	463b      	mov	r3, r7
 8002bcc:	4628      	mov	r0, r5
 8002bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd2:	f000 b8e7 	b.w	8002da4 <_write_r>

08002bd6 <__sseek>:
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	460c      	mov	r4, r1
 8002bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bde:	f000 f8bd 	bl	8002d5c <_lseek_r>
 8002be2:	1c43      	adds	r3, r0, #1
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	bf15      	itete	ne
 8002be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002bf2:	81a3      	strheq	r3, [r4, #12]
 8002bf4:	bf18      	it	ne
 8002bf6:	81a3      	strhne	r3, [r4, #12]
 8002bf8:	bd10      	pop	{r4, pc}

08002bfa <__sclose>:
 8002bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bfe:	f000 b89d 	b.w	8002d3c <_close_r>

08002c02 <__swbuf_r>:
 8002c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c04:	460e      	mov	r6, r1
 8002c06:	4614      	mov	r4, r2
 8002c08:	4605      	mov	r5, r0
 8002c0a:	b118      	cbz	r0, 8002c14 <__swbuf_r+0x12>
 8002c0c:	6a03      	ldr	r3, [r0, #32]
 8002c0e:	b90b      	cbnz	r3, 8002c14 <__swbuf_r+0x12>
 8002c10:	f7ff ff18 	bl	8002a44 <__sinit>
 8002c14:	69a3      	ldr	r3, [r4, #24]
 8002c16:	60a3      	str	r3, [r4, #8]
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	071a      	lsls	r2, r3, #28
 8002c1c:	d501      	bpl.n	8002c22 <__swbuf_r+0x20>
 8002c1e:	6923      	ldr	r3, [r4, #16]
 8002c20:	b943      	cbnz	r3, 8002c34 <__swbuf_r+0x32>
 8002c22:	4621      	mov	r1, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	f000 f82b 	bl	8002c80 <__swsetup_r>
 8002c2a:	b118      	cbz	r0, 8002c34 <__swbuf_r+0x32>
 8002c2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002c30:	4638      	mov	r0, r7
 8002c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	6922      	ldr	r2, [r4, #16]
 8002c38:	1a98      	subs	r0, r3, r2
 8002c3a:	6963      	ldr	r3, [r4, #20]
 8002c3c:	b2f6      	uxtb	r6, r6
 8002c3e:	4283      	cmp	r3, r0
 8002c40:	4637      	mov	r7, r6
 8002c42:	dc05      	bgt.n	8002c50 <__swbuf_r+0x4e>
 8002c44:	4621      	mov	r1, r4
 8002c46:	4628      	mov	r0, r5
 8002c48:	f000 fa68 	bl	800311c <_fflush_r>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d1ed      	bne.n	8002c2c <__swbuf_r+0x2a>
 8002c50:	68a3      	ldr	r3, [r4, #8]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	60a3      	str	r3, [r4, #8]
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	6022      	str	r2, [r4, #0]
 8002c5c:	701e      	strb	r6, [r3, #0]
 8002c5e:	6962      	ldr	r2, [r4, #20]
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d004      	beq.n	8002c70 <__swbuf_r+0x6e>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	07db      	lsls	r3, r3, #31
 8002c6a:	d5e1      	bpl.n	8002c30 <__swbuf_r+0x2e>
 8002c6c:	2e0a      	cmp	r6, #10
 8002c6e:	d1df      	bne.n	8002c30 <__swbuf_r+0x2e>
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f000 fa52 	bl	800311c <_fflush_r>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d0d9      	beq.n	8002c30 <__swbuf_r+0x2e>
 8002c7c:	e7d6      	b.n	8002c2c <__swbuf_r+0x2a>
	...

08002c80 <__swsetup_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <__swsetup_r+0xa8>)
 8002c84:	4605      	mov	r5, r0
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	460c      	mov	r4, r1
 8002c8a:	b118      	cbz	r0, 8002c94 <__swsetup_r+0x14>
 8002c8c:	6a03      	ldr	r3, [r0, #32]
 8002c8e:	b90b      	cbnz	r3, 8002c94 <__swsetup_r+0x14>
 8002c90:	f7ff fed8 	bl	8002a44 <__sinit>
 8002c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c98:	0719      	lsls	r1, r3, #28
 8002c9a:	d422      	bmi.n	8002ce2 <__swsetup_r+0x62>
 8002c9c:	06da      	lsls	r2, r3, #27
 8002c9e:	d407      	bmi.n	8002cb0 <__swsetup_r+0x30>
 8002ca0:	2209      	movs	r2, #9
 8002ca2:	602a      	str	r2, [r5, #0]
 8002ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cae:	e033      	b.n	8002d18 <__swsetup_r+0x98>
 8002cb0:	0758      	lsls	r0, r3, #29
 8002cb2:	d512      	bpl.n	8002cda <__swsetup_r+0x5a>
 8002cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cb6:	b141      	cbz	r1, 8002cca <__swsetup_r+0x4a>
 8002cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	d002      	beq.n	8002cc6 <__swsetup_r+0x46>
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f8af 	bl	8002e24 <_free_r>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002cd0:	81a3      	strh	r3, [r4, #12]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6063      	str	r3, [r4, #4]
 8002cd6:	6923      	ldr	r3, [r4, #16]
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	89a3      	ldrh	r3, [r4, #12]
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	81a3      	strh	r3, [r4, #12]
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	b94b      	cbnz	r3, 8002cfa <__swsetup_r+0x7a>
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf0:	d003      	beq.n	8002cfa <__swsetup_r+0x7a>
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f000 fa5f 	bl	80031b8 <__smakebuf_r>
 8002cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfe:	f013 0201 	ands.w	r2, r3, #1
 8002d02:	d00a      	beq.n	8002d1a <__swsetup_r+0x9a>
 8002d04:	2200      	movs	r2, #0
 8002d06:	60a2      	str	r2, [r4, #8]
 8002d08:	6962      	ldr	r2, [r4, #20]
 8002d0a:	4252      	negs	r2, r2
 8002d0c:	61a2      	str	r2, [r4, #24]
 8002d0e:	6922      	ldr	r2, [r4, #16]
 8002d10:	b942      	cbnz	r2, 8002d24 <__swsetup_r+0xa4>
 8002d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002d16:	d1c5      	bne.n	8002ca4 <__swsetup_r+0x24>
 8002d18:	bd38      	pop	{r3, r4, r5, pc}
 8002d1a:	0799      	lsls	r1, r3, #30
 8002d1c:	bf58      	it	pl
 8002d1e:	6962      	ldrpl	r2, [r4, #20]
 8002d20:	60a2      	str	r2, [r4, #8]
 8002d22:	e7f4      	b.n	8002d0e <__swsetup_r+0x8e>
 8002d24:	2000      	movs	r0, #0
 8002d26:	e7f7      	b.n	8002d18 <__swsetup_r+0x98>
 8002d28:	20000018 	.word	0x20000018

08002d2c <memset>:
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d100      	bne.n	8002d36 <memset+0xa>
 8002d34:	4770      	bx	lr
 8002d36:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3a:	e7f9      	b.n	8002d30 <memset+0x4>

08002d3c <_close_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4d06      	ldr	r5, [pc, #24]	@ (8002d58 <_close_r+0x1c>)
 8002d40:	2300      	movs	r3, #0
 8002d42:	4604      	mov	r4, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	f7fe fe99 	bl	8001a7e <_close>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d102      	bne.n	8002d56 <_close_r+0x1a>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	b103      	cbz	r3, 8002d56 <_close_r+0x1a>
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	20000294 	.word	0x20000294

08002d5c <_lseek_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	4d07      	ldr	r5, [pc, #28]	@ (8002d7c <_lseek_r+0x20>)
 8002d60:	4604      	mov	r4, r0
 8002d62:	4608      	mov	r0, r1
 8002d64:	4611      	mov	r1, r2
 8002d66:	2200      	movs	r2, #0
 8002d68:	602a      	str	r2, [r5, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f7fe feae 	bl	8001acc <_lseek>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d102      	bne.n	8002d7a <_lseek_r+0x1e>
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	b103      	cbz	r3, 8002d7a <_lseek_r+0x1e>
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	20000294 	.word	0x20000294

08002d80 <_read_r>:
 8002d80:	b538      	push	{r3, r4, r5, lr}
 8002d82:	4d07      	ldr	r5, [pc, #28]	@ (8002da0 <_read_r+0x20>)
 8002d84:	4604      	mov	r4, r0
 8002d86:	4608      	mov	r0, r1
 8002d88:	4611      	mov	r1, r2
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	602a      	str	r2, [r5, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f7fe fe58 	bl	8001a44 <_read>
 8002d94:	1c43      	adds	r3, r0, #1
 8002d96:	d102      	bne.n	8002d9e <_read_r+0x1e>
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	b103      	cbz	r3, 8002d9e <_read_r+0x1e>
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	20000294 	.word	0x20000294

08002da4 <_write_r>:
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	4d07      	ldr	r5, [pc, #28]	@ (8002dc4 <_write_r+0x20>)
 8002da8:	4604      	mov	r4, r0
 8002daa:	4608      	mov	r0, r1
 8002dac:	4611      	mov	r1, r2
 8002dae:	2200      	movs	r2, #0
 8002db0:	602a      	str	r2, [r5, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f7fe ffb2 	bl	8001d1c <_write>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d102      	bne.n	8002dc2 <_write_r+0x1e>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	b103      	cbz	r3, 8002dc2 <_write_r+0x1e>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	20000294 	.word	0x20000294

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	@ (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000018 	.word	0x20000018

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8002e0c <__libc_init_array+0x38>)
 8002dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e10 <__libc_init_array+0x3c>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	2600      	movs	r6, #0
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e14 <__libc_init_array+0x40>)
 8002de6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e18 <__libc_init_array+0x44>)
 8002de8:	f000 fae2 	bl	80033b0 <_init>
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	2600      	movs	r6, #0
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08003580 	.word	0x08003580
 8002e10:	08003580 	.word	0x08003580
 8002e14:	08003580 	.word	0x08003580
 8002e18:	08003584 	.word	0x08003584

08002e1c <__retarget_lock_init_recursive>:
 8002e1c:	4770      	bx	lr

08002e1e <__retarget_lock_acquire_recursive>:
 8002e1e:	4770      	bx	lr

08002e20 <__retarget_lock_release_recursive>:
 8002e20:	4770      	bx	lr
	...

08002e24 <_free_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4605      	mov	r5, r0
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	d041      	beq.n	8002eb0 <_free_r+0x8c>
 8002e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e30:	1f0c      	subs	r4, r1, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bfb8      	it	lt
 8002e36:	18e4      	addlt	r4, r4, r3
 8002e38:	f000 f8e0 	bl	8002ffc <__malloc_lock>
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb4 <_free_r+0x90>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	b933      	cbnz	r3, 8002e50 <_free_r+0x2c>
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	6014      	str	r4, [r2, #0]
 8002e46:	4628      	mov	r0, r5
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4c:	f000 b8dc 	b.w	8003008 <__malloc_unlock>
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d908      	bls.n	8002e66 <_free_r+0x42>
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	1821      	adds	r1, r4, r0
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	bf01      	itttt	eq
 8002e5c:	6819      	ldreq	r1, [r3, #0]
 8002e5e:	685b      	ldreq	r3, [r3, #4]
 8002e60:	1809      	addeq	r1, r1, r0
 8002e62:	6021      	streq	r1, [r4, #0]
 8002e64:	e7ed      	b.n	8002e42 <_free_r+0x1e>
 8002e66:	461a      	mov	r2, r3
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b10b      	cbz	r3, 8002e70 <_free_r+0x4c>
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	d9fa      	bls.n	8002e66 <_free_r+0x42>
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	1850      	adds	r0, r2, r1
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d10b      	bne.n	8002e90 <_free_r+0x6c>
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	4401      	add	r1, r0
 8002e7c:	1850      	adds	r0, r2, r1
 8002e7e:	4283      	cmp	r3, r0
 8002e80:	6011      	str	r1, [r2, #0]
 8002e82:	d1e0      	bne.n	8002e46 <_free_r+0x22>
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	6053      	str	r3, [r2, #4]
 8002e8a:	4408      	add	r0, r1
 8002e8c:	6010      	str	r0, [r2, #0]
 8002e8e:	e7da      	b.n	8002e46 <_free_r+0x22>
 8002e90:	d902      	bls.n	8002e98 <_free_r+0x74>
 8002e92:	230c      	movs	r3, #12
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	e7d6      	b.n	8002e46 <_free_r+0x22>
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	1821      	adds	r1, r4, r0
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	bf04      	itt	eq
 8002ea0:	6819      	ldreq	r1, [r3, #0]
 8002ea2:	685b      	ldreq	r3, [r3, #4]
 8002ea4:	6063      	str	r3, [r4, #4]
 8002ea6:	bf04      	itt	eq
 8002ea8:	1809      	addeq	r1, r1, r0
 8002eaa:	6021      	streq	r1, [r4, #0]
 8002eac:	6054      	str	r4, [r2, #4]
 8002eae:	e7ca      	b.n	8002e46 <_free_r+0x22>
 8002eb0:	bd38      	pop	{r3, r4, r5, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200002a0 	.word	0x200002a0

08002eb8 <sbrk_aligned>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4e0f      	ldr	r6, [pc, #60]	@ (8002ef8 <sbrk_aligned+0x40>)
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	6831      	ldr	r1, [r6, #0]
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	b911      	cbnz	r1, 8002eca <sbrk_aligned+0x12>
 8002ec4:	f000 fa0a 	bl	80032dc <_sbrk_r>
 8002ec8:	6030      	str	r0, [r6, #0]
 8002eca:	4621      	mov	r1, r4
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f000 fa05 	bl	80032dc <_sbrk_r>
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	d103      	bne.n	8002ede <sbrk_aligned+0x26>
 8002ed6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002eda:	4620      	mov	r0, r4
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	1cc4      	adds	r4, r0, #3
 8002ee0:	f024 0403 	bic.w	r4, r4, #3
 8002ee4:	42a0      	cmp	r0, r4
 8002ee6:	d0f8      	beq.n	8002eda <sbrk_aligned+0x22>
 8002ee8:	1a21      	subs	r1, r4, r0
 8002eea:	4628      	mov	r0, r5
 8002eec:	f000 f9f6 	bl	80032dc <_sbrk_r>
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	d1f2      	bne.n	8002eda <sbrk_aligned+0x22>
 8002ef4:	e7ef      	b.n	8002ed6 <sbrk_aligned+0x1e>
 8002ef6:	bf00      	nop
 8002ef8:	2000029c 	.word	0x2000029c

08002efc <_malloc_r>:
 8002efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f00:	1ccd      	adds	r5, r1, #3
 8002f02:	f025 0503 	bic.w	r5, r5, #3
 8002f06:	3508      	adds	r5, #8
 8002f08:	2d0c      	cmp	r5, #12
 8002f0a:	bf38      	it	cc
 8002f0c:	250c      	movcc	r5, #12
 8002f0e:	2d00      	cmp	r5, #0
 8002f10:	4606      	mov	r6, r0
 8002f12:	db01      	blt.n	8002f18 <_malloc_r+0x1c>
 8002f14:	42a9      	cmp	r1, r5
 8002f16:	d904      	bls.n	8002f22 <_malloc_r+0x26>
 8002f18:	230c      	movs	r3, #12
 8002f1a:	6033      	str	r3, [r6, #0]
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ff8 <_malloc_r+0xfc>
 8002f26:	f000 f869 	bl	8002ffc <__malloc_lock>
 8002f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f2e:	461c      	mov	r4, r3
 8002f30:	bb44      	cbnz	r4, 8002f84 <_malloc_r+0x88>
 8002f32:	4629      	mov	r1, r5
 8002f34:	4630      	mov	r0, r6
 8002f36:	f7ff ffbf 	bl	8002eb8 <sbrk_aligned>
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	d158      	bne.n	8002ff2 <_malloc_r+0xf6>
 8002f40:	f8d8 4000 	ldr.w	r4, [r8]
 8002f44:	4627      	mov	r7, r4
 8002f46:	2f00      	cmp	r7, #0
 8002f48:	d143      	bne.n	8002fd2 <_malloc_r+0xd6>
 8002f4a:	2c00      	cmp	r4, #0
 8002f4c:	d04b      	beq.n	8002fe6 <_malloc_r+0xea>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	4639      	mov	r1, r7
 8002f52:	4630      	mov	r0, r6
 8002f54:	eb04 0903 	add.w	r9, r4, r3
 8002f58:	f000 f9c0 	bl	80032dc <_sbrk_r>
 8002f5c:	4581      	cmp	r9, r0
 8002f5e:	d142      	bne.n	8002fe6 <_malloc_r+0xea>
 8002f60:	6821      	ldr	r1, [r4, #0]
 8002f62:	1a6d      	subs	r5, r5, r1
 8002f64:	4629      	mov	r1, r5
 8002f66:	4630      	mov	r0, r6
 8002f68:	f7ff ffa6 	bl	8002eb8 <sbrk_aligned>
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d03a      	beq.n	8002fe6 <_malloc_r+0xea>
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	442b      	add	r3, r5
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	f8d8 3000 	ldr.w	r3, [r8]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	bb62      	cbnz	r2, 8002fd8 <_malloc_r+0xdc>
 8002f7e:	f8c8 7000 	str.w	r7, [r8]
 8002f82:	e00f      	b.n	8002fa4 <_malloc_r+0xa8>
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	1b52      	subs	r2, r2, r5
 8002f88:	d420      	bmi.n	8002fcc <_malloc_r+0xd0>
 8002f8a:	2a0b      	cmp	r2, #11
 8002f8c:	d917      	bls.n	8002fbe <_malloc_r+0xc2>
 8002f8e:	1961      	adds	r1, r4, r5
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	6025      	str	r5, [r4, #0]
 8002f94:	bf18      	it	ne
 8002f96:	6059      	strne	r1, [r3, #4]
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	bf08      	it	eq
 8002f9c:	f8c8 1000 	streq.w	r1, [r8]
 8002fa0:	5162      	str	r2, [r4, r5]
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f000 f82f 	bl	8003008 <__malloc_unlock>
 8002faa:	f104 000b 	add.w	r0, r4, #11
 8002fae:	1d23      	adds	r3, r4, #4
 8002fb0:	f020 0007 	bic.w	r0, r0, #7
 8002fb4:	1ac2      	subs	r2, r0, r3
 8002fb6:	bf1c      	itt	ne
 8002fb8:	1a1b      	subne	r3, r3, r0
 8002fba:	50a3      	strne	r3, [r4, r2]
 8002fbc:	e7af      	b.n	8002f1e <_malloc_r+0x22>
 8002fbe:	6862      	ldr	r2, [r4, #4]
 8002fc0:	42a3      	cmp	r3, r4
 8002fc2:	bf0c      	ite	eq
 8002fc4:	f8c8 2000 	streq.w	r2, [r8]
 8002fc8:	605a      	strne	r2, [r3, #4]
 8002fca:	e7eb      	b.n	8002fa4 <_malloc_r+0xa8>
 8002fcc:	4623      	mov	r3, r4
 8002fce:	6864      	ldr	r4, [r4, #4]
 8002fd0:	e7ae      	b.n	8002f30 <_malloc_r+0x34>
 8002fd2:	463c      	mov	r4, r7
 8002fd4:	687f      	ldr	r7, [r7, #4]
 8002fd6:	e7b6      	b.n	8002f46 <_malloc_r+0x4a>
 8002fd8:	461a      	mov	r2, r3
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	42a3      	cmp	r3, r4
 8002fde:	d1fb      	bne.n	8002fd8 <_malloc_r+0xdc>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6053      	str	r3, [r2, #4]
 8002fe4:	e7de      	b.n	8002fa4 <_malloc_r+0xa8>
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	6033      	str	r3, [r6, #0]
 8002fea:	4630      	mov	r0, r6
 8002fec:	f000 f80c 	bl	8003008 <__malloc_unlock>
 8002ff0:	e794      	b.n	8002f1c <_malloc_r+0x20>
 8002ff2:	6005      	str	r5, [r0, #0]
 8002ff4:	e7d6      	b.n	8002fa4 <_malloc_r+0xa8>
 8002ff6:	bf00      	nop
 8002ff8:	200002a0 	.word	0x200002a0

08002ffc <__malloc_lock>:
 8002ffc:	4801      	ldr	r0, [pc, #4]	@ (8003004 <__malloc_lock+0x8>)
 8002ffe:	f7ff bf0e 	b.w	8002e1e <__retarget_lock_acquire_recursive>
 8003002:	bf00      	nop
 8003004:	20000298 	.word	0x20000298

08003008 <__malloc_unlock>:
 8003008:	4801      	ldr	r0, [pc, #4]	@ (8003010 <__malloc_unlock+0x8>)
 800300a:	f7ff bf09 	b.w	8002e20 <__retarget_lock_release_recursive>
 800300e:	bf00      	nop
 8003010:	20000298 	.word	0x20000298

08003014 <__sflush_r>:
 8003014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800301c:	0716      	lsls	r6, r2, #28
 800301e:	4605      	mov	r5, r0
 8003020:	460c      	mov	r4, r1
 8003022:	d454      	bmi.n	80030ce <__sflush_r+0xba>
 8003024:	684b      	ldr	r3, [r1, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	dc02      	bgt.n	8003030 <__sflush_r+0x1c>
 800302a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	dd48      	ble.n	80030c2 <__sflush_r+0xae>
 8003030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003032:	2e00      	cmp	r6, #0
 8003034:	d045      	beq.n	80030c2 <__sflush_r+0xae>
 8003036:	2300      	movs	r3, #0
 8003038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800303c:	682f      	ldr	r7, [r5, #0]
 800303e:	6a21      	ldr	r1, [r4, #32]
 8003040:	602b      	str	r3, [r5, #0]
 8003042:	d030      	beq.n	80030a6 <__sflush_r+0x92>
 8003044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	0759      	lsls	r1, r3, #29
 800304a:	d505      	bpl.n	8003058 <__sflush_r+0x44>
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003052:	b10b      	cbz	r3, 8003058 <__sflush_r+0x44>
 8003054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	2300      	movs	r3, #0
 800305a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800305c:	6a21      	ldr	r1, [r4, #32]
 800305e:	4628      	mov	r0, r5
 8003060:	47b0      	blx	r6
 8003062:	1c43      	adds	r3, r0, #1
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	d106      	bne.n	8003076 <__sflush_r+0x62>
 8003068:	6829      	ldr	r1, [r5, #0]
 800306a:	291d      	cmp	r1, #29
 800306c:	d82b      	bhi.n	80030c6 <__sflush_r+0xb2>
 800306e:	4a2a      	ldr	r2, [pc, #168]	@ (8003118 <__sflush_r+0x104>)
 8003070:	410a      	asrs	r2, r1
 8003072:	07d6      	lsls	r6, r2, #31
 8003074:	d427      	bmi.n	80030c6 <__sflush_r+0xb2>
 8003076:	2200      	movs	r2, #0
 8003078:	6062      	str	r2, [r4, #4]
 800307a:	04d9      	lsls	r1, r3, #19
 800307c:	6922      	ldr	r2, [r4, #16]
 800307e:	6022      	str	r2, [r4, #0]
 8003080:	d504      	bpl.n	800308c <__sflush_r+0x78>
 8003082:	1c42      	adds	r2, r0, #1
 8003084:	d101      	bne.n	800308a <__sflush_r+0x76>
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	b903      	cbnz	r3, 800308c <__sflush_r+0x78>
 800308a:	6560      	str	r0, [r4, #84]	@ 0x54
 800308c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800308e:	602f      	str	r7, [r5, #0]
 8003090:	b1b9      	cbz	r1, 80030c2 <__sflush_r+0xae>
 8003092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003096:	4299      	cmp	r1, r3
 8003098:	d002      	beq.n	80030a0 <__sflush_r+0x8c>
 800309a:	4628      	mov	r0, r5
 800309c:	f7ff fec2 	bl	8002e24 <_free_r>
 80030a0:	2300      	movs	r3, #0
 80030a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80030a4:	e00d      	b.n	80030c2 <__sflush_r+0xae>
 80030a6:	2301      	movs	r3, #1
 80030a8:	4628      	mov	r0, r5
 80030aa:	47b0      	blx	r6
 80030ac:	4602      	mov	r2, r0
 80030ae:	1c50      	adds	r0, r2, #1
 80030b0:	d1c9      	bne.n	8003046 <__sflush_r+0x32>
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0c6      	beq.n	8003046 <__sflush_r+0x32>
 80030b8:	2b1d      	cmp	r3, #29
 80030ba:	d001      	beq.n	80030c0 <__sflush_r+0xac>
 80030bc:	2b16      	cmp	r3, #22
 80030be:	d11e      	bne.n	80030fe <__sflush_r+0xea>
 80030c0:	602f      	str	r7, [r5, #0]
 80030c2:	2000      	movs	r0, #0
 80030c4:	e022      	b.n	800310c <__sflush_r+0xf8>
 80030c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	e01b      	b.n	8003106 <__sflush_r+0xf2>
 80030ce:	690f      	ldr	r7, [r1, #16]
 80030d0:	2f00      	cmp	r7, #0
 80030d2:	d0f6      	beq.n	80030c2 <__sflush_r+0xae>
 80030d4:	0793      	lsls	r3, r2, #30
 80030d6:	680e      	ldr	r6, [r1, #0]
 80030d8:	bf08      	it	eq
 80030da:	694b      	ldreq	r3, [r1, #20]
 80030dc:	600f      	str	r7, [r1, #0]
 80030de:	bf18      	it	ne
 80030e0:	2300      	movne	r3, #0
 80030e2:	eba6 0807 	sub.w	r8, r6, r7
 80030e6:	608b      	str	r3, [r1, #8]
 80030e8:	f1b8 0f00 	cmp.w	r8, #0
 80030ec:	dde9      	ble.n	80030c2 <__sflush_r+0xae>
 80030ee:	6a21      	ldr	r1, [r4, #32]
 80030f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80030f2:	4643      	mov	r3, r8
 80030f4:	463a      	mov	r2, r7
 80030f6:	4628      	mov	r0, r5
 80030f8:	47b0      	blx	r6
 80030fa:	2800      	cmp	r0, #0
 80030fc:	dc08      	bgt.n	8003110 <__sflush_r+0xfc>
 80030fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003110:	4407      	add	r7, r0
 8003112:	eba8 0800 	sub.w	r8, r8, r0
 8003116:	e7e7      	b.n	80030e8 <__sflush_r+0xd4>
 8003118:	dfbffffe 	.word	0xdfbffffe

0800311c <_fflush_r>:
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	4605      	mov	r5, r0
 8003122:	460c      	mov	r4, r1
 8003124:	b913      	cbnz	r3, 800312c <_fflush_r+0x10>
 8003126:	2500      	movs	r5, #0
 8003128:	4628      	mov	r0, r5
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	b118      	cbz	r0, 8003136 <_fflush_r+0x1a>
 800312e:	6a03      	ldr	r3, [r0, #32]
 8003130:	b90b      	cbnz	r3, 8003136 <_fflush_r+0x1a>
 8003132:	f7ff fc87 	bl	8002a44 <__sinit>
 8003136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f3      	beq.n	8003126 <_fflush_r+0xa>
 800313e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003140:	07d0      	lsls	r0, r2, #31
 8003142:	d404      	bmi.n	800314e <_fflush_r+0x32>
 8003144:	0599      	lsls	r1, r3, #22
 8003146:	d402      	bmi.n	800314e <_fflush_r+0x32>
 8003148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800314a:	f7ff fe68 	bl	8002e1e <__retarget_lock_acquire_recursive>
 800314e:	4628      	mov	r0, r5
 8003150:	4621      	mov	r1, r4
 8003152:	f7ff ff5f 	bl	8003014 <__sflush_r>
 8003156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003158:	07da      	lsls	r2, r3, #31
 800315a:	4605      	mov	r5, r0
 800315c:	d4e4      	bmi.n	8003128 <_fflush_r+0xc>
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	059b      	lsls	r3, r3, #22
 8003162:	d4e1      	bmi.n	8003128 <_fflush_r+0xc>
 8003164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003166:	f7ff fe5b 	bl	8002e20 <__retarget_lock_release_recursive>
 800316a:	e7dd      	b.n	8003128 <_fflush_r+0xc>

0800316c <__swhatbuf_r>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	460c      	mov	r4, r1
 8003170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003174:	2900      	cmp	r1, #0
 8003176:	b096      	sub	sp, #88	@ 0x58
 8003178:	4615      	mov	r5, r2
 800317a:	461e      	mov	r6, r3
 800317c:	da0d      	bge.n	800319a <__swhatbuf_r+0x2e>
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	bf14      	ite	ne
 800318a:	2340      	movne	r3, #64	@ 0x40
 800318c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003190:	2000      	movs	r0, #0
 8003192:	6031      	str	r1, [r6, #0]
 8003194:	602b      	str	r3, [r5, #0]
 8003196:	b016      	add	sp, #88	@ 0x58
 8003198:	bd70      	pop	{r4, r5, r6, pc}
 800319a:	466a      	mov	r2, sp
 800319c:	f000 f87c 	bl	8003298 <_fstat_r>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	dbec      	blt.n	800317e <__swhatbuf_r+0x12>
 80031a4:	9901      	ldr	r1, [sp, #4]
 80031a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80031aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80031ae:	4259      	negs	r1, r3
 80031b0:	4159      	adcs	r1, r3
 80031b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031b6:	e7eb      	b.n	8003190 <__swhatbuf_r+0x24>

080031b8 <__smakebuf_r>:
 80031b8:	898b      	ldrh	r3, [r1, #12]
 80031ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031bc:	079d      	lsls	r5, r3, #30
 80031be:	4606      	mov	r6, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	d507      	bpl.n	80031d4 <__smakebuf_r+0x1c>
 80031c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	6123      	str	r3, [r4, #16]
 80031cc:	2301      	movs	r3, #1
 80031ce:	6163      	str	r3, [r4, #20]
 80031d0:	b003      	add	sp, #12
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d4:	ab01      	add	r3, sp, #4
 80031d6:	466a      	mov	r2, sp
 80031d8:	f7ff ffc8 	bl	800316c <__swhatbuf_r>
 80031dc:	9f00      	ldr	r7, [sp, #0]
 80031de:	4605      	mov	r5, r0
 80031e0:	4639      	mov	r1, r7
 80031e2:	4630      	mov	r0, r6
 80031e4:	f7ff fe8a 	bl	8002efc <_malloc_r>
 80031e8:	b948      	cbnz	r0, 80031fe <__smakebuf_r+0x46>
 80031ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ee:	059a      	lsls	r2, r3, #22
 80031f0:	d4ee      	bmi.n	80031d0 <__smakebuf_r+0x18>
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	e7e2      	b.n	80031c4 <__smakebuf_r+0xc>
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	6020      	str	r0, [r4, #0]
 8003202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003206:	81a3      	strh	r3, [r4, #12]
 8003208:	9b01      	ldr	r3, [sp, #4]
 800320a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800320e:	b15b      	cbz	r3, 8003228 <__smakebuf_r+0x70>
 8003210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003214:	4630      	mov	r0, r6
 8003216:	f000 f851 	bl	80032bc <_isatty_r>
 800321a:	b128      	cbz	r0, 8003228 <__smakebuf_r+0x70>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	431d      	orrs	r5, r3
 800322c:	81a5      	strh	r5, [r4, #12]
 800322e:	e7cf      	b.n	80031d0 <__smakebuf_r+0x18>

08003230 <_putc_r>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	460d      	mov	r5, r1
 8003234:	4614      	mov	r4, r2
 8003236:	4606      	mov	r6, r0
 8003238:	b118      	cbz	r0, 8003242 <_putc_r+0x12>
 800323a:	6a03      	ldr	r3, [r0, #32]
 800323c:	b90b      	cbnz	r3, 8003242 <_putc_r+0x12>
 800323e:	f7ff fc01 	bl	8002a44 <__sinit>
 8003242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003244:	07d8      	lsls	r0, r3, #31
 8003246:	d405      	bmi.n	8003254 <_putc_r+0x24>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	0599      	lsls	r1, r3, #22
 800324c:	d402      	bmi.n	8003254 <_putc_r+0x24>
 800324e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003250:	f7ff fde5 	bl	8002e1e <__retarget_lock_acquire_recursive>
 8003254:	68a3      	ldr	r3, [r4, #8]
 8003256:	3b01      	subs	r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	60a3      	str	r3, [r4, #8]
 800325c:	da05      	bge.n	800326a <_putc_r+0x3a>
 800325e:	69a2      	ldr	r2, [r4, #24]
 8003260:	4293      	cmp	r3, r2
 8003262:	db12      	blt.n	800328a <_putc_r+0x5a>
 8003264:	b2eb      	uxtb	r3, r5
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d00f      	beq.n	800328a <_putc_r+0x5a>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	6022      	str	r2, [r4, #0]
 8003270:	701d      	strb	r5, [r3, #0]
 8003272:	b2ed      	uxtb	r5, r5
 8003274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003276:	07da      	lsls	r2, r3, #31
 8003278:	d405      	bmi.n	8003286 <_putc_r+0x56>
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	059b      	lsls	r3, r3, #22
 800327e:	d402      	bmi.n	8003286 <_putc_r+0x56>
 8003280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003282:	f7ff fdcd 	bl	8002e20 <__retarget_lock_release_recursive>
 8003286:	4628      	mov	r0, r5
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	4629      	mov	r1, r5
 800328c:	4622      	mov	r2, r4
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff fcb7 	bl	8002c02 <__swbuf_r>
 8003294:	4605      	mov	r5, r0
 8003296:	e7ed      	b.n	8003274 <_putc_r+0x44>

08003298 <_fstat_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	4d07      	ldr	r5, [pc, #28]	@ (80032b8 <_fstat_r+0x20>)
 800329c:	2300      	movs	r3, #0
 800329e:	4604      	mov	r4, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	602b      	str	r3, [r5, #0]
 80032a6:	f7fe fbf6 	bl	8001a96 <_fstat>
 80032aa:	1c43      	adds	r3, r0, #1
 80032ac:	d102      	bne.n	80032b4 <_fstat_r+0x1c>
 80032ae:	682b      	ldr	r3, [r5, #0]
 80032b0:	b103      	cbz	r3, 80032b4 <_fstat_r+0x1c>
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	bf00      	nop
 80032b8:	20000294 	.word	0x20000294

080032bc <_isatty_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	4d06      	ldr	r5, [pc, #24]	@ (80032d8 <_isatty_r+0x1c>)
 80032c0:	2300      	movs	r3, #0
 80032c2:	4604      	mov	r4, r0
 80032c4:	4608      	mov	r0, r1
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	f7fe fbf5 	bl	8001ab6 <_isatty>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_isatty_r+0x1a>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_isatty_r+0x1a>
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	20000294 	.word	0x20000294

080032dc <_sbrk_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4d06      	ldr	r5, [pc, #24]	@ (80032f8 <_sbrk_r+0x1c>)
 80032e0:	2300      	movs	r3, #0
 80032e2:	4604      	mov	r4, r0
 80032e4:	4608      	mov	r0, r1
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	f7fe fbfe 	bl	8001ae8 <_sbrk>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d102      	bne.n	80032f6 <_sbrk_r+0x1a>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	b103      	cbz	r3, 80032f6 <_sbrk_r+0x1a>
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	20000294 	.word	0x20000294

080032fc <abort>:
 80032fc:	b508      	push	{r3, lr}
 80032fe:	2006      	movs	r0, #6
 8003300:	f000 f82c 	bl	800335c <raise>
 8003304:	2001      	movs	r0, #1
 8003306:	f7fe fb92 	bl	8001a2e <_exit>

0800330a <_raise_r>:
 800330a:	291f      	cmp	r1, #31
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4605      	mov	r5, r0
 8003310:	460c      	mov	r4, r1
 8003312:	d904      	bls.n	800331e <_raise_r+0x14>
 8003314:	2316      	movs	r3, #22
 8003316:	6003      	str	r3, [r0, #0]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800331c:	bd38      	pop	{r3, r4, r5, pc}
 800331e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003320:	b112      	cbz	r2, 8003328 <_raise_r+0x1e>
 8003322:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003326:	b94b      	cbnz	r3, 800333c <_raise_r+0x32>
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f831 	bl	8003390 <_getpid_r>
 800332e:	4622      	mov	r2, r4
 8003330:	4601      	mov	r1, r0
 8003332:	4628      	mov	r0, r5
 8003334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003338:	f000 b818 	b.w	800336c <_kill_r>
 800333c:	2b01      	cmp	r3, #1
 800333e:	d00a      	beq.n	8003356 <_raise_r+0x4c>
 8003340:	1c59      	adds	r1, r3, #1
 8003342:	d103      	bne.n	800334c <_raise_r+0x42>
 8003344:	2316      	movs	r3, #22
 8003346:	6003      	str	r3, [r0, #0]
 8003348:	2001      	movs	r0, #1
 800334a:	e7e7      	b.n	800331c <_raise_r+0x12>
 800334c:	2100      	movs	r1, #0
 800334e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003352:	4620      	mov	r0, r4
 8003354:	4798      	blx	r3
 8003356:	2000      	movs	r0, #0
 8003358:	e7e0      	b.n	800331c <_raise_r+0x12>
	...

0800335c <raise>:
 800335c:	4b02      	ldr	r3, [pc, #8]	@ (8003368 <raise+0xc>)
 800335e:	4601      	mov	r1, r0
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f7ff bfd2 	b.w	800330a <_raise_r>
 8003366:	bf00      	nop
 8003368:	20000018 	.word	0x20000018

0800336c <_kill_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4d07      	ldr	r5, [pc, #28]	@ (800338c <_kill_r+0x20>)
 8003370:	2300      	movs	r3, #0
 8003372:	4604      	mov	r4, r0
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	602b      	str	r3, [r5, #0]
 800337a:	f7fe fb48 	bl	8001a0e <_kill>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	d102      	bne.n	8003388 <_kill_r+0x1c>
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	b103      	cbz	r3, 8003388 <_kill_r+0x1c>
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	bd38      	pop	{r3, r4, r5, pc}
 800338a:	bf00      	nop
 800338c:	20000294 	.word	0x20000294

08003390 <_getpid_r>:
 8003390:	f7fe bb35 	b.w	80019fe <_getpid>

08003394 <memcpy>:
 8003394:	440a      	add	r2, r1
 8003396:	4291      	cmp	r1, r2
 8003398:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800339c:	d100      	bne.n	80033a0 <memcpy+0xc>
 800339e:	4770      	bx	lr
 80033a0:	b510      	push	{r4, lr}
 80033a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033aa:	4291      	cmp	r1, r2
 80033ac:	d1f9      	bne.n	80033a2 <memcpy+0xe>
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
